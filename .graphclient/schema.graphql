schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  BILLING__billing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__Billing
  BILLING__billings(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__Billing_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__Billing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__Billing!]!
  BILLING__user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__User
  BILLING__users(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__User_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__User!]!
  BILLING__tokensAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensAdded
  BILLING__tokensAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensAdded_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensAdded!]!
  BILLING__tokensRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensRemoved
  BILLING__tokensRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensRemoved_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensRemoved!]!
  BILLING__tokensPulled(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensPulled
  BILLING__tokensPulleds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensPulled_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensPulled_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensPulled!]!
  BILLING__billingDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__BillingDailyData
  BILLING__billingDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__BillingDailyData_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__BillingDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__BillingDailyData!]!
  BILLING__userDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__UserDailyData
  BILLING__userDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__UserDailyData_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__UserDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__UserDailyData!]!
  BILLING__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__Transaction
  BILLING__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__Transaction_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__Transaction!]!
  """Access to subgraph metadata"""
  BILLING___meta(block: BILLING__Block_height): BILLING___Meta_
  ENS__domain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Domain
  ENS__domains(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Domain_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Domain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Domain!]!
  ENS__transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Transfer
  ENS__transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Transfer_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Transfer!]!
  ENS__newOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewOwner
  ENS__newOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewOwner_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewOwner!]!
  ENS__newResolver(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewResolver
  ENS__newResolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewResolver_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewResolver_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewResolver!]!
  ENS__newTTL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewTTL
  ENS__newTTLs(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewTTL_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewTTL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewTTL!]!
  ENS__account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Account
  ENS__accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Account_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Account!]!
  ENS__registration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Registration
  ENS__registrations(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Registration_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Registration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Registration!]!
  ENS__nameRegistered(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameRegistered
  ENS__nameRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameRegistered_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameRegistered_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameRegistered!]!
  ENS__nameRenewed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameRenewed
  ENS__nameReneweds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameRenewed_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameRenewed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameRenewed!]!
  ENS__nameTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameTransferred
  ENS__nameTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameTransferred_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameTransferred!]!
  ENS__resolver(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Resolver
  ENS__resolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Resolver_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Resolver_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Resolver!]!
  ENS__addrChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AddrChanged
  ENS__addrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AddrChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AddrChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AddrChanged!]!
  ENS__multicoinAddrChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__MulticoinAddrChanged
  ENS__multicoinAddrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__MulticoinAddrChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__MulticoinAddrChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__MulticoinAddrChanged!]!
  ENS__nameChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameChanged
  ENS__nameChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameChanged!]!
  ENS__abiChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AbiChanged
  ENS__abiChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AbiChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AbiChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AbiChanged!]!
  ENS__pubkeyChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__PubkeyChanged
  ENS__pubkeyChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__PubkeyChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__PubkeyChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__PubkeyChanged!]!
  ENS__textChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__TextChanged
  ENS__textChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__TextChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__TextChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__TextChanged!]!
  ENS__contenthashChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__ContenthashChanged
  ENS__contenthashChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__ContenthashChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__ContenthashChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__ContenthashChanged!]!
  ENS__interfaceChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__InterfaceChanged
  ENS__interfaceChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__InterfaceChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__InterfaceChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__InterfaceChanged!]!
  ENS__authorisationChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AuthorisationChanged
  ENS__authorisationChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AuthorisationChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AuthorisationChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AuthorisationChanged!]!
  ENS__domainEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__DomainEvent
  ENS__domainEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__DomainEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__DomainEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__DomainEvent!]!
  ENS__registrationEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__RegistrationEvent
  ENS__registrationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__RegistrationEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__RegistrationEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__RegistrationEvent!]!
  ENS__resolverEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__ResolverEvent
  ENS__resolverEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__ResolverEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__ResolverEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__ResolverEvent!]!
  """Access to subgraph metadata"""
  ENS___meta(block: ENS__Block_height): ENS___Meta_
  ANALYTICS__graphNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphNetwork
  ANALYTICS__graphNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphNetwork_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphNetwork!]!
  ANALYTICS__graphAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphAccount
  ANALYTICS__graphAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphAccount_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphAccount!]!
  ANALYTICS__graphAccountName(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphAccountName
  ANALYTICS__graphAccountNames(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphAccountName_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphAccountName_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphAccountName!]!
  ANALYTICS__subgraph(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Subgraph
  ANALYTICS__subgraphs(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Subgraph_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Subgraph_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Subgraph!]!
  ANALYTICS__subgraphVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphVersion
  ANALYTICS__subgraphVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphVersion_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphVersion!]!
  ANALYTICS__subgraphDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphDeployment
  ANALYTICS__subgraphDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphDeployment_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphDeployment!]!
  ANALYTICS__indexer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Indexer
  ANALYTICS__indexers(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Indexer_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Indexer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Indexer!]!
  ANALYTICS__allocation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Allocation
  ANALYTICS__allocations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Allocation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Allocation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Allocation!]!
  ANALYTICS__pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Pool
  ANALYTICS__pools(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Pool_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Pool!]!
  ANALYTICS__delegator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Delegator
  ANALYTICS__delegators(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Delegator_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Delegator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Delegator!]!
  ANALYTICS__delegatedStake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatedStake
  ANALYTICS__delegatedStakes(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatedStake_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatedStake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatedStake!]!
  ANALYTICS__curator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Curator
  ANALYTICS__curators(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Curator_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Curator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Curator!]!
  ANALYTICS__signal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Signal
  ANALYTICS__signals(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Signal_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Signal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Signal!]!
  ANALYTICS__nameSignal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__NameSignal
  ANALYTICS__nameSignals(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__NameSignal_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__NameSignal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__NameSignal!]!
  ANALYTICS__nameSignalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__NameSignalTransaction
  ANALYTICS__nameSignalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__NameSignalTransaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__NameSignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__NameSignalTransaction!]!
  ANALYTICS__signalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SignalTransaction
  ANALYTICS__signalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SignalTransaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SignalTransaction!]!
  ANALYTICS__indexerDelegatedStakeRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__IndexerDelegatedStakeRelation
  ANALYTICS__indexerDelegatedStakeRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__IndexerDelegatedStakeRelation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__IndexerDelegatedStakeRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__IndexerDelegatedStakeRelation!]!
  ANALYTICS__indexerDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__IndexerDailyData
  ANALYTICS__indexerDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__IndexerDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__IndexerDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__IndexerDailyData!]!
  ANALYTICS__delegatorDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatorDailyData
  ANALYTICS__delegatorDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatorDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatorDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatorDailyData!]!
  ANALYTICS__delegatedStakeDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatedStakeDailyData
  ANALYTICS__delegatedStakeDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatedStakeDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatedStakeDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatedStakeDailyData!]!
  ANALYTICS__delegatorDelegatedStakeDailyRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatorDelegatedStakeDailyRelation
  ANALYTICS__delegatorDelegatedStakeDailyRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatorDelegatedStakeDailyRelation!]!
  ANALYTICS__subgraphDeploymentDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphDeploymentDailyData
  ANALYTICS__subgraphDeploymentDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphDeploymentDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphDeploymentDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphDeploymentDailyData!]!
  ANALYTICS__graphNetworkDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphNetworkDailyData
  ANALYTICS__graphNetworkDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphNetworkDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphNetworkDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphNetworkDailyData!]!
  ANALYTICS__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Transaction
  ANALYTICS__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Transaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Transaction!]!
  ANALYTICS__delegatorSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Delegator!]!
  """Access to subgraph metadata"""
  ANALYTICS___meta(block: ANALYTICS__Block_height): ANALYTICS___Meta_
  NETWORK__graphNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphNetwork
  NETWORK__graphNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphNetwork_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphNetwork!]!
  NETWORK__graphAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphAccount
  NETWORK__graphAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphAccount_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphAccount!]!
  NETWORK__graphAccountName(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphAccountName
  NETWORK__graphAccountNames(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphAccountName_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphAccountName_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphAccountName!]!
  NETWORK__subgraph(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Subgraph
  NETWORK__subgraphs(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Subgraph_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Subgraph_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Subgraph!]!
  NETWORK__currentSubgraphDeploymentRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__CurrentSubgraphDeploymentRelation
  NETWORK__currentSubgraphDeploymentRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__CurrentSubgraphDeploymentRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__CurrentSubgraphDeploymentRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__CurrentSubgraphDeploymentRelation!]!
  NETWORK__network(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Network
  NETWORK__networks(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Network_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Network_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Network!]!
  NETWORK__subgraphCategoryRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphCategoryRelation
  NETWORK__subgraphCategoryRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphCategoryRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphCategoryRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphCategoryRelation!]!
  NETWORK__subgraphCategory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphCategory
  NETWORK__subgraphCategories(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphCategory_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphCategory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphCategory!]!
  NETWORK__subgraphVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphVersion
  NETWORK__subgraphVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphVersion_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphVersion!]!
  NETWORK__subgraphDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphDeployment
  NETWORK__subgraphDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphDeployment_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphDeployment!]!
  NETWORK__indexer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Indexer
  NETWORK__indexers(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Indexer_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Indexer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Indexer!]!
  NETWORK__allocation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Allocation
  NETWORK__allocations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Allocation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Allocation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Allocation!]!
  NETWORK__pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Pool
  NETWORK__pools(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Pool_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Pool!]!
  NETWORK__delegator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Delegator
  NETWORK__delegators(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Delegator_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Delegator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Delegator!]!
  NETWORK__delegatedStake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__DelegatedStake
  NETWORK__delegatedStakes(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__DelegatedStake_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__DelegatedStake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__DelegatedStake!]!
  NETWORK__curator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Curator
  NETWORK__curators(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Curator_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Curator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Curator!]!
  NETWORK__signal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Signal
  NETWORK__signals(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Signal_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Signal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Signal!]!
  NETWORK__nameSignal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignal
  NETWORK__nameSignals(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignal_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignal!]!
  NETWORK__nameSignalSubgraphRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignalSubgraphRelation
  NETWORK__nameSignalSubgraphRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignalSubgraphRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignalSubgraphRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignalSubgraphRelation!]!
  NETWORK__dispute(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Dispute
  NETWORK__disputes(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Dispute_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Dispute_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Dispute!]!
  NETWORK__attestation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Attestation
  NETWORK__attestations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Attestation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Attestation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Attestation!]!
  NETWORK__epoch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Epoch
  NETWORK__epoches(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Epoch_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Epoch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Epoch!]!
  NETWORK__nameSignalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignalTransaction
  NETWORK__nameSignalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignalTransaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignalTransaction!]!
  NETWORK__signalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SignalTransaction
  NETWORK__signalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SignalTransaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SignalTransaction!]!
  NETWORK__tokenManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__TokenManager
  NETWORK__tokenManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__TokenManager_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__TokenManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__TokenManager!]!
  NETWORK__authorizedFunction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__AuthorizedFunction
  NETWORK__authorizedFunctions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__AuthorizedFunction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__AuthorizedFunction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__AuthorizedFunction!]!
  NETWORK__tokenLockWallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__TokenLockWallet
  NETWORK__tokenLockWallets(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__TokenLockWallet_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__TokenLockWallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__TokenLockWallet!]!
  NETWORK__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Transaction
  NETWORK__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Transaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Transaction!]!
  NETWORK__subgraphSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Subgraph!]!
  NETWORK__curatorSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Curator!]!
  NETWORK__delegatorSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Delegator!]!
  """Access to subgraph metadata"""
  NETWORK___meta(block: NETWORK__Block_height): NETWORK___Meta_
}

type Subscription {
  BILLING__billing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__Billing
  BILLING__billings(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__Billing_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__Billing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__Billing!]!
  BILLING__user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__User
  BILLING__users(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__User_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__User!]!
  BILLING__tokensAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensAdded
  BILLING__tokensAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensAdded_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensAdded!]!
  BILLING__tokensRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensRemoved
  BILLING__tokensRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensRemoved_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensRemoved!]!
  BILLING__tokensPulled(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__TokensPulled
  BILLING__tokensPulleds(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__TokensPulled_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__TokensPulled_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__TokensPulled!]!
  BILLING__billingDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__BillingDailyData
  BILLING__billingDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__BillingDailyData_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__BillingDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__BillingDailyData!]!
  BILLING__userDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__UserDailyData
  BILLING__userDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__UserDailyData_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__UserDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__UserDailyData!]!
  BILLING__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): BILLING__Transaction
  BILLING__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BILLING__Transaction_orderBy
    orderDirection: BILLING__OrderDirection
    where: BILLING__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BILLING__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: BILLING___SubgraphErrorPolicy_! = deny
  ): [BILLING__Transaction!]!
  """Access to subgraph metadata"""
  BILLING___meta(block: BILLING__Block_height): BILLING___Meta_
  ENS__domain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Domain
  ENS__domains(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Domain_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Domain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Domain!]!
  ENS__transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Transfer
  ENS__transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Transfer_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Transfer!]!
  ENS__newOwner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewOwner
  ENS__newOwners(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewOwner_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewOwner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewOwner!]!
  ENS__newResolver(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewResolver
  ENS__newResolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewResolver_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewResolver_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewResolver!]!
  ENS__newTTL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NewTTL
  ENS__newTTLs(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NewTTL_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NewTTL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NewTTL!]!
  ENS__account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Account
  ENS__accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Account_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Account!]!
  ENS__registration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Registration
  ENS__registrations(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Registration_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Registration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Registration!]!
  ENS__nameRegistered(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameRegistered
  ENS__nameRegistereds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameRegistered_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameRegistered_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameRegistered!]!
  ENS__nameRenewed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameRenewed
  ENS__nameReneweds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameRenewed_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameRenewed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameRenewed!]!
  ENS__nameTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameTransferred
  ENS__nameTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameTransferred_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameTransferred!]!
  ENS__resolver(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__Resolver
  ENS__resolvers(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__Resolver_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__Resolver_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__Resolver!]!
  ENS__addrChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AddrChanged
  ENS__addrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AddrChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AddrChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AddrChanged!]!
  ENS__multicoinAddrChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__MulticoinAddrChanged
  ENS__multicoinAddrChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__MulticoinAddrChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__MulticoinAddrChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__MulticoinAddrChanged!]!
  ENS__nameChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__NameChanged
  ENS__nameChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__NameChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__NameChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__NameChanged!]!
  ENS__abiChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AbiChanged
  ENS__abiChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AbiChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AbiChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AbiChanged!]!
  ENS__pubkeyChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__PubkeyChanged
  ENS__pubkeyChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__PubkeyChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__PubkeyChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__PubkeyChanged!]!
  ENS__textChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__TextChanged
  ENS__textChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__TextChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__TextChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__TextChanged!]!
  ENS__contenthashChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__ContenthashChanged
  ENS__contenthashChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__ContenthashChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__ContenthashChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__ContenthashChanged!]!
  ENS__interfaceChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__InterfaceChanged
  ENS__interfaceChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__InterfaceChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__InterfaceChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__InterfaceChanged!]!
  ENS__authorisationChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__AuthorisationChanged
  ENS__authorisationChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__AuthorisationChanged_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__AuthorisationChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__AuthorisationChanged!]!
  ENS__domainEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__DomainEvent
  ENS__domainEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__DomainEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__DomainEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__DomainEvent!]!
  ENS__registrationEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__RegistrationEvent
  ENS__registrationEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__RegistrationEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__RegistrationEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__RegistrationEvent!]!
  ENS__resolverEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): ENS__ResolverEvent
  ENS__resolverEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ENS__ResolverEvent_orderBy
    orderDirection: ENS__OrderDirection
    where: ENS__ResolverEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ENS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ENS___SubgraphErrorPolicy_! = deny
  ): [ENS__ResolverEvent!]!
  """Access to subgraph metadata"""
  ENS___meta(block: ENS__Block_height): ENS___Meta_
  ANALYTICS__graphNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphNetwork
  ANALYTICS__graphNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphNetwork_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphNetwork!]!
  ANALYTICS__graphAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphAccount
  ANALYTICS__graphAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphAccount_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphAccount!]!
  ANALYTICS__graphAccountName(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphAccountName
  ANALYTICS__graphAccountNames(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphAccountName_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphAccountName_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphAccountName!]!
  ANALYTICS__subgraph(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Subgraph
  ANALYTICS__subgraphs(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Subgraph_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Subgraph_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Subgraph!]!
  ANALYTICS__subgraphVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphVersion
  ANALYTICS__subgraphVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphVersion_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphVersion!]!
  ANALYTICS__subgraphDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphDeployment
  ANALYTICS__subgraphDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphDeployment_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphDeployment!]!
  ANALYTICS__indexer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Indexer
  ANALYTICS__indexers(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Indexer_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Indexer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Indexer!]!
  ANALYTICS__allocation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Allocation
  ANALYTICS__allocations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Allocation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Allocation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Allocation!]!
  ANALYTICS__pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Pool
  ANALYTICS__pools(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Pool_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Pool!]!
  ANALYTICS__delegator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Delegator
  ANALYTICS__delegators(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Delegator_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Delegator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Delegator!]!
  ANALYTICS__delegatedStake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatedStake
  ANALYTICS__delegatedStakes(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatedStake_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatedStake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatedStake!]!
  ANALYTICS__curator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Curator
  ANALYTICS__curators(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Curator_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Curator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Curator!]!
  ANALYTICS__signal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Signal
  ANALYTICS__signals(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Signal_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Signal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Signal!]!
  ANALYTICS__nameSignal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__NameSignal
  ANALYTICS__nameSignals(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__NameSignal_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__NameSignal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__NameSignal!]!
  ANALYTICS__nameSignalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__NameSignalTransaction
  ANALYTICS__nameSignalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__NameSignalTransaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__NameSignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__NameSignalTransaction!]!
  ANALYTICS__signalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SignalTransaction
  ANALYTICS__signalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SignalTransaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SignalTransaction!]!
  ANALYTICS__indexerDelegatedStakeRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__IndexerDelegatedStakeRelation
  ANALYTICS__indexerDelegatedStakeRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__IndexerDelegatedStakeRelation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__IndexerDelegatedStakeRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__IndexerDelegatedStakeRelation!]!
  ANALYTICS__indexerDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__IndexerDailyData
  ANALYTICS__indexerDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__IndexerDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__IndexerDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__IndexerDailyData!]!
  ANALYTICS__delegatorDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatorDailyData
  ANALYTICS__delegatorDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatorDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatorDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatorDailyData!]!
  ANALYTICS__delegatedStakeDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatedStakeDailyData
  ANALYTICS__delegatedStakeDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatedStakeDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatedStakeDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatedStakeDailyData!]!
  ANALYTICS__delegatorDelegatedStakeDailyRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__DelegatorDelegatedStakeDailyRelation
  ANALYTICS__delegatorDelegatedStakeDailyRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__DelegatorDelegatedStakeDailyRelation!]!
  ANALYTICS__subgraphDeploymentDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__SubgraphDeploymentDailyData
  ANALYTICS__subgraphDeploymentDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__SubgraphDeploymentDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__SubgraphDeploymentDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__SubgraphDeploymentDailyData!]!
  ANALYTICS__graphNetworkDailyData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__GraphNetworkDailyData
  ANALYTICS__graphNetworkDailyDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__GraphNetworkDailyData_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__GraphNetworkDailyData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__GraphNetworkDailyData!]!
  ANALYTICS__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): ANALYTICS__Transaction
  ANALYTICS__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ANALYTICS__Transaction_orderBy
    orderDirection: ANALYTICS__OrderDirection
    where: ANALYTICS__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ANALYTICS__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: ANALYTICS___SubgraphErrorPolicy_! = deny
  ): [ANALYTICS__Transaction!]!
  """Access to subgraph metadata"""
  ANALYTICS___meta(block: ANALYTICS__Block_height): ANALYTICS___Meta_
  NETWORK__graphNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphNetwork
  NETWORK__graphNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphNetwork_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphNetwork!]!
  NETWORK__graphAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphAccount
  NETWORK__graphAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphAccount_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphAccount!]!
  NETWORK__graphAccountName(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__GraphAccountName
  NETWORK__graphAccountNames(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__GraphAccountName_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__GraphAccountName_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__GraphAccountName!]!
  NETWORK__subgraph(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Subgraph
  NETWORK__subgraphs(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Subgraph_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Subgraph_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Subgraph!]!
  NETWORK__currentSubgraphDeploymentRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__CurrentSubgraphDeploymentRelation
  NETWORK__currentSubgraphDeploymentRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__CurrentSubgraphDeploymentRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__CurrentSubgraphDeploymentRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__CurrentSubgraphDeploymentRelation!]!
  NETWORK__network(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Network
  NETWORK__networks(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Network_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Network_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Network!]!
  NETWORK__subgraphCategoryRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphCategoryRelation
  NETWORK__subgraphCategoryRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphCategoryRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphCategoryRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphCategoryRelation!]!
  NETWORK__subgraphCategory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphCategory
  NETWORK__subgraphCategories(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphCategory_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphCategory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphCategory!]!
  NETWORK__subgraphVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphVersion
  NETWORK__subgraphVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphVersion_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphVersion!]!
  NETWORK__subgraphDeployment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SubgraphDeployment
  NETWORK__subgraphDeployments(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SubgraphDeployment_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SubgraphDeployment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SubgraphDeployment!]!
  NETWORK__indexer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Indexer
  NETWORK__indexers(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Indexer_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Indexer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Indexer!]!
  NETWORK__allocation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Allocation
  NETWORK__allocations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Allocation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Allocation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Allocation!]!
  NETWORK__pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Pool
  NETWORK__pools(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Pool_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Pool!]!
  NETWORK__delegator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Delegator
  NETWORK__delegators(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Delegator_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Delegator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Delegator!]!
  NETWORK__delegatedStake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__DelegatedStake
  NETWORK__delegatedStakes(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__DelegatedStake_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__DelegatedStake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__DelegatedStake!]!
  NETWORK__curator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Curator
  NETWORK__curators(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Curator_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Curator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Curator!]!
  NETWORK__signal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Signal
  NETWORK__signals(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Signal_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Signal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Signal!]!
  NETWORK__nameSignal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignal
  NETWORK__nameSignals(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignal_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignal!]!
  NETWORK__nameSignalSubgraphRelation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignalSubgraphRelation
  NETWORK__nameSignalSubgraphRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignalSubgraphRelation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignalSubgraphRelation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignalSubgraphRelation!]!
  NETWORK__dispute(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Dispute
  NETWORK__disputes(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Dispute_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Dispute_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Dispute!]!
  NETWORK__attestation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Attestation
  NETWORK__attestations(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Attestation_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Attestation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Attestation!]!
  NETWORK__epoch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Epoch
  NETWORK__epoches(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Epoch_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Epoch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Epoch!]!
  NETWORK__nameSignalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__NameSignalTransaction
  NETWORK__nameSignalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__NameSignalTransaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__NameSignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__NameSignalTransaction!]!
  NETWORK__signalTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__SignalTransaction
  NETWORK__signalTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__SignalTransaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__SignalTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__SignalTransaction!]!
  NETWORK__tokenManager(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__TokenManager
  NETWORK__tokenManagers(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__TokenManager_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__TokenManager_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__TokenManager!]!
  NETWORK__authorizedFunction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__AuthorizedFunction
  NETWORK__authorizedFunctions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__AuthorizedFunction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__AuthorizedFunction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__AuthorizedFunction!]!
  NETWORK__tokenLockWallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__TokenLockWallet
  NETWORK__tokenLockWallets(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__TokenLockWallet_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__TokenLockWallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__TokenLockWallet!]!
  NETWORK__transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): NETWORK__Transaction
  NETWORK__transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: NETWORK__Transaction_orderBy
    orderDirection: NETWORK__OrderDirection
    where: NETWORK__Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: NETWORK__Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: NETWORK___SubgraphErrorPolicy_! = deny
  ): [NETWORK__Transaction!]!
  """Access to subgraph metadata"""
  NETWORK___meta(block: NETWORK__Block_height): NETWORK___Meta_
}

scalar BILLING__BigDecimal

scalar BigInt

"""
Billing holds global variables

"""
type BILLING__Billing {
  """Set to 1"""
  id: ID!
  """Address of the gateway"""
  gateway: BILLING__Bytes!
  """Address of the governor"""
  governor: BILLING__Bytes!
  """[CUMULATIVE] Total amount of tokens added"""
  totalTokensAdded: BigInt!
  """[CUMULATIVE] Total amount of tokens pulled"""
  totalTokensPulled: BigInt!
  """[CUMULATIVE] Total amount of tokens removed/withdrawn"""
  totalTokensRemoved: BigInt!
  """
  [CURRENT] Total amount of currently available balance (totalTokensAdded - totalTokensPulled - totalTokensRemoved)
  """
  totalCurrentBalance: BigInt!
  """Current BillingDailyData entity created"""
  currentDailyDataEntity: BILLING__BillingDailyData
  """Previous BillingDailyData entity created"""
  previousDailyDataEntity: BILLING__BillingDailyData
}

type BILLING__BillingDailyData {
  """<SUBGRAPH ID>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that the daily data entity tracks"""
  entity: BILLING__Billing!
  """[CUMULATIVE] Total amount of tokens added"""
  totalTokensAdded: BigInt!
  """[CUMULATIVE] Total amount of tokens pulled"""
  totalTokensPulled: BigInt!
  """[CUMULATIVE] Total amount of tokens removed/withdrawn"""
  totalTokensRemoved: BigInt!
  """
  [CURRENT] Total amount of currently available balance (totalTokensAdded - totalTokensPulled - totalTokensRemoved)
  """
  totalCurrentBalance: BigInt!
  """Address of the gateway"""
  gateway: BILLING__Bytes!
  """Address of the governor"""
  governor: BILLING__Bytes!
  """[DELTA] Chage in total tokens added since the last DailyData point"""
  totalTokensAddedDelta: BigInt!
  """[DELTA] Chage in total tokens pulled since the last DailyData point"""
  totalTokensPulledDelta: BigInt!
  """
  [DELTA] Chage in total tokens removed/withdrawn since the last DailyData point
  """
  totalTokensRemovedDelta: BigInt!
  """
  [DELTA] Chage in total currently available balance since the last DailyData point
  """
  totalCurrentBalanceDelta: BigInt!
}

input BILLING__BillingDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  entity: String
  entity_not: String
  entity_gt: String
  entity_lt: String
  entity_gte: String
  entity_lte: String
  entity_in: [String!]
  entity_not_in: [String!]
  entity_contains: String
  entity_contains_nocase: String
  entity_not_contains: String
  entity_not_contains_nocase: String
  entity_starts_with: String
  entity_starts_with_nocase: String
  entity_not_starts_with: String
  entity_not_starts_with_nocase: String
  entity_ends_with: String
  entity_ends_with_nocase: String
  entity_not_ends_with: String
  entity_not_ends_with_nocase: String
  entity_: BILLING__Billing_filter
  totalTokensAdded: BigInt
  totalTokensAdded_not: BigInt
  totalTokensAdded_gt: BigInt
  totalTokensAdded_lt: BigInt
  totalTokensAdded_gte: BigInt
  totalTokensAdded_lte: BigInt
  totalTokensAdded_in: [BigInt!]
  totalTokensAdded_not_in: [BigInt!]
  totalTokensPulled: BigInt
  totalTokensPulled_not: BigInt
  totalTokensPulled_gt: BigInt
  totalTokensPulled_lt: BigInt
  totalTokensPulled_gte: BigInt
  totalTokensPulled_lte: BigInt
  totalTokensPulled_in: [BigInt!]
  totalTokensPulled_not_in: [BigInt!]
  totalTokensRemoved: BigInt
  totalTokensRemoved_not: BigInt
  totalTokensRemoved_gt: BigInt
  totalTokensRemoved_lt: BigInt
  totalTokensRemoved_gte: BigInt
  totalTokensRemoved_lte: BigInt
  totalTokensRemoved_in: [BigInt!]
  totalTokensRemoved_not_in: [BigInt!]
  totalCurrentBalance: BigInt
  totalCurrentBalance_not: BigInt
  totalCurrentBalance_gt: BigInt
  totalCurrentBalance_lt: BigInt
  totalCurrentBalance_gte: BigInt
  totalCurrentBalance_lte: BigInt
  totalCurrentBalance_in: [BigInt!]
  totalCurrentBalance_not_in: [BigInt!]
  gateway: BILLING__Bytes
  gateway_not: BILLING__Bytes
  gateway_gt: BILLING__Bytes
  gateway_lt: BILLING__Bytes
  gateway_gte: BILLING__Bytes
  gateway_lte: BILLING__Bytes
  gateway_in: [BILLING__Bytes!]
  gateway_not_in: [BILLING__Bytes!]
  gateway_contains: BILLING__Bytes
  gateway_not_contains: BILLING__Bytes
  governor: BILLING__Bytes
  governor_not: BILLING__Bytes
  governor_gt: BILLING__Bytes
  governor_lt: BILLING__Bytes
  governor_gte: BILLING__Bytes
  governor_lte: BILLING__Bytes
  governor_in: [BILLING__Bytes!]
  governor_not_in: [BILLING__Bytes!]
  governor_contains: BILLING__Bytes
  governor_not_contains: BILLING__Bytes
  totalTokensAddedDelta: BigInt
  totalTokensAddedDelta_not: BigInt
  totalTokensAddedDelta_gt: BigInt
  totalTokensAddedDelta_lt: BigInt
  totalTokensAddedDelta_gte: BigInt
  totalTokensAddedDelta_lte: BigInt
  totalTokensAddedDelta_in: [BigInt!]
  totalTokensAddedDelta_not_in: [BigInt!]
  totalTokensPulledDelta: BigInt
  totalTokensPulledDelta_not: BigInt
  totalTokensPulledDelta_gt: BigInt
  totalTokensPulledDelta_lt: BigInt
  totalTokensPulledDelta_gte: BigInt
  totalTokensPulledDelta_lte: BigInt
  totalTokensPulledDelta_in: [BigInt!]
  totalTokensPulledDelta_not_in: [BigInt!]
  totalTokensRemovedDelta: BigInt
  totalTokensRemovedDelta_not: BigInt
  totalTokensRemovedDelta_gt: BigInt
  totalTokensRemovedDelta_lt: BigInt
  totalTokensRemovedDelta_gte: BigInt
  totalTokensRemovedDelta_lte: BigInt
  totalTokensRemovedDelta_in: [BigInt!]
  totalTokensRemovedDelta_not_in: [BigInt!]
  totalCurrentBalanceDelta: BigInt
  totalCurrentBalanceDelta_not: BigInt
  totalCurrentBalanceDelta_gt: BigInt
  totalCurrentBalanceDelta_lt: BigInt
  totalCurrentBalanceDelta_gte: BigInt
  totalCurrentBalanceDelta_lte: BigInt
  totalCurrentBalanceDelta_in: [BigInt!]
  totalCurrentBalanceDelta_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__BillingDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  entity
  totalTokensAdded
  totalTokensPulled
  totalTokensRemoved
  totalCurrentBalance
  gateway
  governor
  totalTokensAddedDelta
  totalTokensPulledDelta
  totalTokensRemovedDelta
  totalCurrentBalanceDelta
}

input BILLING__Billing_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  gateway: BILLING__Bytes
  gateway_not: BILLING__Bytes
  gateway_gt: BILLING__Bytes
  gateway_lt: BILLING__Bytes
  gateway_gte: BILLING__Bytes
  gateway_lte: BILLING__Bytes
  gateway_in: [BILLING__Bytes!]
  gateway_not_in: [BILLING__Bytes!]
  gateway_contains: BILLING__Bytes
  gateway_not_contains: BILLING__Bytes
  governor: BILLING__Bytes
  governor_not: BILLING__Bytes
  governor_gt: BILLING__Bytes
  governor_lt: BILLING__Bytes
  governor_gte: BILLING__Bytes
  governor_lte: BILLING__Bytes
  governor_in: [BILLING__Bytes!]
  governor_not_in: [BILLING__Bytes!]
  governor_contains: BILLING__Bytes
  governor_not_contains: BILLING__Bytes
  totalTokensAdded: BigInt
  totalTokensAdded_not: BigInt
  totalTokensAdded_gt: BigInt
  totalTokensAdded_lt: BigInt
  totalTokensAdded_gte: BigInt
  totalTokensAdded_lte: BigInt
  totalTokensAdded_in: [BigInt!]
  totalTokensAdded_not_in: [BigInt!]
  totalTokensPulled: BigInt
  totalTokensPulled_not: BigInt
  totalTokensPulled_gt: BigInt
  totalTokensPulled_lt: BigInt
  totalTokensPulled_gte: BigInt
  totalTokensPulled_lte: BigInt
  totalTokensPulled_in: [BigInt!]
  totalTokensPulled_not_in: [BigInt!]
  totalTokensRemoved: BigInt
  totalTokensRemoved_not: BigInt
  totalTokensRemoved_gt: BigInt
  totalTokensRemoved_lt: BigInt
  totalTokensRemoved_gte: BigInt
  totalTokensRemoved_lte: BigInt
  totalTokensRemoved_in: [BigInt!]
  totalTokensRemoved_not_in: [BigInt!]
  totalCurrentBalance: BigInt
  totalCurrentBalance_not: BigInt
  totalCurrentBalance_gt: BigInt
  totalCurrentBalance_lt: BigInt
  totalCurrentBalance_gte: BigInt
  totalCurrentBalance_lte: BigInt
  totalCurrentBalance_in: [BigInt!]
  totalCurrentBalance_not_in: [BigInt!]
  currentDailyDataEntity: String
  currentDailyDataEntity_not: String
  currentDailyDataEntity_gt: String
  currentDailyDataEntity_lt: String
  currentDailyDataEntity_gte: String
  currentDailyDataEntity_lte: String
  currentDailyDataEntity_in: [String!]
  currentDailyDataEntity_not_in: [String!]
  currentDailyDataEntity_contains: String
  currentDailyDataEntity_contains_nocase: String
  currentDailyDataEntity_not_contains: String
  currentDailyDataEntity_not_contains_nocase: String
  currentDailyDataEntity_starts_with: String
  currentDailyDataEntity_starts_with_nocase: String
  currentDailyDataEntity_not_starts_with: String
  currentDailyDataEntity_not_starts_with_nocase: String
  currentDailyDataEntity_ends_with: String
  currentDailyDataEntity_ends_with_nocase: String
  currentDailyDataEntity_not_ends_with: String
  currentDailyDataEntity_not_ends_with_nocase: String
  currentDailyDataEntity_: BILLING__BillingDailyData_filter
  previousDailyDataEntity: String
  previousDailyDataEntity_not: String
  previousDailyDataEntity_gt: String
  previousDailyDataEntity_lt: String
  previousDailyDataEntity_gte: String
  previousDailyDataEntity_lte: String
  previousDailyDataEntity_in: [String!]
  previousDailyDataEntity_not_in: [String!]
  previousDailyDataEntity_contains: String
  previousDailyDataEntity_contains_nocase: String
  previousDailyDataEntity_not_contains: String
  previousDailyDataEntity_not_contains_nocase: String
  previousDailyDataEntity_starts_with: String
  previousDailyDataEntity_starts_with_nocase: String
  previousDailyDataEntity_not_starts_with: String
  previousDailyDataEntity_not_starts_with_nocase: String
  previousDailyDataEntity_ends_with: String
  previousDailyDataEntity_ends_with_nocase: String
  previousDailyDataEntity_not_ends_with: String
  previousDailyDataEntity_not_ends_with_nocase: String
  previousDailyDataEntity_: BILLING__BillingDailyData_filter
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__Billing_orderBy {
  id
  gateway
  governor
  totalTokensAdded
  totalTokensPulled
  totalTokensRemoved
  totalCurrentBalance
  currentDailyDataEntity
  previousDailyDataEntity
}

input BILLING__BlockChangedFilter {
  number_gte: Int!
}

input BILLING__Block_height {
  hash: BILLING__Bytes
  number: Int
  number_gte: Int
}

scalar BILLING__Bytes

"""Defines the order direction, either ascending or descending"""
enum BILLING__OrderDirection {
  asc
  desc
}

"""
TokensAdded Transaction

"""
type BILLING__TokensAdded implements BILLING__Transaction {
  id: ID!
  hash: BILLING__Bytes!
  blockNumber: Int!
  timestamp: Int!
  user: BILLING__User!
  amount: BigInt!
  type: BILLING__TransactionType!
}

input BILLING__TokensAdded_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: BILLING__Bytes
  hash_not: BILLING__Bytes
  hash_gt: BILLING__Bytes
  hash_lt: BILLING__Bytes
  hash_gte: BILLING__Bytes
  hash_lte: BILLING__Bytes
  hash_in: [BILLING__Bytes!]
  hash_not_in: [BILLING__Bytes!]
  hash_contains: BILLING__Bytes
  hash_not_contains: BILLING__Bytes
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: BILLING__User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: BILLING__TransactionType
  type_not: BILLING__TransactionType
  type_in: [BILLING__TransactionType!]
  type_not_in: [BILLING__TransactionType!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__TokensAdded_orderBy {
  id
  hash
  blockNumber
  timestamp
  user
  amount
  type
}

"""
TokensPulled Transaction. Where the gateway pulls tokens from the user

"""
type BILLING__TokensPulled implements BILLING__Transaction {
  id: ID!
  hash: BILLING__Bytes!
  blockNumber: Int!
  timestamp: Int!
  user: BILLING__User!
  amount: BigInt!
  type: BILLING__TransactionType!
}

input BILLING__TokensPulled_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: BILLING__Bytes
  hash_not: BILLING__Bytes
  hash_gt: BILLING__Bytes
  hash_lt: BILLING__Bytes
  hash_gte: BILLING__Bytes
  hash_lte: BILLING__Bytes
  hash_in: [BILLING__Bytes!]
  hash_not_in: [BILLING__Bytes!]
  hash_contains: BILLING__Bytes
  hash_not_contains: BILLING__Bytes
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: BILLING__User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: BILLING__TransactionType
  type_not: BILLING__TransactionType
  type_in: [BILLING__TransactionType!]
  type_not_in: [BILLING__TransactionType!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__TokensPulled_orderBy {
  id
  hash
  blockNumber
  timestamp
  user
  amount
  type
}

"""
TokensRemoved Transaction

"""
type BILLING__TokensRemoved implements BILLING__Transaction {
  id: ID!
  hash: BILLING__Bytes!
  blockNumber: Int!
  timestamp: Int!
  user: BILLING__User!
  amount: BigInt!
  type: BILLING__TransactionType!
  """User that the tokens are withdrawn to"""
  to: BILLING__Bytes!
}

input BILLING__TokensRemoved_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: BILLING__Bytes
  hash_not: BILLING__Bytes
  hash_gt: BILLING__Bytes
  hash_lt: BILLING__Bytes
  hash_gte: BILLING__Bytes
  hash_lte: BILLING__Bytes
  hash_in: [BILLING__Bytes!]
  hash_not_in: [BILLING__Bytes!]
  hash_contains: BILLING__Bytes
  hash_not_contains: BILLING__Bytes
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: BILLING__User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: BILLING__TransactionType
  type_not: BILLING__TransactionType
  type_in: [BILLING__TransactionType!]
  type_not_in: [BILLING__TransactionType!]
  to: BILLING__Bytes
  to_not: BILLING__Bytes
  to_gt: BILLING__Bytes
  to_lt: BILLING__Bytes
  to_gte: BILLING__Bytes
  to_lte: BILLING__Bytes
  to_in: [BILLING__Bytes!]
  to_not_in: [BILLING__Bytes!]
  to_contains: BILLING__Bytes
  to_not_contains: BILLING__Bytes
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__TokensRemoved_orderBy {
  id
  hash
  blockNumber
  timestamp
  user
  amount
  type
  to
}

"""
A generic transaction

"""
interface BILLING__Transaction {
  """Transaction hash concatenated with event log index"""
  id: ID!
  """Transaction hash"""
  hash: BILLING__Bytes!
  """Block number for the transaction"""
  blockNumber: Int!
  """Timestamp for the transaction"""
  timestamp: Int!
  """User of the transaction"""
  user: BILLING__User!
  """Amount of tokens used in the transaction"""
  amount: BigInt!
  """Type of Graph Network transaction"""
  type: BILLING__TransactionType!
}

enum BILLING__TransactionType {
  TokensAdded
  TokensRemoved
  TokensPulled
}

input BILLING__Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: BILLING__Bytes
  hash_not: BILLING__Bytes
  hash_gt: BILLING__Bytes
  hash_lt: BILLING__Bytes
  hash_gte: BILLING__Bytes
  hash_lte: BILLING__Bytes
  hash_in: [BILLING__Bytes!]
  hash_not_in: [BILLING__Bytes!]
  hash_contains: BILLING__Bytes
  hash_not_contains: BILLING__Bytes
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: BILLING__User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  type: BILLING__TransactionType
  type_not: BILLING__TransactionType
  type_in: [BILLING__TransactionType!]
  type_not_in: [BILLING__TransactionType!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__Transaction_orderBy {
  id
  hash
  blockNumber
  timestamp
  user
  amount
  type
}

"""
Curator Name Signal for a single Subgraph

"""
type BILLING__User {
  """Polygon address"""
  id: ID!
  """Balance of the user in the Billing contract"""
  billingBalance: BigInt!
  """[CUMULATIVE] Total amount of tokens added"""
  totalTokensAdded: BigInt!
  """[CUMULATIVE] Total amount of tokens pulled"""
  totalTokensPulled: BigInt!
  """[CUMULATIVE] Total amount of tokens removed/withdrawn"""
  totalTokensRemoved: BigInt!
  """All transactions of this user"""
  transactions(skip: Int = 0, first: Int = 100, orderBy: BILLING__Transaction_orderBy, orderDirection: BILLING__OrderDirection, where: BILLING__Transaction_filter): [BILLING__Transaction!]!
  """Current UserDailyData entity created"""
  currentDailyDataEntity: BILLING__UserDailyData
  """Previous UserDailyData entity created"""
  previousDailyDataEntity: BILLING__UserDailyData
  """[DEPRECATED] Total polygonGRT balance"""
  polygonGRTBalance: BigInt!
}

type BILLING__UserDailyData {
  """<SUBGRAPH ID>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that the daily data entity tracks"""
  entity: BILLING__User!
  """[CUMULATIVE] Total amount of tokens added"""
  totalTokensAdded: BigInt!
  """[CUMULATIVE] Total amount of tokens pulled"""
  totalTokensPulled: BigInt!
  """[CUMULATIVE] Total amount of tokens removed/withdrawn"""
  totalTokensRemoved: BigInt!
  """[CURRENT] Amount of currently available balance"""
  billingBalance: BigInt!
  """[DELTA] Chage in total tokens added since the last DailyData point"""
  totalTokensAddedDelta: BigInt!
  """[DELTA] Chage in total tokens pulled since the last DailyData point"""
  totalTokensPulledDelta: BigInt!
  """
  [DELTA] Chage in total tokens removed/withdrawn since the last DailyData point
  """
  totalTokensRemovedDelta: BigInt!
  """
  [DELTA] Chage in total currently available balance since the last DailyData point
  """
  billingBalanceDelta: BigInt!
}

input BILLING__UserDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  entity: String
  entity_not: String
  entity_gt: String
  entity_lt: String
  entity_gte: String
  entity_lte: String
  entity_in: [String!]
  entity_not_in: [String!]
  entity_contains: String
  entity_contains_nocase: String
  entity_not_contains: String
  entity_not_contains_nocase: String
  entity_starts_with: String
  entity_starts_with_nocase: String
  entity_not_starts_with: String
  entity_not_starts_with_nocase: String
  entity_ends_with: String
  entity_ends_with_nocase: String
  entity_not_ends_with: String
  entity_not_ends_with_nocase: String
  entity_: BILLING__User_filter
  totalTokensAdded: BigInt
  totalTokensAdded_not: BigInt
  totalTokensAdded_gt: BigInt
  totalTokensAdded_lt: BigInt
  totalTokensAdded_gte: BigInt
  totalTokensAdded_lte: BigInt
  totalTokensAdded_in: [BigInt!]
  totalTokensAdded_not_in: [BigInt!]
  totalTokensPulled: BigInt
  totalTokensPulled_not: BigInt
  totalTokensPulled_gt: BigInt
  totalTokensPulled_lt: BigInt
  totalTokensPulled_gte: BigInt
  totalTokensPulled_lte: BigInt
  totalTokensPulled_in: [BigInt!]
  totalTokensPulled_not_in: [BigInt!]
  totalTokensRemoved: BigInt
  totalTokensRemoved_not: BigInt
  totalTokensRemoved_gt: BigInt
  totalTokensRemoved_lt: BigInt
  totalTokensRemoved_gte: BigInt
  totalTokensRemoved_lte: BigInt
  totalTokensRemoved_in: [BigInt!]
  totalTokensRemoved_not_in: [BigInt!]
  billingBalance: BigInt
  billingBalance_not: BigInt
  billingBalance_gt: BigInt
  billingBalance_lt: BigInt
  billingBalance_gte: BigInt
  billingBalance_lte: BigInt
  billingBalance_in: [BigInt!]
  billingBalance_not_in: [BigInt!]
  totalTokensAddedDelta: BigInt
  totalTokensAddedDelta_not: BigInt
  totalTokensAddedDelta_gt: BigInt
  totalTokensAddedDelta_lt: BigInt
  totalTokensAddedDelta_gte: BigInt
  totalTokensAddedDelta_lte: BigInt
  totalTokensAddedDelta_in: [BigInt!]
  totalTokensAddedDelta_not_in: [BigInt!]
  totalTokensPulledDelta: BigInt
  totalTokensPulledDelta_not: BigInt
  totalTokensPulledDelta_gt: BigInt
  totalTokensPulledDelta_lt: BigInt
  totalTokensPulledDelta_gte: BigInt
  totalTokensPulledDelta_lte: BigInt
  totalTokensPulledDelta_in: [BigInt!]
  totalTokensPulledDelta_not_in: [BigInt!]
  totalTokensRemovedDelta: BigInt
  totalTokensRemovedDelta_not: BigInt
  totalTokensRemovedDelta_gt: BigInt
  totalTokensRemovedDelta_lt: BigInt
  totalTokensRemovedDelta_gte: BigInt
  totalTokensRemovedDelta_lte: BigInt
  totalTokensRemovedDelta_in: [BigInt!]
  totalTokensRemovedDelta_not_in: [BigInt!]
  billingBalanceDelta: BigInt
  billingBalanceDelta_not: BigInt
  billingBalanceDelta_gt: BigInt
  billingBalanceDelta_lt: BigInt
  billingBalanceDelta_gte: BigInt
  billingBalanceDelta_lte: BigInt
  billingBalanceDelta_in: [BigInt!]
  billingBalanceDelta_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__UserDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  entity
  totalTokensAdded
  totalTokensPulled
  totalTokensRemoved
  billingBalance
  totalTokensAddedDelta
  totalTokensPulledDelta
  totalTokensRemovedDelta
  billingBalanceDelta
}

input BILLING__User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  billingBalance: BigInt
  billingBalance_not: BigInt
  billingBalance_gt: BigInt
  billingBalance_lt: BigInt
  billingBalance_gte: BigInt
  billingBalance_lte: BigInt
  billingBalance_in: [BigInt!]
  billingBalance_not_in: [BigInt!]
  totalTokensAdded: BigInt
  totalTokensAdded_not: BigInt
  totalTokensAdded_gt: BigInt
  totalTokensAdded_lt: BigInt
  totalTokensAdded_gte: BigInt
  totalTokensAdded_lte: BigInt
  totalTokensAdded_in: [BigInt!]
  totalTokensAdded_not_in: [BigInt!]
  totalTokensPulled: BigInt
  totalTokensPulled_not: BigInt
  totalTokensPulled_gt: BigInt
  totalTokensPulled_lt: BigInt
  totalTokensPulled_gte: BigInt
  totalTokensPulled_lte: BigInt
  totalTokensPulled_in: [BigInt!]
  totalTokensPulled_not_in: [BigInt!]
  totalTokensRemoved: BigInt
  totalTokensRemoved_not: BigInt
  totalTokensRemoved_gt: BigInt
  totalTokensRemoved_lt: BigInt
  totalTokensRemoved_gte: BigInt
  totalTokensRemoved_lte: BigInt
  totalTokensRemoved_in: [BigInt!]
  totalTokensRemoved_not_in: [BigInt!]
  transactions_: BILLING__Transaction_filter
  currentDailyDataEntity: String
  currentDailyDataEntity_not: String
  currentDailyDataEntity_gt: String
  currentDailyDataEntity_lt: String
  currentDailyDataEntity_gte: String
  currentDailyDataEntity_lte: String
  currentDailyDataEntity_in: [String!]
  currentDailyDataEntity_not_in: [String!]
  currentDailyDataEntity_contains: String
  currentDailyDataEntity_contains_nocase: String
  currentDailyDataEntity_not_contains: String
  currentDailyDataEntity_not_contains_nocase: String
  currentDailyDataEntity_starts_with: String
  currentDailyDataEntity_starts_with_nocase: String
  currentDailyDataEntity_not_starts_with: String
  currentDailyDataEntity_not_starts_with_nocase: String
  currentDailyDataEntity_ends_with: String
  currentDailyDataEntity_ends_with_nocase: String
  currentDailyDataEntity_not_ends_with: String
  currentDailyDataEntity_not_ends_with_nocase: String
  currentDailyDataEntity_: BILLING__UserDailyData_filter
  previousDailyDataEntity: String
  previousDailyDataEntity_not: String
  previousDailyDataEntity_gt: String
  previousDailyDataEntity_lt: String
  previousDailyDataEntity_gte: String
  previousDailyDataEntity_lte: String
  previousDailyDataEntity_in: [String!]
  previousDailyDataEntity_not_in: [String!]
  previousDailyDataEntity_contains: String
  previousDailyDataEntity_contains_nocase: String
  previousDailyDataEntity_not_contains: String
  previousDailyDataEntity_not_contains_nocase: String
  previousDailyDataEntity_starts_with: String
  previousDailyDataEntity_starts_with_nocase: String
  previousDailyDataEntity_not_starts_with: String
  previousDailyDataEntity_not_starts_with_nocase: String
  previousDailyDataEntity_ends_with: String
  previousDailyDataEntity_ends_with_nocase: String
  previousDailyDataEntity_not_ends_with: String
  previousDailyDataEntity_not_ends_with_nocase: String
  previousDailyDataEntity_: BILLING__UserDailyData_filter
  polygonGRTBalance: BigInt
  polygonGRTBalance_not: BigInt
  polygonGRTBalance_gt: BigInt
  polygonGRTBalance_lt: BigInt
  polygonGRTBalance_gte: BigInt
  polygonGRTBalance_lte: BigInt
  polygonGRTBalance_in: [BigInt!]
  polygonGRTBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BILLING__BlockChangedFilter
}

enum BILLING__User_orderBy {
  id
  billingBalance
  totalTokensAdded
  totalTokensPulled
  totalTokensRemoved
  transactions
  currentDailyDataEntity
  previousDailyDataEntity
  polygonGRTBalance
}

type BILLING___Block_ {
  """The hash of the block"""
  hash: BILLING__Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type BILLING___Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: BILLING___Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum BILLING___SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type ENS__AbiChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  contentType: BigInt!
}

input ENS__AbiChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  contentType: BigInt
  contentType_not: BigInt
  contentType_gt: BigInt
  contentType_lt: BigInt
  contentType_gte: BigInt
  contentType_lte: BigInt
  contentType_in: [BigInt!]
  contentType_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__AbiChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  contentType
}

type ENS__Account {
  id: ID!
  domains(skip: Int = 0, first: Int = 100, orderBy: ENS__Domain_orderBy, orderDirection: ENS__OrderDirection, where: ENS__Domain_filter): [ENS__Domain!]!
  registrations(skip: Int = 0, first: Int = 100, orderBy: ENS__Registration_orderBy, orderDirection: ENS__OrderDirection, where: ENS__Registration_filter): [ENS__Registration!]
}

input ENS__Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains_: ENS__Domain_filter
  registrations_: ENS__Registration_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__Account_orderBy {
  id
  domains
  registrations
}

type ENS__AddrChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  addr: ENS__Account!
}

input ENS__AddrChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  addr: String
  addr_not: String
  addr_gt: String
  addr_lt: String
  addr_gte: String
  addr_lte: String
  addr_in: [String!]
  addr_not_in: [String!]
  addr_contains: String
  addr_contains_nocase: String
  addr_not_contains: String
  addr_not_contains_nocase: String
  addr_starts_with: String
  addr_starts_with_nocase: String
  addr_not_starts_with: String
  addr_not_starts_with_nocase: String
  addr_ends_with: String
  addr_ends_with_nocase: String
  addr_not_ends_with: String
  addr_not_ends_with_nocase: String
  addr_: ENS__Account_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__AddrChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  addr
}

type ENS__AuthorisationChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  owner: ENS__Bytes!
  target: ENS__Bytes!
  isAuthorized: Boolean!
}

input ENS__AuthorisationChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  owner: ENS__Bytes
  owner_not: ENS__Bytes
  owner_gt: ENS__Bytes
  owner_lt: ENS__Bytes
  owner_gte: ENS__Bytes
  owner_lte: ENS__Bytes
  owner_in: [ENS__Bytes!]
  owner_not_in: [ENS__Bytes!]
  owner_contains: ENS__Bytes
  owner_not_contains: ENS__Bytes
  target: ENS__Bytes
  target_not: ENS__Bytes
  target_gt: ENS__Bytes
  target_lt: ENS__Bytes
  target_gte: ENS__Bytes
  target_lte: ENS__Bytes
  target_in: [ENS__Bytes!]
  target_not_in: [ENS__Bytes!]
  target_contains: ENS__Bytes
  target_not_contains: ENS__Bytes
  isAuthorized: Boolean
  isAuthorized_not: Boolean
  isAuthorized_in: [Boolean!]
  isAuthorized_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__AuthorisationChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  owner
  target
  isAuthorized
}

scalar ENS__BigDecimal

input ENS__BlockChangedFilter {
  number_gte: Int!
}

input ENS__Block_height {
  hash: ENS__Bytes
  number: Int
  number_gte: Int
}

scalar ENS__Bytes

type ENS__ContenthashChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  hash: ENS__Bytes!
}

input ENS__ContenthashChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  hash: ENS__Bytes
  hash_not: ENS__Bytes
  hash_gt: ENS__Bytes
  hash_lt: ENS__Bytes
  hash_gte: ENS__Bytes
  hash_lte: ENS__Bytes
  hash_in: [ENS__Bytes!]
  hash_not_in: [ENS__Bytes!]
  hash_contains: ENS__Bytes
  hash_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__ContenthashChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  hash
}

type ENS__Domain {
  id: ID!
  name: String
  labelName: String
  labelhash: ENS__Bytes
  parent: ENS__Domain
  subdomains(skip: Int = 0, first: Int = 100, orderBy: ENS__Domain_orderBy, orderDirection: ENS__OrderDirection, where: ENS__Domain_filter): [ENS__Domain!]!
  subdomainCount: Int!
  resolvedAddress: ENS__Account
  owner: ENS__Account!
  resolver: ENS__Resolver
  ttl: BigInt
  isMigrated: Boolean!
  createdAt: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: ENS__DomainEvent_orderBy, orderDirection: ENS__OrderDirection, where: ENS__DomainEvent_filter): [ENS__DomainEvent!]!
}

interface ENS__DomainEvent {
  id: ID!
  domain: ENS__Domain!
  blockNumber: Int!
  transactionID: ENS__Bytes!
}

input ENS__DomainEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__DomainEvent_orderBy {
  id
  domain
  blockNumber
  transactionID
}

input ENS__Domain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  labelName: String
  labelName_not: String
  labelName_gt: String
  labelName_lt: String
  labelName_gte: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_contains_nocase: String
  labelName_not_contains: String
  labelName_not_contains_nocase: String
  labelName_starts_with: String
  labelName_starts_with_nocase: String
  labelName_not_starts_with: String
  labelName_not_starts_with_nocase: String
  labelName_ends_with: String
  labelName_ends_with_nocase: String
  labelName_not_ends_with: String
  labelName_not_ends_with_nocase: String
  labelhash: ENS__Bytes
  labelhash_not: ENS__Bytes
  labelhash_gt: ENS__Bytes
  labelhash_lt: ENS__Bytes
  labelhash_gte: ENS__Bytes
  labelhash_lte: ENS__Bytes
  labelhash_in: [ENS__Bytes!]
  labelhash_not_in: [ENS__Bytes!]
  labelhash_contains: ENS__Bytes
  labelhash_not_contains: ENS__Bytes
  parent: String
  parent_not: String
  parent_gt: String
  parent_lt: String
  parent_gte: String
  parent_lte: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_contains: String
  parent_contains_nocase: String
  parent_not_contains: String
  parent_not_contains_nocase: String
  parent_starts_with: String
  parent_starts_with_nocase: String
  parent_not_starts_with: String
  parent_not_starts_with_nocase: String
  parent_ends_with: String
  parent_ends_with_nocase: String
  parent_not_ends_with: String
  parent_not_ends_with_nocase: String
  parent_: ENS__Domain_filter
  subdomains_: ENS__Domain_filter
  subdomainCount: Int
  subdomainCount_not: Int
  subdomainCount_gt: Int
  subdomainCount_lt: Int
  subdomainCount_gte: Int
  subdomainCount_lte: Int
  subdomainCount_in: [Int!]
  subdomainCount_not_in: [Int!]
  resolvedAddress: String
  resolvedAddress_not: String
  resolvedAddress_gt: String
  resolvedAddress_lt: String
  resolvedAddress_gte: String
  resolvedAddress_lte: String
  resolvedAddress_in: [String!]
  resolvedAddress_not_in: [String!]
  resolvedAddress_contains: String
  resolvedAddress_contains_nocase: String
  resolvedAddress_not_contains: String
  resolvedAddress_not_contains_nocase: String
  resolvedAddress_starts_with: String
  resolvedAddress_starts_with_nocase: String
  resolvedAddress_not_starts_with: String
  resolvedAddress_not_starts_with_nocase: String
  resolvedAddress_ends_with: String
  resolvedAddress_ends_with_nocase: String
  resolvedAddress_not_ends_with: String
  resolvedAddress_not_ends_with_nocase: String
  resolvedAddress_: ENS__Account_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: ENS__Account_filter
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  ttl: BigInt
  ttl_not: BigInt
  ttl_gt: BigInt
  ttl_lt: BigInt
  ttl_gte: BigInt
  ttl_lte: BigInt
  ttl_in: [BigInt!]
  ttl_not_in: [BigInt!]
  isMigrated: Boolean
  isMigrated_not: Boolean
  isMigrated_in: [Boolean!]
  isMigrated_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  events_: ENS__DomainEvent_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__Domain_orderBy {
  id
  name
  labelName
  labelhash
  parent
  subdomains
  subdomainCount
  resolvedAddress
  owner
  resolver
  ttl
  isMigrated
  createdAt
  events
}

type ENS__InterfaceChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  interfaceID: ENS__Bytes!
  implementer: ENS__Bytes!
}

input ENS__InterfaceChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  interfaceID: ENS__Bytes
  interfaceID_not: ENS__Bytes
  interfaceID_gt: ENS__Bytes
  interfaceID_lt: ENS__Bytes
  interfaceID_gte: ENS__Bytes
  interfaceID_lte: ENS__Bytes
  interfaceID_in: [ENS__Bytes!]
  interfaceID_not_in: [ENS__Bytes!]
  interfaceID_contains: ENS__Bytes
  interfaceID_not_contains: ENS__Bytes
  implementer: ENS__Bytes
  implementer_not: ENS__Bytes
  implementer_gt: ENS__Bytes
  implementer_lt: ENS__Bytes
  implementer_gte: ENS__Bytes
  implementer_lte: ENS__Bytes
  implementer_in: [ENS__Bytes!]
  implementer_not_in: [ENS__Bytes!]
  implementer_contains: ENS__Bytes
  implementer_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__InterfaceChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  interfaceID
  implementer
}

type ENS__MulticoinAddrChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  coinType: BigInt!
  addr: ENS__Bytes!
}

input ENS__MulticoinAddrChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  coinType: BigInt
  coinType_not: BigInt
  coinType_gt: BigInt
  coinType_lt: BigInt
  coinType_gte: BigInt
  coinType_lte: BigInt
  coinType_in: [BigInt!]
  coinType_not_in: [BigInt!]
  addr: ENS__Bytes
  addr_not: ENS__Bytes
  addr_gt: ENS__Bytes
  addr_lt: ENS__Bytes
  addr_gte: ENS__Bytes
  addr_lte: ENS__Bytes
  addr_in: [ENS__Bytes!]
  addr_not_in: [ENS__Bytes!]
  addr_contains: ENS__Bytes
  addr_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__MulticoinAddrChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  coinType
  addr
}

type ENS__NameChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  name: String!
}

input ENS__NameChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NameChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  name
}

type ENS__NameRegistered implements ENS__RegistrationEvent {
  id: ID!
  registration: ENS__Registration!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  registrant: ENS__Account!
  expiryDate: BigInt!
}

input ENS__NameRegistered_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: ENS__Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  registrant: String
  registrant_not: String
  registrant_gt: String
  registrant_lt: String
  registrant_gte: String
  registrant_lte: String
  registrant_in: [String!]
  registrant_not_in: [String!]
  registrant_contains: String
  registrant_contains_nocase: String
  registrant_not_contains: String
  registrant_not_contains_nocase: String
  registrant_starts_with: String
  registrant_starts_with_nocase: String
  registrant_not_starts_with: String
  registrant_not_starts_with_nocase: String
  registrant_ends_with: String
  registrant_ends_with_nocase: String
  registrant_not_ends_with: String
  registrant_not_ends_with_nocase: String
  registrant_: ENS__Account_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NameRegistered_orderBy {
  id
  registration
  blockNumber
  transactionID
  registrant
  expiryDate
}

type ENS__NameRenewed implements ENS__RegistrationEvent {
  id: ID!
  registration: ENS__Registration!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  expiryDate: BigInt!
}

input ENS__NameRenewed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: ENS__Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NameRenewed_orderBy {
  id
  registration
  blockNumber
  transactionID
  expiryDate
}

type ENS__NameTransferred implements ENS__RegistrationEvent {
  id: ID!
  registration: ENS__Registration!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  newOwner: ENS__Account!
}

input ENS__NameTransferred_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: ENS__Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  newOwner: String
  newOwner_not: String
  newOwner_gt: String
  newOwner_lt: String
  newOwner_gte: String
  newOwner_lte: String
  newOwner_in: [String!]
  newOwner_not_in: [String!]
  newOwner_contains: String
  newOwner_contains_nocase: String
  newOwner_not_contains: String
  newOwner_not_contains_nocase: String
  newOwner_starts_with: String
  newOwner_starts_with_nocase: String
  newOwner_not_starts_with: String
  newOwner_not_starts_with_nocase: String
  newOwner_ends_with: String
  newOwner_ends_with_nocase: String
  newOwner_not_ends_with: String
  newOwner_not_ends_with_nocase: String
  newOwner_: ENS__Account_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NameTransferred_orderBy {
  id
  registration
  blockNumber
  transactionID
  newOwner
}

type ENS__NewOwner implements ENS__DomainEvent {
  id: ID!
  parentDomain: ENS__Domain!
  domain: ENS__Domain!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  owner: ENS__Account!
}

input ENS__NewOwner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  parentDomain: String
  parentDomain_not: String
  parentDomain_gt: String
  parentDomain_lt: String
  parentDomain_gte: String
  parentDomain_lte: String
  parentDomain_in: [String!]
  parentDomain_not_in: [String!]
  parentDomain_contains: String
  parentDomain_contains_nocase: String
  parentDomain_not_contains: String
  parentDomain_not_contains_nocase: String
  parentDomain_starts_with: String
  parentDomain_starts_with_nocase: String
  parentDomain_not_starts_with: String
  parentDomain_not_starts_with_nocase: String
  parentDomain_ends_with: String
  parentDomain_ends_with_nocase: String
  parentDomain_not_ends_with: String
  parentDomain_not_ends_with_nocase: String
  parentDomain_: ENS__Domain_filter
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: ENS__Account_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NewOwner_orderBy {
  id
  parentDomain
  domain
  blockNumber
  transactionID
  owner
}

type ENS__NewResolver implements ENS__DomainEvent {
  id: ID!
  domain: ENS__Domain!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  resolver: ENS__Resolver!
}

input ENS__NewResolver_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NewResolver_orderBy {
  id
  domain
  blockNumber
  transactionID
  resolver
}

type ENS__NewTTL implements ENS__DomainEvent {
  id: ID!
  domain: ENS__Domain!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  ttl: BigInt!
}

input ENS__NewTTL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  ttl: BigInt
  ttl_not: BigInt
  ttl_gt: BigInt
  ttl_lt: BigInt
  ttl_gte: BigInt
  ttl_lte: BigInt
  ttl_in: [BigInt!]
  ttl_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__NewTTL_orderBy {
  id
  domain
  blockNumber
  transactionID
  ttl
}

"""Defines the order direction, either ascending or descending"""
enum ENS__OrderDirection {
  asc
  desc
}

type ENS__PubkeyChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  x: ENS__Bytes!
  y: ENS__Bytes!
}

input ENS__PubkeyChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  x: ENS__Bytes
  x_not: ENS__Bytes
  x_gt: ENS__Bytes
  x_lt: ENS__Bytes
  x_gte: ENS__Bytes
  x_lte: ENS__Bytes
  x_in: [ENS__Bytes!]
  x_not_in: [ENS__Bytes!]
  x_contains: ENS__Bytes
  x_not_contains: ENS__Bytes
  y: ENS__Bytes
  y_not: ENS__Bytes
  y_gt: ENS__Bytes
  y_lt: ENS__Bytes
  y_gte: ENS__Bytes
  y_lte: ENS__Bytes
  y_in: [ENS__Bytes!]
  y_not_in: [ENS__Bytes!]
  y_contains: ENS__Bytes
  y_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__PubkeyChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  x
  y
}

type ENS__Registration {
  id: ID!
  domain: ENS__Domain
  registrationDate: BigInt!
  expiryDate: BigInt!
  cost: BigInt
  registrant: ENS__Account!
  labelName: String
  events(skip: Int = 0, first: Int = 100, orderBy: ENS__RegistrationEvent_orderBy, orderDirection: ENS__OrderDirection, where: ENS__RegistrationEvent_filter): [ENS__RegistrationEvent!]!
}

interface ENS__RegistrationEvent {
  id: ID!
  registration: ENS__Registration!
  blockNumber: Int!
  transactionID: ENS__Bytes!
}

input ENS__RegistrationEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  registration: String
  registration_not: String
  registration_gt: String
  registration_lt: String
  registration_gte: String
  registration_lte: String
  registration_in: [String!]
  registration_not_in: [String!]
  registration_contains: String
  registration_contains_nocase: String
  registration_not_contains: String
  registration_not_contains_nocase: String
  registration_starts_with: String
  registration_starts_with_nocase: String
  registration_not_starts_with: String
  registration_not_starts_with_nocase: String
  registration_ends_with: String
  registration_ends_with_nocase: String
  registration_not_ends_with: String
  registration_not_ends_with_nocase: String
  registration_: ENS__Registration_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__RegistrationEvent_orderBy {
  id
  registration
  blockNumber
  transactionID
}

input ENS__Registration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  registrationDate: BigInt
  registrationDate_not: BigInt
  registrationDate_gt: BigInt
  registrationDate_lt: BigInt
  registrationDate_gte: BigInt
  registrationDate_lte: BigInt
  registrationDate_in: [BigInt!]
  registrationDate_not_in: [BigInt!]
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  cost: BigInt
  cost_not: BigInt
  cost_gt: BigInt
  cost_lt: BigInt
  cost_gte: BigInt
  cost_lte: BigInt
  cost_in: [BigInt!]
  cost_not_in: [BigInt!]
  registrant: String
  registrant_not: String
  registrant_gt: String
  registrant_lt: String
  registrant_gte: String
  registrant_lte: String
  registrant_in: [String!]
  registrant_not_in: [String!]
  registrant_contains: String
  registrant_contains_nocase: String
  registrant_not_contains: String
  registrant_not_contains_nocase: String
  registrant_starts_with: String
  registrant_starts_with_nocase: String
  registrant_not_starts_with: String
  registrant_not_starts_with_nocase: String
  registrant_ends_with: String
  registrant_ends_with_nocase: String
  registrant_not_ends_with: String
  registrant_not_ends_with_nocase: String
  registrant_: ENS__Account_filter
  labelName: String
  labelName_not: String
  labelName_gt: String
  labelName_lt: String
  labelName_gte: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_contains_nocase: String
  labelName_not_contains: String
  labelName_not_contains_nocase: String
  labelName_starts_with: String
  labelName_starts_with_nocase: String
  labelName_not_starts_with: String
  labelName_not_starts_with_nocase: String
  labelName_ends_with: String
  labelName_ends_with_nocase: String
  labelName_not_ends_with: String
  labelName_not_ends_with_nocase: String
  events_: ENS__RegistrationEvent_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__Registration_orderBy {
  id
  domain
  registrationDate
  expiryDate
  cost
  registrant
  labelName
  events
}

type ENS__Resolver {
  id: ID!
  domain: ENS__Domain
  address: ENS__Bytes!
  addr: ENS__Account
  contentHash: ENS__Bytes
  texts: [String!]
  coinTypes: [BigInt!]
  events(skip: Int = 0, first: Int = 100, orderBy: ENS__ResolverEvent_orderBy, orderDirection: ENS__OrderDirection, where: ENS__ResolverEvent_filter): [ENS__ResolverEvent!]!
}

interface ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
}

input ENS__ResolverEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__ResolverEvent_orderBy {
  id
  resolver
  blockNumber
  transactionID
}

input ENS__Resolver_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  address: ENS__Bytes
  address_not: ENS__Bytes
  address_gt: ENS__Bytes
  address_lt: ENS__Bytes
  address_gte: ENS__Bytes
  address_lte: ENS__Bytes
  address_in: [ENS__Bytes!]
  address_not_in: [ENS__Bytes!]
  address_contains: ENS__Bytes
  address_not_contains: ENS__Bytes
  addr: String
  addr_not: String
  addr_gt: String
  addr_lt: String
  addr_gte: String
  addr_lte: String
  addr_in: [String!]
  addr_not_in: [String!]
  addr_contains: String
  addr_contains_nocase: String
  addr_not_contains: String
  addr_not_contains_nocase: String
  addr_starts_with: String
  addr_starts_with_nocase: String
  addr_not_starts_with: String
  addr_not_starts_with_nocase: String
  addr_ends_with: String
  addr_ends_with_nocase: String
  addr_not_ends_with: String
  addr_not_ends_with_nocase: String
  addr_: ENS__Account_filter
  contentHash: ENS__Bytes
  contentHash_not: ENS__Bytes
  contentHash_gt: ENS__Bytes
  contentHash_lt: ENS__Bytes
  contentHash_gte: ENS__Bytes
  contentHash_lte: ENS__Bytes
  contentHash_in: [ENS__Bytes!]
  contentHash_not_in: [ENS__Bytes!]
  contentHash_contains: ENS__Bytes
  contentHash_not_contains: ENS__Bytes
  texts: [String!]
  texts_not: [String!]
  texts_contains: [String!]
  texts_contains_nocase: [String!]
  texts_not_contains: [String!]
  texts_not_contains_nocase: [String!]
  coinTypes: [BigInt!]
  coinTypes_not: [BigInt!]
  coinTypes_contains: [BigInt!]
  coinTypes_contains_nocase: [BigInt!]
  coinTypes_not_contains: [BigInt!]
  coinTypes_not_contains_nocase: [BigInt!]
  events_: ENS__ResolverEvent_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__Resolver_orderBy {
  id
  domain
  address
  addr
  contentHash
  texts
  coinTypes
  events
}

type ENS__TextChanged implements ENS__ResolverEvent {
  id: ID!
  resolver: ENS__Resolver!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  key: String!
}

input ENS__TextChanged_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  resolver: String
  resolver_not: String
  resolver_gt: String
  resolver_lt: String
  resolver_gte: String
  resolver_lte: String
  resolver_in: [String!]
  resolver_not_in: [String!]
  resolver_contains: String
  resolver_contains_nocase: String
  resolver_not_contains: String
  resolver_not_contains_nocase: String
  resolver_starts_with: String
  resolver_starts_with_nocase: String
  resolver_not_starts_with: String
  resolver_not_starts_with_nocase: String
  resolver_ends_with: String
  resolver_ends_with_nocase: String
  resolver_not_ends_with: String
  resolver_not_ends_with_nocase: String
  resolver_: ENS__Resolver_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__TextChanged_orderBy {
  id
  resolver
  blockNumber
  transactionID
  key
}

type ENS__Transfer implements ENS__DomainEvent {
  id: ID!
  domain: ENS__Domain!
  blockNumber: Int!
  transactionID: ENS__Bytes!
  owner: ENS__Account!
}

input ENS__Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: String
  domain_not: String
  domain_gt: String
  domain_lt: String
  domain_gte: String
  domain_lte: String
  domain_in: [String!]
  domain_not_in: [String!]
  domain_contains: String
  domain_contains_nocase: String
  domain_not_contains: String
  domain_not_contains_nocase: String
  domain_starts_with: String
  domain_starts_with_nocase: String
  domain_not_starts_with: String
  domain_not_starts_with_nocase: String
  domain_ends_with: String
  domain_ends_with_nocase: String
  domain_not_ends_with: String
  domain_not_ends_with_nocase: String
  domain_: ENS__Domain_filter
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionID: ENS__Bytes
  transactionID_not: ENS__Bytes
  transactionID_gt: ENS__Bytes
  transactionID_lt: ENS__Bytes
  transactionID_gte: ENS__Bytes
  transactionID_lte: ENS__Bytes
  transactionID_in: [ENS__Bytes!]
  transactionID_not_in: [ENS__Bytes!]
  transactionID_contains: ENS__Bytes
  transactionID_not_contains: ENS__Bytes
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: ENS__Account_filter
  """Filter for the block changed event."""
  _change_block: ENS__BlockChangedFilter
}

enum ENS__Transfer_orderBy {
  id
  domain
  blockNumber
  transactionID
  owner
}

type ENS___Block_ {
  """The hash of the block"""
  hash: ENS__Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type ENS___Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: ENS___Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum ENS___SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

"""
A state channel Allocation representing a single Indexer-SubgraphDeployment stake

"""
type ANALYTICS__Allocation {
  """Channel Address"""
  id: ID!
  """Indexer of this allocation"""
  indexer: ANALYTICS__Indexer!
  """Creator of the allocation - can be the operator or the indexer"""
  creator: ANALYTICS__Bytes!
  """
  If the Allocation is active it shows the indexer. If closed, it is null
  """
  activeForIndexer: ANALYTICS__Indexer
  """Subgraph deployment that is being allocated to"""
  subgraphDeployment: ANALYTICS__SubgraphDeployment!
  """Tokens allocation in this allocation"""
  allocatedTokens: BigInt!
  """Effective allocation that is realized upon closing"""
  effectiveAllocation: BigInt!
  """Epoch this allocation was created"""
  createdAtEpoch: Int!
  """Block at which this allocation was created"""
  createdAtBlockHash: ANALYTICS__Bytes!
  """Epoch this allocation was closed in"""
  closedAtEpoch: Int!
  """Block hash at which this allocation was closed"""
  closedAtBlockHash: ANALYTICS__Bytes
  """Block number at which this allocation was closed"""
  closedAtBlockNumber: Int
  """
  Fees this allocation collected from query fees upon closing. Excludes curator reward and protocol tax
  """
  queryFeesCollected: BigInt!
  """
  Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators
  """
  queryFeeRebates: BigInt!
  """Curator rewards deposited to the curating bonding curve"""
  curatorRewards: BigInt!
  """
  Indexing rewards earned by this allocation. Includes delegator and indexer rewards
  """
  indexingRewards: BigInt!
  """Indexing rewards earned by this allocation by indexers"""
  indexingIndexerRewards: BigInt!
  """Indexing rewards earned by this allocation by delegators"""
  indexingDelegatorRewards: BigInt!
  """Pool in which this allocation was closed"""
  poolClosedIn: ANALYTICS__Pool
  """Fees paid out to delegators"""
  delegationFees: BigInt!
  """Status of the allocation"""
  status: ANALYTICS__AllocationStatus!
  """Timestamp this allocation was created at"""
  createdAt: Int!
  """POI submitted with a closed allocation"""
  poi: ANALYTICS__Bytes
  """NOT IMPLEMENTED - Return for this allocation"""
  totalReturn: ANALYTICS__BigDecimal!
  """NOT IMPLEMENTED - Yearly annualzied return"""
  annualizedReturn: ANALYTICS__BigDecimal!
}

enum ANALYTICS__AllocationStatus {
  Null
  Active
  Closed
  Finalized
  Claimed
}

input ANALYTICS__Allocation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  creator: ANALYTICS__Bytes
  creator_not: ANALYTICS__Bytes
  creator_gt: ANALYTICS__Bytes
  creator_lt: ANALYTICS__Bytes
  creator_gte: ANALYTICS__Bytes
  creator_lte: ANALYTICS__Bytes
  creator_in: [ANALYTICS__Bytes!]
  creator_not_in: [ANALYTICS__Bytes!]
  creator_contains: ANALYTICS__Bytes
  creator_not_contains: ANALYTICS__Bytes
  activeForIndexer: String
  activeForIndexer_not: String
  activeForIndexer_gt: String
  activeForIndexer_lt: String
  activeForIndexer_gte: String
  activeForIndexer_lte: String
  activeForIndexer_in: [String!]
  activeForIndexer_not_in: [String!]
  activeForIndexer_contains: String
  activeForIndexer_contains_nocase: String
  activeForIndexer_not_contains: String
  activeForIndexer_not_contains_nocase: String
  activeForIndexer_starts_with: String
  activeForIndexer_starts_with_nocase: String
  activeForIndexer_not_starts_with: String
  activeForIndexer_not_starts_with_nocase: String
  activeForIndexer_ends_with: String
  activeForIndexer_ends_with_nocase: String
  activeForIndexer_not_ends_with: String
  activeForIndexer_not_ends_with_nocase: String
  activeForIndexer_: ANALYTICS__Indexer_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: ANALYTICS__SubgraphDeployment_filter
  allocatedTokens: BigInt
  allocatedTokens_not: BigInt
  allocatedTokens_gt: BigInt
  allocatedTokens_lt: BigInt
  allocatedTokens_gte: BigInt
  allocatedTokens_lte: BigInt
  allocatedTokens_in: [BigInt!]
  allocatedTokens_not_in: [BigInt!]
  effectiveAllocation: BigInt
  effectiveAllocation_not: BigInt
  effectiveAllocation_gt: BigInt
  effectiveAllocation_lt: BigInt
  effectiveAllocation_gte: BigInt
  effectiveAllocation_lte: BigInt
  effectiveAllocation_in: [BigInt!]
  effectiveAllocation_not_in: [BigInt!]
  createdAtEpoch: Int
  createdAtEpoch_not: Int
  createdAtEpoch_gt: Int
  createdAtEpoch_lt: Int
  createdAtEpoch_gte: Int
  createdAtEpoch_lte: Int
  createdAtEpoch_in: [Int!]
  createdAtEpoch_not_in: [Int!]
  createdAtBlockHash: ANALYTICS__Bytes
  createdAtBlockHash_not: ANALYTICS__Bytes
  createdAtBlockHash_gt: ANALYTICS__Bytes
  createdAtBlockHash_lt: ANALYTICS__Bytes
  createdAtBlockHash_gte: ANALYTICS__Bytes
  createdAtBlockHash_lte: ANALYTICS__Bytes
  createdAtBlockHash_in: [ANALYTICS__Bytes!]
  createdAtBlockHash_not_in: [ANALYTICS__Bytes!]
  createdAtBlockHash_contains: ANALYTICS__Bytes
  createdAtBlockHash_not_contains: ANALYTICS__Bytes
  closedAtEpoch: Int
  closedAtEpoch_not: Int
  closedAtEpoch_gt: Int
  closedAtEpoch_lt: Int
  closedAtEpoch_gte: Int
  closedAtEpoch_lte: Int
  closedAtEpoch_in: [Int!]
  closedAtEpoch_not_in: [Int!]
  closedAtBlockHash: ANALYTICS__Bytes
  closedAtBlockHash_not: ANALYTICS__Bytes
  closedAtBlockHash_gt: ANALYTICS__Bytes
  closedAtBlockHash_lt: ANALYTICS__Bytes
  closedAtBlockHash_gte: ANALYTICS__Bytes
  closedAtBlockHash_lte: ANALYTICS__Bytes
  closedAtBlockHash_in: [ANALYTICS__Bytes!]
  closedAtBlockHash_not_in: [ANALYTICS__Bytes!]
  closedAtBlockHash_contains: ANALYTICS__Bytes
  closedAtBlockHash_not_contains: ANALYTICS__Bytes
  closedAtBlockNumber: Int
  closedAtBlockNumber_not: Int
  closedAtBlockNumber_gt: Int
  closedAtBlockNumber_lt: Int
  closedAtBlockNumber_gte: Int
  closedAtBlockNumber_lte: Int
  closedAtBlockNumber_in: [Int!]
  closedAtBlockNumber_not_in: [Int!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  curatorRewards: BigInt
  curatorRewards_not: BigInt
  curatorRewards_gt: BigInt
  curatorRewards_lt: BigInt
  curatorRewards_gte: BigInt
  curatorRewards_lte: BigInt
  curatorRewards_in: [BigInt!]
  curatorRewards_not_in: [BigInt!]
  indexingRewards: BigInt
  indexingRewards_not: BigInt
  indexingRewards_gt: BigInt
  indexingRewards_lt: BigInt
  indexingRewards_gte: BigInt
  indexingRewards_lte: BigInt
  indexingRewards_in: [BigInt!]
  indexingRewards_not_in: [BigInt!]
  indexingIndexerRewards: BigInt
  indexingIndexerRewards_not: BigInt
  indexingIndexerRewards_gt: BigInt
  indexingIndexerRewards_lt: BigInt
  indexingIndexerRewards_gte: BigInt
  indexingIndexerRewards_lte: BigInt
  indexingIndexerRewards_in: [BigInt!]
  indexingIndexerRewards_not_in: [BigInt!]
  indexingDelegatorRewards: BigInt
  indexingDelegatorRewards_not: BigInt
  indexingDelegatorRewards_gt: BigInt
  indexingDelegatorRewards_lt: BigInt
  indexingDelegatorRewards_gte: BigInt
  indexingDelegatorRewards_lte: BigInt
  indexingDelegatorRewards_in: [BigInt!]
  indexingDelegatorRewards_not_in: [BigInt!]
  poolClosedIn: String
  poolClosedIn_not: String
  poolClosedIn_gt: String
  poolClosedIn_lt: String
  poolClosedIn_gte: String
  poolClosedIn_lte: String
  poolClosedIn_in: [String!]
  poolClosedIn_not_in: [String!]
  poolClosedIn_contains: String
  poolClosedIn_contains_nocase: String
  poolClosedIn_not_contains: String
  poolClosedIn_not_contains_nocase: String
  poolClosedIn_starts_with: String
  poolClosedIn_starts_with_nocase: String
  poolClosedIn_not_starts_with: String
  poolClosedIn_not_starts_with_nocase: String
  poolClosedIn_ends_with: String
  poolClosedIn_ends_with_nocase: String
  poolClosedIn_not_ends_with: String
  poolClosedIn_not_ends_with_nocase: String
  poolClosedIn_: ANALYTICS__Pool_filter
  delegationFees: BigInt
  delegationFees_not: BigInt
  delegationFees_gt: BigInt
  delegationFees_lt: BigInt
  delegationFees_gte: BigInt
  delegationFees_lte: BigInt
  delegationFees_in: [BigInt!]
  delegationFees_not_in: [BigInt!]
  status: ANALYTICS__AllocationStatus
  status_not: ANALYTICS__AllocationStatus
  status_in: [ANALYTICS__AllocationStatus!]
  status_not_in: [ANALYTICS__AllocationStatus!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  poi: ANALYTICS__Bytes
  poi_not: ANALYTICS__Bytes
  poi_gt: ANALYTICS__Bytes
  poi_lt: ANALYTICS__Bytes
  poi_gte: ANALYTICS__Bytes
  poi_lte: ANALYTICS__Bytes
  poi_in: [ANALYTICS__Bytes!]
  poi_not_in: [ANALYTICS__Bytes!]
  poi_contains: ANALYTICS__Bytes
  poi_not_contains: ANALYTICS__Bytes
  totalReturn: ANALYTICS__BigDecimal
  totalReturn_not: ANALYTICS__BigDecimal
  totalReturn_gt: ANALYTICS__BigDecimal
  totalReturn_lt: ANALYTICS__BigDecimal
  totalReturn_gte: ANALYTICS__BigDecimal
  totalReturn_lte: ANALYTICS__BigDecimal
  totalReturn_in: [ANALYTICS__BigDecimal!]
  totalReturn_not_in: [ANALYTICS__BigDecimal!]
  annualizedReturn: ANALYTICS__BigDecimal
  annualizedReturn_not: ANALYTICS__BigDecimal
  annualizedReturn_gt: ANALYTICS__BigDecimal
  annualizedReturn_lt: ANALYTICS__BigDecimal
  annualizedReturn_gte: ANALYTICS__BigDecimal
  annualizedReturn_lte: ANALYTICS__BigDecimal
  annualizedReturn_in: [ANALYTICS__BigDecimal!]
  annualizedReturn_not_in: [ANALYTICS__BigDecimal!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Allocation_orderBy {
  id
  indexer
  creator
  activeForIndexer
  subgraphDeployment
  allocatedTokens
  effectiveAllocation
  createdAtEpoch
  createdAtBlockHash
  closedAtEpoch
  closedAtBlockHash
  closedAtBlockNumber
  queryFeesCollected
  queryFeeRebates
  curatorRewards
  indexingRewards
  indexingIndexerRewards
  indexingDelegatorRewards
  poolClosedIn
  delegationFees
  status
  createdAt
  poi
  totalReturn
  annualizedReturn
}

scalar ANALYTICS__BigDecimal

input ANALYTICS__BlockChangedFilter {
  number_gte: Int!
}

input ANALYTICS__Block_height {
  hash: ANALYTICS__Bytes
  number: Int
  number_gte: Int
}

scalar ANALYTICS__Bytes

"""
Curator with all Signals and metrics

"""
type ANALYTICS__Curator {
  """Eth address of the Curator"""
  id: ID!
  """Time this curator was created"""
  createdAt: Int!
  """CUMULATIVE tokens signalled on all the subgraphs"""
  totalSignalledTokens: BigInt!
  """CUMULATIVE tokens unsignalled on all the subgraphs"""
  totalUnsignalledTokens: BigInt!
  """Subgraphs the curator is curating"""
  signals(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Signal_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Signal_filter): [ANALYTICS__Signal!]!
  """CUMULATIVE tokens signalled on all names"""
  totalNameSignalledTokens: BigInt!
  """CUMULATIVE tokens unsignalled on all names"""
  totalNameUnsignalledTokens: BigInt!
  """CUMULATIVE withdrawn tokens from deprecated subgraphs"""
  totalWithdrawnTokens: BigInt!
  """Subgraphs the curator is curating"""
  nameSignals(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__NameSignal_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__NameSignal_filter): [ANALYTICS__NameSignal!]!
  """NOT IMPLEMENTED - Summation of realized rewards from all Signals"""
  realizedRewards: BigInt!
  """NOT IMPLEMENTED - Annualized rate of return on curator signal"""
  annualizedReturn: ANALYTICS__BigDecimal!
  """NOT IMPLEMENTED - Total return of the curator"""
  totalReturn: ANALYTICS__BigDecimal!
  """NOT IMPLEMENTED - Signaling efficiency of the curator"""
  signalingEfficiency: ANALYTICS__BigDecimal!
  """CURRENT summed name signal for all bonding curves"""
  totalNameSignal: ANALYTICS__BigDecimal!
  """Total curator cost basis of all shares purchased on all bonding curves"""
  totalNameSignalAverageCostBasis: ANALYTICS__BigDecimal!
  """totalNameSignalCostBasis / totalNameSignal"""
  totalAverageCostBasisPerNameSignal: ANALYTICS__BigDecimal!
}

input ANALYTICS__Curator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  totalSignalledTokens: BigInt
  totalSignalledTokens_not: BigInt
  totalSignalledTokens_gt: BigInt
  totalSignalledTokens_lt: BigInt
  totalSignalledTokens_gte: BigInt
  totalSignalledTokens_lte: BigInt
  totalSignalledTokens_in: [BigInt!]
  totalSignalledTokens_not_in: [BigInt!]
  totalUnsignalledTokens: BigInt
  totalUnsignalledTokens_not: BigInt
  totalUnsignalledTokens_gt: BigInt
  totalUnsignalledTokens_lt: BigInt
  totalUnsignalledTokens_gte: BigInt
  totalUnsignalledTokens_lte: BigInt
  totalUnsignalledTokens_in: [BigInt!]
  totalUnsignalledTokens_not_in: [BigInt!]
  signals_: ANALYTICS__Signal_filter
  totalNameSignalledTokens: BigInt
  totalNameSignalledTokens_not: BigInt
  totalNameSignalledTokens_gt: BigInt
  totalNameSignalledTokens_lt: BigInt
  totalNameSignalledTokens_gte: BigInt
  totalNameSignalledTokens_lte: BigInt
  totalNameSignalledTokens_in: [BigInt!]
  totalNameSignalledTokens_not_in: [BigInt!]
  totalNameUnsignalledTokens: BigInt
  totalNameUnsignalledTokens_not: BigInt
  totalNameUnsignalledTokens_gt: BigInt
  totalNameUnsignalledTokens_lt: BigInt
  totalNameUnsignalledTokens_gte: BigInt
  totalNameUnsignalledTokens_lte: BigInt
  totalNameUnsignalledTokens_in: [BigInt!]
  totalNameUnsignalledTokens_not_in: [BigInt!]
  totalWithdrawnTokens: BigInt
  totalWithdrawnTokens_not: BigInt
  totalWithdrawnTokens_gt: BigInt
  totalWithdrawnTokens_lt: BigInt
  totalWithdrawnTokens_gte: BigInt
  totalWithdrawnTokens_lte: BigInt
  totalWithdrawnTokens_in: [BigInt!]
  totalWithdrawnTokens_not_in: [BigInt!]
  nameSignals_: ANALYTICS__NameSignal_filter
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  annualizedReturn: ANALYTICS__BigDecimal
  annualizedReturn_not: ANALYTICS__BigDecimal
  annualizedReturn_gt: ANALYTICS__BigDecimal
  annualizedReturn_lt: ANALYTICS__BigDecimal
  annualizedReturn_gte: ANALYTICS__BigDecimal
  annualizedReturn_lte: ANALYTICS__BigDecimal
  annualizedReturn_in: [ANALYTICS__BigDecimal!]
  annualizedReturn_not_in: [ANALYTICS__BigDecimal!]
  totalReturn: ANALYTICS__BigDecimal
  totalReturn_not: ANALYTICS__BigDecimal
  totalReturn_gt: ANALYTICS__BigDecimal
  totalReturn_lt: ANALYTICS__BigDecimal
  totalReturn_gte: ANALYTICS__BigDecimal
  totalReturn_lte: ANALYTICS__BigDecimal
  totalReturn_in: [ANALYTICS__BigDecimal!]
  totalReturn_not_in: [ANALYTICS__BigDecimal!]
  signalingEfficiency: ANALYTICS__BigDecimal
  signalingEfficiency_not: ANALYTICS__BigDecimal
  signalingEfficiency_gt: ANALYTICS__BigDecimal
  signalingEfficiency_lt: ANALYTICS__BigDecimal
  signalingEfficiency_gte: ANALYTICS__BigDecimal
  signalingEfficiency_lte: ANALYTICS__BigDecimal
  signalingEfficiency_in: [ANALYTICS__BigDecimal!]
  signalingEfficiency_not_in: [ANALYTICS__BigDecimal!]
  totalNameSignal: ANALYTICS__BigDecimal
  totalNameSignal_not: ANALYTICS__BigDecimal
  totalNameSignal_gt: ANALYTICS__BigDecimal
  totalNameSignal_lt: ANALYTICS__BigDecimal
  totalNameSignal_gte: ANALYTICS__BigDecimal
  totalNameSignal_lte: ANALYTICS__BigDecimal
  totalNameSignal_in: [ANALYTICS__BigDecimal!]
  totalNameSignal_not_in: [ANALYTICS__BigDecimal!]
  totalNameSignalAverageCostBasis: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_not: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_gt: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_lt: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_gte: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_lte: ANALYTICS__BigDecimal
  totalNameSignalAverageCostBasis_in: [ANALYTICS__BigDecimal!]
  totalNameSignalAverageCostBasis_not_in: [ANALYTICS__BigDecimal!]
  totalAverageCostBasisPerNameSignal: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_not: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_gt: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_lt: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_gte: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_lte: ANALYTICS__BigDecimal
  totalAverageCostBasisPerNameSignal_in: [ANALYTICS__BigDecimal!]
  totalAverageCostBasisPerNameSignal_not_in: [ANALYTICS__BigDecimal!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Curator_orderBy {
  id
  createdAt
  totalSignalledTokens
  totalUnsignalledTokens
  signals
  totalNameSignalledTokens
  totalNameUnsignalledTokens
  totalWithdrawnTokens
  nameSignals
  realizedRewards
  annualizedReturn
  totalReturn
  signalingEfficiency
  totalNameSignal
  totalNameSignalAverageCostBasis
  totalAverageCostBasisPerNameSignal
}

"""
Delegator stake for a single Indexer

"""
type ANALYTICS__DelegatedStake {
  """Concatenation of Delegator address and Indexer address"""
  id: ID!
  """Index the stake is delegated to"""
  indexer: ANALYTICS__Indexer!
  """Delegator"""
  delegator: ANALYTICS__Delegator!
  """
  [POSSIBLE DEPRECATION] CURRENT tokens staked. Old stakedTokens implementation renamed to totalStakedTokens (19/03/21)
  """
  stakedTokens: BigInt!
  """CURRENT tokens locked"""
  lockedTokens: BigInt!
  """Epoch the locked tokens get unlocked"""
  lockedUntil: Int!
  """
  Shares owned in the delegator pool. Used to calculate total amount delegated
  """
  shareAmount: BigInt!
  """
  The rate this delegator paid for their shares (calculated using average cost basis). Used for rewards calculations
  """
  personalExchangeRate: ANALYTICS__BigDecimal!
  """Realized rewards from undelegating and realizing a reward"""
  realizedRewards: ANALYTICS__BigDecimal!
  """
  [CURRENT] Latest known value for share exchange rate. Should reflect the same value as 'delegationExchangeRate' on the related Indexer
  """
  latestIndexerExchangeRate: ANALYTICS__BigDecimal!
  """[CURRENT] Rewards not yet withdrawn, but already distributed."""
  unrealizedRewards: ANALYTICS__BigDecimal!
  """
  [CURRENT] Original value of the delegation shares. Should be sharesAmount * personalExchangeRate
  """
  originalDelegation: ANALYTICS__BigDecimal!
  """
  [CURRENT] Current value of the delegation shares. Should be sharesAmount * latestIndexerExchangeRate
  """
  currentDelegation: ANALYTICS__BigDecimal!
  """CUMULATIVE tokens delegated"""
  totalStakedTokens: BigInt!
  """CUMULATIVE tokens undelegated"""
  totalUnstakedTokens: BigInt!
  """Time this delegator first delegated to an indexer"""
  createdAt: Int!
  """Last time this delegator delegated towards this indexer"""
  lastDelegatedAt: Int
  """Last time this delegator undelegated from this indexer"""
  lastUndelegatedAt: Int
  """Auxiliary entity used for batch updates"""
  relation: ANALYTICS__IndexerDelegatedStakeRelation!
}

type ANALYTICS__DelegatedStakeDailyData {
  """<DELEGATOR ADDRESS>-<INDEXER ADDRESS>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that this daily data tracks"""
  stake: ANALYTICS__DelegatedStake!
  """Delegator entity that owns the original entity"""
  delegator: ANALYTICS__Delegator!
  """Indexer entity where the delegation resides"""
  indexer: ANALYTICS__Indexer!
  """[CURRENT] Amount of staked tokens for this day and this indexer"""
  stakedTokens: BigInt!
  """
  [CURRENT] Amount of locked tokens (undelegating) for this day and this indexer
  """
  lockedTokens: BigInt!
  """[CURRENT] Amount of shares for this day and this indexer"""
  shareAmount: BigInt!
  """
  [CURRENT] Initial exchange rate for this delegator in this indexer at this day. It will increase as an average cost basis if the delegator adds more delegation.
  """
  personalExchangeRate: ANALYTICS__BigDecimal!
  """[CURRENT] Latest delegationExchangeRate value for the indexer"""
  latestIndexerExchangeRate: ANALYTICS__BigDecimal!
  """
  [CURRENT] Unrealized rewards for the delegator on this particular stake
  """
  unrealizedRewards: ANALYTICS__BigDecimal!
  """[CURRENT] Realized rewards for the delegator on this particular stake"""
  realizedRewards: ANALYTICS__BigDecimal!
  """
  [CURRENT] Original delegation for the delegator on this particular stake
  """
  originalDelegation: ANALYTICS__BigDecimal!
  """
  [CURRENT] Current delegation for the delegator on this particular stake
  """
  currentDelegation: ANALYTICS__BigDecimal!
}

input ANALYTICS__DelegatedStakeDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  stake: String
  stake_not: String
  stake_gt: String
  stake_lt: String
  stake_gte: String
  stake_lte: String
  stake_in: [String!]
  stake_not_in: [String!]
  stake_contains: String
  stake_contains_nocase: String
  stake_not_contains: String
  stake_not_contains_nocase: String
  stake_starts_with: String
  stake_starts_with_nocase: String
  stake_not_starts_with: String
  stake_not_starts_with_nocase: String
  stake_ends_with: String
  stake_ends_with_nocase: String
  stake_not_ends_with: String
  stake_not_ends_with_nocase: String
  stake_: ANALYTICS__DelegatedStake_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  shareAmount: BigInt
  shareAmount_not: BigInt
  shareAmount_gt: BigInt
  shareAmount_lt: BigInt
  shareAmount_gte: BigInt
  shareAmount_lte: BigInt
  shareAmount_in: [BigInt!]
  shareAmount_not_in: [BigInt!]
  personalExchangeRate: ANALYTICS__BigDecimal
  personalExchangeRate_not: ANALYTICS__BigDecimal
  personalExchangeRate_gt: ANALYTICS__BigDecimal
  personalExchangeRate_lt: ANALYTICS__BigDecimal
  personalExchangeRate_gte: ANALYTICS__BigDecimal
  personalExchangeRate_lte: ANALYTICS__BigDecimal
  personalExchangeRate_in: [ANALYTICS__BigDecimal!]
  personalExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  latestIndexerExchangeRate: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_not: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_gt: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_lt: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_gte: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_lte: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_in: [ANALYTICS__BigDecimal!]
  latestIndexerExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  unrealizedRewards: ANALYTICS__BigDecimal
  unrealizedRewards_not: ANALYTICS__BigDecimal
  unrealizedRewards_gt: ANALYTICS__BigDecimal
  unrealizedRewards_lt: ANALYTICS__BigDecimal
  unrealizedRewards_gte: ANALYTICS__BigDecimal
  unrealizedRewards_lte: ANALYTICS__BigDecimal
  unrealizedRewards_in: [ANALYTICS__BigDecimal!]
  unrealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  realizedRewards: ANALYTICS__BigDecimal
  realizedRewards_not: ANALYTICS__BigDecimal
  realizedRewards_gt: ANALYTICS__BigDecimal
  realizedRewards_lt: ANALYTICS__BigDecimal
  realizedRewards_gte: ANALYTICS__BigDecimal
  realizedRewards_lte: ANALYTICS__BigDecimal
  realizedRewards_in: [ANALYTICS__BigDecimal!]
  realizedRewards_not_in: [ANALYTICS__BigDecimal!]
  originalDelegation: ANALYTICS__BigDecimal
  originalDelegation_not: ANALYTICS__BigDecimal
  originalDelegation_gt: ANALYTICS__BigDecimal
  originalDelegation_lt: ANALYTICS__BigDecimal
  originalDelegation_gte: ANALYTICS__BigDecimal
  originalDelegation_lte: ANALYTICS__BigDecimal
  originalDelegation_in: [ANALYTICS__BigDecimal!]
  originalDelegation_not_in: [ANALYTICS__BigDecimal!]
  currentDelegation: ANALYTICS__BigDecimal
  currentDelegation_not: ANALYTICS__BigDecimal
  currentDelegation_gt: ANALYTICS__BigDecimal
  currentDelegation_lt: ANALYTICS__BigDecimal
  currentDelegation_gte: ANALYTICS__BigDecimal
  currentDelegation_lte: ANALYTICS__BigDecimal
  currentDelegation_in: [ANALYTICS__BigDecimal!]
  currentDelegation_not_in: [ANALYTICS__BigDecimal!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__DelegatedStakeDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  stake
  delegator
  indexer
  stakedTokens
  lockedTokens
  shareAmount
  personalExchangeRate
  latestIndexerExchangeRate
  unrealizedRewards
  realizedRewards
  originalDelegation
  currentDelegation
}

input ANALYTICS__DelegatedStake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  lockedUntil: Int
  lockedUntil_not: Int
  lockedUntil_gt: Int
  lockedUntil_lt: Int
  lockedUntil_gte: Int
  lockedUntil_lte: Int
  lockedUntil_in: [Int!]
  lockedUntil_not_in: [Int!]
  shareAmount: BigInt
  shareAmount_not: BigInt
  shareAmount_gt: BigInt
  shareAmount_lt: BigInt
  shareAmount_gte: BigInt
  shareAmount_lte: BigInt
  shareAmount_in: [BigInt!]
  shareAmount_not_in: [BigInt!]
  personalExchangeRate: ANALYTICS__BigDecimal
  personalExchangeRate_not: ANALYTICS__BigDecimal
  personalExchangeRate_gt: ANALYTICS__BigDecimal
  personalExchangeRate_lt: ANALYTICS__BigDecimal
  personalExchangeRate_gte: ANALYTICS__BigDecimal
  personalExchangeRate_lte: ANALYTICS__BigDecimal
  personalExchangeRate_in: [ANALYTICS__BigDecimal!]
  personalExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  realizedRewards: ANALYTICS__BigDecimal
  realizedRewards_not: ANALYTICS__BigDecimal
  realizedRewards_gt: ANALYTICS__BigDecimal
  realizedRewards_lt: ANALYTICS__BigDecimal
  realizedRewards_gte: ANALYTICS__BigDecimal
  realizedRewards_lte: ANALYTICS__BigDecimal
  realizedRewards_in: [ANALYTICS__BigDecimal!]
  realizedRewards_not_in: [ANALYTICS__BigDecimal!]
  latestIndexerExchangeRate: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_not: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_gt: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_lt: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_gte: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_lte: ANALYTICS__BigDecimal
  latestIndexerExchangeRate_in: [ANALYTICS__BigDecimal!]
  latestIndexerExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  unrealizedRewards: ANALYTICS__BigDecimal
  unrealizedRewards_not: ANALYTICS__BigDecimal
  unrealizedRewards_gt: ANALYTICS__BigDecimal
  unrealizedRewards_lt: ANALYTICS__BigDecimal
  unrealizedRewards_gte: ANALYTICS__BigDecimal
  unrealizedRewards_lte: ANALYTICS__BigDecimal
  unrealizedRewards_in: [ANALYTICS__BigDecimal!]
  unrealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  originalDelegation: ANALYTICS__BigDecimal
  originalDelegation_not: ANALYTICS__BigDecimal
  originalDelegation_gt: ANALYTICS__BigDecimal
  originalDelegation_lt: ANALYTICS__BigDecimal
  originalDelegation_gte: ANALYTICS__BigDecimal
  originalDelegation_lte: ANALYTICS__BigDecimal
  originalDelegation_in: [ANALYTICS__BigDecimal!]
  originalDelegation_not_in: [ANALYTICS__BigDecimal!]
  currentDelegation: ANALYTICS__BigDecimal
  currentDelegation_not: ANALYTICS__BigDecimal
  currentDelegation_gt: ANALYTICS__BigDecimal
  currentDelegation_lt: ANALYTICS__BigDecimal
  currentDelegation_gte: ANALYTICS__BigDecimal
  currentDelegation_lte: ANALYTICS__BigDecimal
  currentDelegation_in: [ANALYTICS__BigDecimal!]
  currentDelegation_not_in: [ANALYTICS__BigDecimal!]
  totalStakedTokens: BigInt
  totalStakedTokens_not: BigInt
  totalStakedTokens_gt: BigInt
  totalStakedTokens_lt: BigInt
  totalStakedTokens_gte: BigInt
  totalStakedTokens_lte: BigInt
  totalStakedTokens_in: [BigInt!]
  totalStakedTokens_not_in: [BigInt!]
  totalUnstakedTokens: BigInt
  totalUnstakedTokens_not: BigInt
  totalUnstakedTokens_gt: BigInt
  totalUnstakedTokens_lt: BigInt
  totalUnstakedTokens_gte: BigInt
  totalUnstakedTokens_lte: BigInt
  totalUnstakedTokens_in: [BigInt!]
  totalUnstakedTokens_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  lastDelegatedAt: Int
  lastDelegatedAt_not: Int
  lastDelegatedAt_gt: Int
  lastDelegatedAt_lt: Int
  lastDelegatedAt_gte: Int
  lastDelegatedAt_lte: Int
  lastDelegatedAt_in: [Int!]
  lastDelegatedAt_not_in: [Int!]
  lastUndelegatedAt: Int
  lastUndelegatedAt_not: Int
  lastUndelegatedAt_gt: Int
  lastUndelegatedAt_lt: Int
  lastUndelegatedAt_gte: Int
  lastUndelegatedAt_lte: Int
  lastUndelegatedAt_in: [Int!]
  lastUndelegatedAt_not_in: [Int!]
  relation: String
  relation_not: String
  relation_gt: String
  relation_lt: String
  relation_gte: String
  relation_lte: String
  relation_in: [String!]
  relation_not_in: [String!]
  relation_contains: String
  relation_contains_nocase: String
  relation_not_contains: String
  relation_not_contains_nocase: String
  relation_starts_with: String
  relation_starts_with_nocase: String
  relation_not_starts_with: String
  relation_not_starts_with_nocase: String
  relation_ends_with: String
  relation_ends_with_nocase: String
  relation_not_ends_with: String
  relation_not_ends_with_nocase: String
  relation_: ANALYTICS__IndexerDelegatedStakeRelation_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__DelegatedStake_orderBy {
  id
  indexer
  delegator
  stakedTokens
  lockedTokens
  lockedUntil
  shareAmount
  personalExchangeRate
  realizedRewards
  latestIndexerExchangeRate
  unrealizedRewards
  originalDelegation
  currentDelegation
  totalStakedTokens
  totalUnstakedTokens
  createdAt
  lastDelegatedAt
  lastUndelegatedAt
  relation
}

"""
Delegator with all their delegated stakes towards Indexers

"""
type ANALYTICS__Delegator {
  """Delegator address"""
  id: ID!
  account: ANALYTICS__GraphAccount!
  defaultDisplayName: String
  """Stakes of this delegator"""
  stakes(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__DelegatedStake_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__DelegatedStake_filter): [ANALYTICS__DelegatedStake!]!
  """Time created at"""
  createdAt: Int!
  """
  [POSSIBLE DEPRECATION] Current amount of staked tokens across all DelegatedStakes
  """
  stakedTokens: BigInt!
  """
  Current amount of locked tokens (undelegating) across all DelegatedStakes
  """
  lockedTokens: BigInt!
  """
  [CURRENT] Total realized rewards across all delegated stakes. Realized rewards are added when undelegating and realizing a profit
  """
  totalRealizedRewards: ANALYTICS__BigDecimal!
  """[CURRENT] Total unrealized rewards across all delegated stakes."""
  totalUnrealizedRewards: ANALYTICS__BigDecimal!
  """[CURRENT] Original amount delegated across all delegated stakes."""
  originalDelegation: ANALYTICS__BigDecimal!
  """
  [CURRENT] Current delegation amount across all delegated stakes. This is updated based on the continuous restake from delegation
  """
  currentDelegation: ANALYTICS__BigDecimal!
  """List of all the daily data entities that exists for this delegator"""
  dailyData(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__DelegatorDailyData_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__DelegatorDailyData_filter): [ANALYTICS__DelegatorDailyData!]!
  """CUMULATIVE staked tokens in DelegatorStakes of this Delegator"""
  totalStakedTokens: BigInt!
  """CUMULATIVE unstaked tokens in DelegatorStakes of this Delegator"""
  totalUnstakedTokens: BigInt!
  """Total DelegatedStake entity count (Active and inactive)"""
  stakesCount: Int!
  """
  Active DelegatedStake entity count. Active means it still has GRT delegated
  """
  activeStakesCount: Int!
  """Last time this delegator delegated towards any indexer"""
  lastDelegatedAt: Int
  """Last time this delegator undelegated from any indexer"""
  lastUndelegatedAt: Int
  """DelegatedStake entity related to the lastDelegatedAt field"""
  lastDelegation: ANALYTICS__DelegatedStake
  """DelegatedStake entity related to the lastUndelegatedAt field"""
  lastUndelegation: ANALYTICS__DelegatedStake
}

type ANALYTICS__DelegatorDailyData {
  """<DELEGATOR ADDRESS>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that this daily data tracks"""
  delegator: ANALYTICS__Delegator!
  """[CURRENT] Amount of staked tokens for this day across all stakes"""
  stakedTokens: BigInt!
  """
  [CURRENT] Amount of locked (undelegating) tokens for this day across all stakes
  """
  lockedTokens: BigInt!
  """[CURRENT] Aggregation of unrealized rewards across all stakes"""
  totalUnrealizedRewards: ANALYTICS__BigDecimal!
  """[CURRENT] Aggregation of realized rewards across all stakes"""
  totalRealizedRewards: ANALYTICS__BigDecimal!
  """[CURRENT] Current delegation for the delegator across all stakes"""
  currentDelegation: ANALYTICS__BigDecimal!
  """
  [CURRENT] Total amount of DelegatedStake entities this Delegator historically had at this point in time
  """
  stakesCount: Int!
  """
  [CURRENT] Amount of active DelegatedStake entities this Delegator had at this point in time
  """
  activeStakesCount: Int!
}

input ANALYTICS__DelegatorDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  totalUnrealizedRewards: ANALYTICS__BigDecimal
  totalUnrealizedRewards_not: ANALYTICS__BigDecimal
  totalUnrealizedRewards_gt: ANALYTICS__BigDecimal
  totalUnrealizedRewards_lt: ANALYTICS__BigDecimal
  totalUnrealizedRewards_gte: ANALYTICS__BigDecimal
  totalUnrealizedRewards_lte: ANALYTICS__BigDecimal
  totalUnrealizedRewards_in: [ANALYTICS__BigDecimal!]
  totalUnrealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  totalRealizedRewards: ANALYTICS__BigDecimal
  totalRealizedRewards_not: ANALYTICS__BigDecimal
  totalRealizedRewards_gt: ANALYTICS__BigDecimal
  totalRealizedRewards_lt: ANALYTICS__BigDecimal
  totalRealizedRewards_gte: ANALYTICS__BigDecimal
  totalRealizedRewards_lte: ANALYTICS__BigDecimal
  totalRealizedRewards_in: [ANALYTICS__BigDecimal!]
  totalRealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  currentDelegation: ANALYTICS__BigDecimal
  currentDelegation_not: ANALYTICS__BigDecimal
  currentDelegation_gt: ANALYTICS__BigDecimal
  currentDelegation_lt: ANALYTICS__BigDecimal
  currentDelegation_gte: ANALYTICS__BigDecimal
  currentDelegation_lte: ANALYTICS__BigDecimal
  currentDelegation_in: [ANALYTICS__BigDecimal!]
  currentDelegation_not_in: [ANALYTICS__BigDecimal!]
  stakesCount: Int
  stakesCount_not: Int
  stakesCount_gt: Int
  stakesCount_lt: Int
  stakesCount_gte: Int
  stakesCount_lte: Int
  stakesCount_in: [Int!]
  stakesCount_not_in: [Int!]
  activeStakesCount: Int
  activeStakesCount_not: Int
  activeStakesCount_gt: Int
  activeStakesCount_lt: Int
  activeStakesCount_gte: Int
  activeStakesCount_lte: Int
  activeStakesCount_in: [Int!]
  activeStakesCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__DelegatorDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  delegator
  stakedTokens
  lockedTokens
  totalUnrealizedRewards
  totalRealizedRewards
  currentDelegation
  stakesCount
  activeStakesCount
}

type ANALYTICS__DelegatorDelegatedStakeDailyRelation {
  """
  Auxiliary entity to avoid using arrays for many-to-many relation tracking. Compounds the delegator id with an autoincremental number.
  """
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Delegator entity that forms the relation."""
  delegator: ANALYTICS__Delegator!
  """DelegatedStake entity that forms the relation"""
  stake: ANALYTICS__DelegatedStake!
  """DailyData entity that tracks the Delegator for this specific day"""
  delegatorDailyData: ANALYTICS__DelegatorDailyData!
  """DailyData entity that tracks the DelegatedStake for this specific day"""
  delegatedStakeDailyData: ANALYTICS__DelegatedStakeDailyData!
}

input ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  stake: String
  stake_not: String
  stake_gt: String
  stake_lt: String
  stake_gte: String
  stake_lte: String
  stake_in: [String!]
  stake_not_in: [String!]
  stake_contains: String
  stake_contains_nocase: String
  stake_not_contains: String
  stake_not_contains_nocase: String
  stake_starts_with: String
  stake_starts_with_nocase: String
  stake_not_starts_with: String
  stake_not_starts_with_nocase: String
  stake_ends_with: String
  stake_ends_with_nocase: String
  stake_not_ends_with: String
  stake_not_ends_with_nocase: String
  stake_: ANALYTICS__DelegatedStake_filter
  delegatorDailyData: String
  delegatorDailyData_not: String
  delegatorDailyData_gt: String
  delegatorDailyData_lt: String
  delegatorDailyData_gte: String
  delegatorDailyData_lte: String
  delegatorDailyData_in: [String!]
  delegatorDailyData_not_in: [String!]
  delegatorDailyData_contains: String
  delegatorDailyData_contains_nocase: String
  delegatorDailyData_not_contains: String
  delegatorDailyData_not_contains_nocase: String
  delegatorDailyData_starts_with: String
  delegatorDailyData_starts_with_nocase: String
  delegatorDailyData_not_starts_with: String
  delegatorDailyData_not_starts_with_nocase: String
  delegatorDailyData_ends_with: String
  delegatorDailyData_ends_with_nocase: String
  delegatorDailyData_not_ends_with: String
  delegatorDailyData_not_ends_with_nocase: String
  delegatorDailyData_: ANALYTICS__DelegatorDailyData_filter
  delegatedStakeDailyData: String
  delegatedStakeDailyData_not: String
  delegatedStakeDailyData_gt: String
  delegatedStakeDailyData_lt: String
  delegatedStakeDailyData_gte: String
  delegatedStakeDailyData_lte: String
  delegatedStakeDailyData_in: [String!]
  delegatedStakeDailyData_not_in: [String!]
  delegatedStakeDailyData_contains: String
  delegatedStakeDailyData_contains_nocase: String
  delegatedStakeDailyData_not_contains: String
  delegatedStakeDailyData_not_contains_nocase: String
  delegatedStakeDailyData_starts_with: String
  delegatedStakeDailyData_starts_with_nocase: String
  delegatedStakeDailyData_not_starts_with: String
  delegatedStakeDailyData_not_starts_with_nocase: String
  delegatedStakeDailyData_ends_with: String
  delegatedStakeDailyData_ends_with_nocase: String
  delegatedStakeDailyData_not_ends_with: String
  delegatedStakeDailyData_not_ends_with_nocase: String
  delegatedStakeDailyData_: ANALYTICS__DelegatedStakeDailyData_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  delegator
  stake
  delegatorDailyData
  delegatedStakeDailyData
}

input ANALYTICS__Delegator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: ANALYTICS__GraphAccount_filter
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  stakes_: ANALYTICS__DelegatedStake_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  totalRealizedRewards: ANALYTICS__BigDecimal
  totalRealizedRewards_not: ANALYTICS__BigDecimal
  totalRealizedRewards_gt: ANALYTICS__BigDecimal
  totalRealizedRewards_lt: ANALYTICS__BigDecimal
  totalRealizedRewards_gte: ANALYTICS__BigDecimal
  totalRealizedRewards_lte: ANALYTICS__BigDecimal
  totalRealizedRewards_in: [ANALYTICS__BigDecimal!]
  totalRealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  totalUnrealizedRewards: ANALYTICS__BigDecimal
  totalUnrealizedRewards_not: ANALYTICS__BigDecimal
  totalUnrealizedRewards_gt: ANALYTICS__BigDecimal
  totalUnrealizedRewards_lt: ANALYTICS__BigDecimal
  totalUnrealizedRewards_gte: ANALYTICS__BigDecimal
  totalUnrealizedRewards_lte: ANALYTICS__BigDecimal
  totalUnrealizedRewards_in: [ANALYTICS__BigDecimal!]
  totalUnrealizedRewards_not_in: [ANALYTICS__BigDecimal!]
  originalDelegation: ANALYTICS__BigDecimal
  originalDelegation_not: ANALYTICS__BigDecimal
  originalDelegation_gt: ANALYTICS__BigDecimal
  originalDelegation_lt: ANALYTICS__BigDecimal
  originalDelegation_gte: ANALYTICS__BigDecimal
  originalDelegation_lte: ANALYTICS__BigDecimal
  originalDelegation_in: [ANALYTICS__BigDecimal!]
  originalDelegation_not_in: [ANALYTICS__BigDecimal!]
  currentDelegation: ANALYTICS__BigDecimal
  currentDelegation_not: ANALYTICS__BigDecimal
  currentDelegation_gt: ANALYTICS__BigDecimal
  currentDelegation_lt: ANALYTICS__BigDecimal
  currentDelegation_gte: ANALYTICS__BigDecimal
  currentDelegation_lte: ANALYTICS__BigDecimal
  currentDelegation_in: [ANALYTICS__BigDecimal!]
  currentDelegation_not_in: [ANALYTICS__BigDecimal!]
  dailyData_: ANALYTICS__DelegatorDailyData_filter
  totalStakedTokens: BigInt
  totalStakedTokens_not: BigInt
  totalStakedTokens_gt: BigInt
  totalStakedTokens_lt: BigInt
  totalStakedTokens_gte: BigInt
  totalStakedTokens_lte: BigInt
  totalStakedTokens_in: [BigInt!]
  totalStakedTokens_not_in: [BigInt!]
  totalUnstakedTokens: BigInt
  totalUnstakedTokens_not: BigInt
  totalUnstakedTokens_gt: BigInt
  totalUnstakedTokens_lt: BigInt
  totalUnstakedTokens_gte: BigInt
  totalUnstakedTokens_lte: BigInt
  totalUnstakedTokens_in: [BigInt!]
  totalUnstakedTokens_not_in: [BigInt!]
  stakesCount: Int
  stakesCount_not: Int
  stakesCount_gt: Int
  stakesCount_lt: Int
  stakesCount_gte: Int
  stakesCount_lte: Int
  stakesCount_in: [Int!]
  stakesCount_not_in: [Int!]
  activeStakesCount: Int
  activeStakesCount_not: Int
  activeStakesCount_gt: Int
  activeStakesCount_lt: Int
  activeStakesCount_gte: Int
  activeStakesCount_lte: Int
  activeStakesCount_in: [Int!]
  activeStakesCount_not_in: [Int!]
  lastDelegatedAt: Int
  lastDelegatedAt_not: Int
  lastDelegatedAt_gt: Int
  lastDelegatedAt_lt: Int
  lastDelegatedAt_gte: Int
  lastDelegatedAt_lte: Int
  lastDelegatedAt_in: [Int!]
  lastDelegatedAt_not_in: [Int!]
  lastUndelegatedAt: Int
  lastUndelegatedAt_not: Int
  lastUndelegatedAt_gt: Int
  lastUndelegatedAt_lt: Int
  lastUndelegatedAt_gte: Int
  lastUndelegatedAt_lte: Int
  lastUndelegatedAt_in: [Int!]
  lastUndelegatedAt_not_in: [Int!]
  lastDelegation: String
  lastDelegation_not: String
  lastDelegation_gt: String
  lastDelegation_lt: String
  lastDelegation_gte: String
  lastDelegation_lte: String
  lastDelegation_in: [String!]
  lastDelegation_not_in: [String!]
  lastDelegation_contains: String
  lastDelegation_contains_nocase: String
  lastDelegation_not_contains: String
  lastDelegation_not_contains_nocase: String
  lastDelegation_starts_with: String
  lastDelegation_starts_with_nocase: String
  lastDelegation_not_starts_with: String
  lastDelegation_not_starts_with_nocase: String
  lastDelegation_ends_with: String
  lastDelegation_ends_with_nocase: String
  lastDelegation_not_ends_with: String
  lastDelegation_not_ends_with_nocase: String
  lastDelegation_: ANALYTICS__DelegatedStake_filter
  lastUndelegation: String
  lastUndelegation_not: String
  lastUndelegation_gt: String
  lastUndelegation_lt: String
  lastUndelegation_gte: String
  lastUndelegation_lte: String
  lastUndelegation_in: [String!]
  lastUndelegation_not_in: [String!]
  lastUndelegation_contains: String
  lastUndelegation_contains_nocase: String
  lastUndelegation_not_contains: String
  lastUndelegation_not_contains_nocase: String
  lastUndelegation_starts_with: String
  lastUndelegation_starts_with_nocase: String
  lastUndelegation_not_starts_with: String
  lastUndelegation_not_starts_with_nocase: String
  lastUndelegation_ends_with: String
  lastUndelegation_ends_with_nocase: String
  lastUndelegation_not_ends_with: String
  lastUndelegation_not_ends_with_nocase: String
  lastUndelegation_: ANALYTICS__DelegatedStake_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Delegator_orderBy {
  id
  account
  defaultDisplayName
  stakes
  createdAt
  stakedTokens
  lockedTokens
  totalRealizedRewards
  totalUnrealizedRewards
  originalDelegation
  currentDelegation
  dailyData
  totalStakedTokens
  totalUnstakedTokens
  stakesCount
  activeStakesCount
  lastDelegatedAt
  lastUndelegatedAt
  lastDelegation
  lastUndelegation
}

"""
An account within the graph network. Contains metadata and all relevant data for this accounts
delegating, curating, and indexing.

"""
type ANALYTICS__GraphAccount {
  """Graph account ID"""
  id: ID!
  """All names this graph account has claimed from all name systems"""
  names(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__GraphAccountName_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__GraphAccountName_filter): [ANALYTICS__GraphAccountName!]!
  """Default name the graph account has chosen"""
  defaultName: ANALYTICS__GraphAccountName
  """Time the account was created"""
  createdAt: Int!
  """
  Default display name is the current default name. Used for filtered queries in the explorer
  """
  defaultDisplayName: String
  """True if it is an organization. False if it is an individual"""
  isOrganization: Boolean
  """IPFS hash with account metadata details"""
  metadataHash: ANALYTICS__Bytes
  """Main repository of code for the graph account"""
  codeRepository: String
  """Description of the graph account"""
  description: String
  """Image URL"""
  image: String
  """Website URL"""
  website: String
  """Display name. Not unique"""
  displayName: String
  """Operator of other Graph Accounts"""
  operatorOf(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__GraphAccount_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__GraphAccount_filter): [ANALYTICS__GraphAccount!]!
  """Operators of this Graph Accounts"""
  operators(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__GraphAccount_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__GraphAccount_filter): [ANALYTICS__GraphAccount!]!
  """Graph token balance"""
  balance: BigInt!
  """Amount this account has approved staking to transfer their GRT"""
  curationApproval: BigInt!
  """Amount this account has approved curation to transfer their GRT"""
  stakingApproval: BigInt!
  """Amount this account has approved the GNS to transfer their GRT"""
  gnsApproval: BigInt!
  """Subgraphs the graph account owns"""
  subgraphs(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Subgraph_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Subgraph_filter): [ANALYTICS__Subgraph!]!
  """Time that this graph account became a developer"""
  developerCreatedAt: Int
  """Curator fields for this GraphAccount. Null if never curated"""
  curator: ANALYTICS__Curator
  """Indexer fields for this GraphAccount. Null if never indexed"""
  indexer: ANALYTICS__Indexer
  """Delegator fields for this GraphAccount. Null if never delegated"""
  delegator: ANALYTICS__Delegator
  """Name signal transactions created by this GraphAccount"""
  nameSignalTransactions(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__NameSignalTransaction_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__NameSignalTransaction_filter): [ANALYTICS__NameSignalTransaction!]!
}

"""
A name chosen by a Graph Account from a Name System such as ENS. This allows Graph Accounts to be
recognized by name, rather than just an Ethereum address

"""
type ANALYTICS__GraphAccountName {
  """Name system concatenated with the unique ID of the name system"""
  id: ID!
  """Name system for this name"""
  nameSystem: ANALYTICS__NameSystem!
  """Name from the system"""
  name: String!
  """
  The graph account that owned the name when it was linked in the graph network
  """
  graphAccount: ANALYTICS__GraphAccount
}

input ANALYTICS__GraphAccountName_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nameSystem: ANALYTICS__NameSystem
  nameSystem_not: ANALYTICS__NameSystem
  nameSystem_in: [ANALYTICS__NameSystem!]
  nameSystem_not_in: [ANALYTICS__NameSystem!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  graphAccount: String
  graphAccount_not: String
  graphAccount_gt: String
  graphAccount_lt: String
  graphAccount_gte: String
  graphAccount_lte: String
  graphAccount_in: [String!]
  graphAccount_not_in: [String!]
  graphAccount_contains: String
  graphAccount_contains_nocase: String
  graphAccount_not_contains: String
  graphAccount_not_contains_nocase: String
  graphAccount_starts_with: String
  graphAccount_starts_with_nocase: String
  graphAccount_not_starts_with: String
  graphAccount_not_starts_with_nocase: String
  graphAccount_ends_with: String
  graphAccount_ends_with_nocase: String
  graphAccount_not_ends_with: String
  graphAccount_not_ends_with_nocase: String
  graphAccount_: ANALYTICS__GraphAccount_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__GraphAccountName_orderBy {
  id
  nameSystem
  name
  graphAccount
}

input ANALYTICS__GraphAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  names_: ANALYTICS__GraphAccountName_filter
  defaultName: String
  defaultName_not: String
  defaultName_gt: String
  defaultName_lt: String
  defaultName_gte: String
  defaultName_lte: String
  defaultName_in: [String!]
  defaultName_not_in: [String!]
  defaultName_contains: String
  defaultName_contains_nocase: String
  defaultName_not_contains: String
  defaultName_not_contains_nocase: String
  defaultName_starts_with: String
  defaultName_starts_with_nocase: String
  defaultName_not_starts_with: String
  defaultName_not_starts_with_nocase: String
  defaultName_ends_with: String
  defaultName_ends_with_nocase: String
  defaultName_not_ends_with: String
  defaultName_not_ends_with_nocase: String
  defaultName_: ANALYTICS__GraphAccountName_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  isOrganization: Boolean
  isOrganization_not: Boolean
  isOrganization_in: [Boolean!]
  isOrganization_not_in: [Boolean!]
  metadataHash: ANALYTICS__Bytes
  metadataHash_not: ANALYTICS__Bytes
  metadataHash_gt: ANALYTICS__Bytes
  metadataHash_lt: ANALYTICS__Bytes
  metadataHash_gte: ANALYTICS__Bytes
  metadataHash_lte: ANALYTICS__Bytes
  metadataHash_in: [ANALYTICS__Bytes!]
  metadataHash_not_in: [ANALYTICS__Bytes!]
  metadataHash_contains: ANALYTICS__Bytes
  metadataHash_not_contains: ANALYTICS__Bytes
  codeRepository: String
  codeRepository_not: String
  codeRepository_gt: String
  codeRepository_lt: String
  codeRepository_gte: String
  codeRepository_lte: String
  codeRepository_in: [String!]
  codeRepository_not_in: [String!]
  codeRepository_contains: String
  codeRepository_contains_nocase: String
  codeRepository_not_contains: String
  codeRepository_not_contains_nocase: String
  codeRepository_starts_with: String
  codeRepository_starts_with_nocase: String
  codeRepository_not_starts_with: String
  codeRepository_not_starts_with_nocase: String
  codeRepository_ends_with: String
  codeRepository_ends_with_nocase: String
  codeRepository_not_ends_with: String
  codeRepository_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  operatorOf_: ANALYTICS__GraphAccount_filter
  operators: [String!]
  operators_not: [String!]
  operators_contains: [String!]
  operators_contains_nocase: [String!]
  operators_not_contains: [String!]
  operators_not_contains_nocase: [String!]
  operators_: ANALYTICS__GraphAccount_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  curationApproval: BigInt
  curationApproval_not: BigInt
  curationApproval_gt: BigInt
  curationApproval_lt: BigInt
  curationApproval_gte: BigInt
  curationApproval_lte: BigInt
  curationApproval_in: [BigInt!]
  curationApproval_not_in: [BigInt!]
  stakingApproval: BigInt
  stakingApproval_not: BigInt
  stakingApproval_gt: BigInt
  stakingApproval_lt: BigInt
  stakingApproval_gte: BigInt
  stakingApproval_lte: BigInt
  stakingApproval_in: [BigInt!]
  stakingApproval_not_in: [BigInt!]
  gnsApproval: BigInt
  gnsApproval_not: BigInt
  gnsApproval_gt: BigInt
  gnsApproval_lt: BigInt
  gnsApproval_gte: BigInt
  gnsApproval_lte: BigInt
  gnsApproval_in: [BigInt!]
  gnsApproval_not_in: [BigInt!]
  subgraphs_: ANALYTICS__Subgraph_filter
  developerCreatedAt: Int
  developerCreatedAt_not: Int
  developerCreatedAt_gt: Int
  developerCreatedAt_lt: Int
  developerCreatedAt_gte: Int
  developerCreatedAt_lte: Int
  developerCreatedAt_in: [Int!]
  developerCreatedAt_not_in: [Int!]
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: ANALYTICS__Curator_filter
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  nameSignalTransactions_: ANALYTICS__NameSignalTransaction_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__GraphAccount_orderBy {
  id
  names
  defaultName
  createdAt
  defaultDisplayName
  isOrganization
  metadataHash
  codeRepository
  description
  image
  website
  displayName
  operatorOf
  operators
  balance
  curationApproval
  stakingApproval
  gnsApproval
  subgraphs
  developerCreatedAt
  curator
  indexer
  delegator
  nameSignalTransactions
}

"""
Graph Network global parameters and contract addresses

"""
type ANALYTICS__GraphNetwork {
  """ID is set to 1"""
  id: ID!
  """
  Ratio of max staked delegation tokens to indexers stake that earns rewards
  """
  delegationRatio: Int!
  """The total amount of GRT staked in the staking contract"""
  totalTokensStaked: BigInt!
  """
  NOT IMPLEMENTED - Total tokens that are settled and waiting to be claimed
  """
  totalTokensClaimable: BigInt!
  """
  Total tokens that are currently locked or withdrawable in the network from unstaking
  """
  totalUnstakedTokensLocked: BigInt!
  """Total GRT currently in allocation"""
  totalTokensAllocated: BigInt!
  """Total delegated tokens in the protocol"""
  totalDelegatedTokens: BigInt!
  """Total query fees generated in the network"""
  totalQueryFees: BigInt!
  """Total query fees collected by indexers"""
  totalIndexerQueryFeesCollected: BigInt!
  """Total query fees rebates claimed by indexers"""
  totalIndexerQueryFeeRebates: BigInt!
  """Total query fees rebates claimed by delegators"""
  totalDelegatorQueryFeeRebates: BigInt!
  """Total query fees payed to curators"""
  totalCuratorQueryFees: BigInt!
  """Total protocol taxes applied to the query fees"""
  totalTaxedQueryFees: BigInt!
  """
  Total unclaimed rebates. Includes unclaimed rebates and rebates lost in cobbs douglas 
  """
  totalUnclaimedQueryFeeRebates: BigInt!
  """Total indexing rewards minted"""
  totalIndexingRewards: BigInt!
  """Total indexing rewards minted to Delegators"""
  totalIndexingDelegatorRewards: BigInt!
  """Total indexing rewards minted to Indexers"""
  totalIndexingIndexerRewards: BigInt!
  """The total amount of GRT signalled in the Curation contract"""
  totalTokensSignalled: BigInt!
  """Default reserve ratio for all subgraphs. In parts per million"""
  defaultReserveRatio: Int!
  """Total indexers"""
  indexerCount: Int!
  """Number of indexers that currently have some stake in the protocol"""
  stakedIndexersCount: Int!
  """Total delegators"""
  delegatorCount: Int!
  """Total curators"""
  curatorCount: Int!
  """Total subgraphs"""
  subgraphCount: Int!
  """Total subgraphs"""
  subgraphDeploymentCount: Int!
}

type ANALYTICS__GraphNetworkDailyData {
  """<SUBGRAPH ID>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that the daily data entity tracks"""
  network: ANALYTICS__GraphNetwork!
  """
  [CUMULATIVE] Ratio of max staked delegation tokens to indexers stake that earns rewards
  """
  delegationRatio: Int!
  """[CUMULATIVE] The total amount of GRT staked in the staking contract"""
  totalTokensStaked: BigInt!
  """
  [CUMULATIVE] Total tokens that are currently locked or withdrawable in the network from unstaking
  """
  totalUnstakedTokensLocked: BigInt!
  """[CUMULATIVE] Total GRT currently in allocation"""
  totalTokensAllocated: BigInt!
  """[CUMULATIVE] Total delegated tokens in the protocol"""
  totalDelegatedTokens: BigInt!
  """[CUMULATIVE] Total query fees generated in the network"""
  totalQueryFees: BigInt!
  """[CUMULATIVE] Total query fees collected by indexers"""
  totalIndexerQueryFeesCollected: BigInt!
  """[CUMULATIVE] Total query fees rebates claimed by indexers"""
  totalIndexerQueryFeeRebates: BigInt!
  """[CUMULATIVE] Total query fees rebates claimed by delegators"""
  totalDelegatorQueryFeeRebates: BigInt!
  """[CUMULATIVE] Total query fees payed to curators"""
  totalCuratorQueryFees: BigInt!
  """[CUMULATIVE] Total protocol taxes applied to the query fees"""
  totalTaxedQueryFees: BigInt!
  """
  [CUMULATIVE] Total unclaimed rebates. Includes unclaimed rebates and rebates lost in cobbs douglas 
  """
  totalUnclaimedQueryFeeRebates: BigInt!
  """[CUMULATIVE] Total indexing rewards minted"""
  totalIndexingRewards: BigInt!
  """[CUMULATIVE] Total indexing rewards minted to Delegators"""
  totalIndexingDelegatorRewards: BigInt!
  """[CUMULATIVE] Total indexing rewards minted to Indexers"""
  totalIndexingIndexerRewards: BigInt!
  """
  [CUMULATIVE] The total amount of GRT signalled in the Curation contract
  """
  totalTokensSignalled: BigInt!
  """
  [CUMULATIVE] Default reserve ratio for all subgraphs. In parts per million
  """
  defaultReserveRatio: Int!
  """[CUMULATIVE] Total indexers"""
  indexerCount: Int!
  """
  [CUMULATIVE] Number of indexers that currently have some stake in the protocol
  """
  stakedIndexersCount: Int!
  """[CUMULATIVE] Total delegators"""
  delegatorCount: Int!
  """[CUMULATIVE] Total curators"""
  curatorCount: Int!
  """[CUMULATIVE] Total subgraphs"""
  subgraphCount: Int!
  """[CUMULATIVE] Total subgraphs"""
  subgraphDeploymentCount: Int!
}

input ANALYTICS__GraphNetworkDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  network_: ANALYTICS__GraphNetwork_filter
  delegationRatio: Int
  delegationRatio_not: Int
  delegationRatio_gt: Int
  delegationRatio_lt: Int
  delegationRatio_gte: Int
  delegationRatio_lte: Int
  delegationRatio_in: [Int!]
  delegationRatio_not_in: [Int!]
  totalTokensStaked: BigInt
  totalTokensStaked_not: BigInt
  totalTokensStaked_gt: BigInt
  totalTokensStaked_lt: BigInt
  totalTokensStaked_gte: BigInt
  totalTokensStaked_lte: BigInt
  totalTokensStaked_in: [BigInt!]
  totalTokensStaked_not_in: [BigInt!]
  totalUnstakedTokensLocked: BigInt
  totalUnstakedTokensLocked_not: BigInt
  totalUnstakedTokensLocked_gt: BigInt
  totalUnstakedTokensLocked_lt: BigInt
  totalUnstakedTokensLocked_gte: BigInt
  totalUnstakedTokensLocked_lte: BigInt
  totalUnstakedTokensLocked_in: [BigInt!]
  totalUnstakedTokensLocked_not_in: [BigInt!]
  totalTokensAllocated: BigInt
  totalTokensAllocated_not: BigInt
  totalTokensAllocated_gt: BigInt
  totalTokensAllocated_lt: BigInt
  totalTokensAllocated_gte: BigInt
  totalTokensAllocated_lte: BigInt
  totalTokensAllocated_in: [BigInt!]
  totalTokensAllocated_not_in: [BigInt!]
  totalDelegatedTokens: BigInt
  totalDelegatedTokens_not: BigInt
  totalDelegatedTokens_gt: BigInt
  totalDelegatedTokens_lt: BigInt
  totalDelegatedTokens_gte: BigInt
  totalDelegatedTokens_lte: BigInt
  totalDelegatedTokens_in: [BigInt!]
  totalDelegatedTokens_not_in: [BigInt!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  totalIndexerQueryFeesCollected: BigInt
  totalIndexerQueryFeesCollected_not: BigInt
  totalIndexerQueryFeesCollected_gt: BigInt
  totalIndexerQueryFeesCollected_lt: BigInt
  totalIndexerQueryFeesCollected_gte: BigInt
  totalIndexerQueryFeesCollected_lte: BigInt
  totalIndexerQueryFeesCollected_in: [BigInt!]
  totalIndexerQueryFeesCollected_not_in: [BigInt!]
  totalIndexerQueryFeeRebates: BigInt
  totalIndexerQueryFeeRebates_not: BigInt
  totalIndexerQueryFeeRebates_gt: BigInt
  totalIndexerQueryFeeRebates_lt: BigInt
  totalIndexerQueryFeeRebates_gte: BigInt
  totalIndexerQueryFeeRebates_lte: BigInt
  totalIndexerQueryFeeRebates_in: [BigInt!]
  totalIndexerQueryFeeRebates_not_in: [BigInt!]
  totalDelegatorQueryFeeRebates: BigInt
  totalDelegatorQueryFeeRebates_not: BigInt
  totalDelegatorQueryFeeRebates_gt: BigInt
  totalDelegatorQueryFeeRebates_lt: BigInt
  totalDelegatorQueryFeeRebates_gte: BigInt
  totalDelegatorQueryFeeRebates_lte: BigInt
  totalDelegatorQueryFeeRebates_in: [BigInt!]
  totalDelegatorQueryFeeRebates_not_in: [BigInt!]
  totalCuratorQueryFees: BigInt
  totalCuratorQueryFees_not: BigInt
  totalCuratorQueryFees_gt: BigInt
  totalCuratorQueryFees_lt: BigInt
  totalCuratorQueryFees_gte: BigInt
  totalCuratorQueryFees_lte: BigInt
  totalCuratorQueryFees_in: [BigInt!]
  totalCuratorQueryFees_not_in: [BigInt!]
  totalTaxedQueryFees: BigInt
  totalTaxedQueryFees_not: BigInt
  totalTaxedQueryFees_gt: BigInt
  totalTaxedQueryFees_lt: BigInt
  totalTaxedQueryFees_gte: BigInt
  totalTaxedQueryFees_lte: BigInt
  totalTaxedQueryFees_in: [BigInt!]
  totalTaxedQueryFees_not_in: [BigInt!]
  totalUnclaimedQueryFeeRebates: BigInt
  totalUnclaimedQueryFeeRebates_not: BigInt
  totalUnclaimedQueryFeeRebates_gt: BigInt
  totalUnclaimedQueryFeeRebates_lt: BigInt
  totalUnclaimedQueryFeeRebates_gte: BigInt
  totalUnclaimedQueryFeeRebates_lte: BigInt
  totalUnclaimedQueryFeeRebates_in: [BigInt!]
  totalUnclaimedQueryFeeRebates_not_in: [BigInt!]
  totalIndexingRewards: BigInt
  totalIndexingRewards_not: BigInt
  totalIndexingRewards_gt: BigInt
  totalIndexingRewards_lt: BigInt
  totalIndexingRewards_gte: BigInt
  totalIndexingRewards_lte: BigInt
  totalIndexingRewards_in: [BigInt!]
  totalIndexingRewards_not_in: [BigInt!]
  totalIndexingDelegatorRewards: BigInt
  totalIndexingDelegatorRewards_not: BigInt
  totalIndexingDelegatorRewards_gt: BigInt
  totalIndexingDelegatorRewards_lt: BigInt
  totalIndexingDelegatorRewards_gte: BigInt
  totalIndexingDelegatorRewards_lte: BigInt
  totalIndexingDelegatorRewards_in: [BigInt!]
  totalIndexingDelegatorRewards_not_in: [BigInt!]
  totalIndexingIndexerRewards: BigInt
  totalIndexingIndexerRewards_not: BigInt
  totalIndexingIndexerRewards_gt: BigInt
  totalIndexingIndexerRewards_lt: BigInt
  totalIndexingIndexerRewards_gte: BigInt
  totalIndexingIndexerRewards_lte: BigInt
  totalIndexingIndexerRewards_in: [BigInt!]
  totalIndexingIndexerRewards_not_in: [BigInt!]
  totalTokensSignalled: BigInt
  totalTokensSignalled_not: BigInt
  totalTokensSignalled_gt: BigInt
  totalTokensSignalled_lt: BigInt
  totalTokensSignalled_gte: BigInt
  totalTokensSignalled_lte: BigInt
  totalTokensSignalled_in: [BigInt!]
  totalTokensSignalled_not_in: [BigInt!]
  defaultReserveRatio: Int
  defaultReserveRatio_not: Int
  defaultReserveRatio_gt: Int
  defaultReserveRatio_lt: Int
  defaultReserveRatio_gte: Int
  defaultReserveRatio_lte: Int
  defaultReserveRatio_in: [Int!]
  defaultReserveRatio_not_in: [Int!]
  indexerCount: Int
  indexerCount_not: Int
  indexerCount_gt: Int
  indexerCount_lt: Int
  indexerCount_gte: Int
  indexerCount_lte: Int
  indexerCount_in: [Int!]
  indexerCount_not_in: [Int!]
  stakedIndexersCount: Int
  stakedIndexersCount_not: Int
  stakedIndexersCount_gt: Int
  stakedIndexersCount_lt: Int
  stakedIndexersCount_gte: Int
  stakedIndexersCount_lte: Int
  stakedIndexersCount_in: [Int!]
  stakedIndexersCount_not_in: [Int!]
  delegatorCount: Int
  delegatorCount_not: Int
  delegatorCount_gt: Int
  delegatorCount_lt: Int
  delegatorCount_gte: Int
  delegatorCount_lte: Int
  delegatorCount_in: [Int!]
  delegatorCount_not_in: [Int!]
  curatorCount: Int
  curatorCount_not: Int
  curatorCount_gt: Int
  curatorCount_lt: Int
  curatorCount_gte: Int
  curatorCount_lte: Int
  curatorCount_in: [Int!]
  curatorCount_not_in: [Int!]
  subgraphCount: Int
  subgraphCount_not: Int
  subgraphCount_gt: Int
  subgraphCount_lt: Int
  subgraphCount_gte: Int
  subgraphCount_lte: Int
  subgraphCount_in: [Int!]
  subgraphCount_not_in: [Int!]
  subgraphDeploymentCount: Int
  subgraphDeploymentCount_not: Int
  subgraphDeploymentCount_gt: Int
  subgraphDeploymentCount_lt: Int
  subgraphDeploymentCount_gte: Int
  subgraphDeploymentCount_lte: Int
  subgraphDeploymentCount_in: [Int!]
  subgraphDeploymentCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__GraphNetworkDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  network
  delegationRatio
  totalTokensStaked
  totalUnstakedTokensLocked
  totalTokensAllocated
  totalDelegatedTokens
  totalQueryFees
  totalIndexerQueryFeesCollected
  totalIndexerQueryFeeRebates
  totalDelegatorQueryFeeRebates
  totalCuratorQueryFees
  totalTaxedQueryFees
  totalUnclaimedQueryFeeRebates
  totalIndexingRewards
  totalIndexingDelegatorRewards
  totalIndexingIndexerRewards
  totalTokensSignalled
  defaultReserveRatio
  indexerCount
  stakedIndexersCount
  delegatorCount
  curatorCount
  subgraphCount
  subgraphDeploymentCount
}

input ANALYTICS__GraphNetwork_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  delegationRatio: Int
  delegationRatio_not: Int
  delegationRatio_gt: Int
  delegationRatio_lt: Int
  delegationRatio_gte: Int
  delegationRatio_lte: Int
  delegationRatio_in: [Int!]
  delegationRatio_not_in: [Int!]
  totalTokensStaked: BigInt
  totalTokensStaked_not: BigInt
  totalTokensStaked_gt: BigInt
  totalTokensStaked_lt: BigInt
  totalTokensStaked_gte: BigInt
  totalTokensStaked_lte: BigInt
  totalTokensStaked_in: [BigInt!]
  totalTokensStaked_not_in: [BigInt!]
  totalTokensClaimable: BigInt
  totalTokensClaimable_not: BigInt
  totalTokensClaimable_gt: BigInt
  totalTokensClaimable_lt: BigInt
  totalTokensClaimable_gte: BigInt
  totalTokensClaimable_lte: BigInt
  totalTokensClaimable_in: [BigInt!]
  totalTokensClaimable_not_in: [BigInt!]
  totalUnstakedTokensLocked: BigInt
  totalUnstakedTokensLocked_not: BigInt
  totalUnstakedTokensLocked_gt: BigInt
  totalUnstakedTokensLocked_lt: BigInt
  totalUnstakedTokensLocked_gte: BigInt
  totalUnstakedTokensLocked_lte: BigInt
  totalUnstakedTokensLocked_in: [BigInt!]
  totalUnstakedTokensLocked_not_in: [BigInt!]
  totalTokensAllocated: BigInt
  totalTokensAllocated_not: BigInt
  totalTokensAllocated_gt: BigInt
  totalTokensAllocated_lt: BigInt
  totalTokensAllocated_gte: BigInt
  totalTokensAllocated_lte: BigInt
  totalTokensAllocated_in: [BigInt!]
  totalTokensAllocated_not_in: [BigInt!]
  totalDelegatedTokens: BigInt
  totalDelegatedTokens_not: BigInt
  totalDelegatedTokens_gt: BigInt
  totalDelegatedTokens_lt: BigInt
  totalDelegatedTokens_gte: BigInt
  totalDelegatedTokens_lte: BigInt
  totalDelegatedTokens_in: [BigInt!]
  totalDelegatedTokens_not_in: [BigInt!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  totalIndexerQueryFeesCollected: BigInt
  totalIndexerQueryFeesCollected_not: BigInt
  totalIndexerQueryFeesCollected_gt: BigInt
  totalIndexerQueryFeesCollected_lt: BigInt
  totalIndexerQueryFeesCollected_gte: BigInt
  totalIndexerQueryFeesCollected_lte: BigInt
  totalIndexerQueryFeesCollected_in: [BigInt!]
  totalIndexerQueryFeesCollected_not_in: [BigInt!]
  totalIndexerQueryFeeRebates: BigInt
  totalIndexerQueryFeeRebates_not: BigInt
  totalIndexerQueryFeeRebates_gt: BigInt
  totalIndexerQueryFeeRebates_lt: BigInt
  totalIndexerQueryFeeRebates_gte: BigInt
  totalIndexerQueryFeeRebates_lte: BigInt
  totalIndexerQueryFeeRebates_in: [BigInt!]
  totalIndexerQueryFeeRebates_not_in: [BigInt!]
  totalDelegatorQueryFeeRebates: BigInt
  totalDelegatorQueryFeeRebates_not: BigInt
  totalDelegatorQueryFeeRebates_gt: BigInt
  totalDelegatorQueryFeeRebates_lt: BigInt
  totalDelegatorQueryFeeRebates_gte: BigInt
  totalDelegatorQueryFeeRebates_lte: BigInt
  totalDelegatorQueryFeeRebates_in: [BigInt!]
  totalDelegatorQueryFeeRebates_not_in: [BigInt!]
  totalCuratorQueryFees: BigInt
  totalCuratorQueryFees_not: BigInt
  totalCuratorQueryFees_gt: BigInt
  totalCuratorQueryFees_lt: BigInt
  totalCuratorQueryFees_gte: BigInt
  totalCuratorQueryFees_lte: BigInt
  totalCuratorQueryFees_in: [BigInt!]
  totalCuratorQueryFees_not_in: [BigInt!]
  totalTaxedQueryFees: BigInt
  totalTaxedQueryFees_not: BigInt
  totalTaxedQueryFees_gt: BigInt
  totalTaxedQueryFees_lt: BigInt
  totalTaxedQueryFees_gte: BigInt
  totalTaxedQueryFees_lte: BigInt
  totalTaxedQueryFees_in: [BigInt!]
  totalTaxedQueryFees_not_in: [BigInt!]
  totalUnclaimedQueryFeeRebates: BigInt
  totalUnclaimedQueryFeeRebates_not: BigInt
  totalUnclaimedQueryFeeRebates_gt: BigInt
  totalUnclaimedQueryFeeRebates_lt: BigInt
  totalUnclaimedQueryFeeRebates_gte: BigInt
  totalUnclaimedQueryFeeRebates_lte: BigInt
  totalUnclaimedQueryFeeRebates_in: [BigInt!]
  totalUnclaimedQueryFeeRebates_not_in: [BigInt!]
  totalIndexingRewards: BigInt
  totalIndexingRewards_not: BigInt
  totalIndexingRewards_gt: BigInt
  totalIndexingRewards_lt: BigInt
  totalIndexingRewards_gte: BigInt
  totalIndexingRewards_lte: BigInt
  totalIndexingRewards_in: [BigInt!]
  totalIndexingRewards_not_in: [BigInt!]
  totalIndexingDelegatorRewards: BigInt
  totalIndexingDelegatorRewards_not: BigInt
  totalIndexingDelegatorRewards_gt: BigInt
  totalIndexingDelegatorRewards_lt: BigInt
  totalIndexingDelegatorRewards_gte: BigInt
  totalIndexingDelegatorRewards_lte: BigInt
  totalIndexingDelegatorRewards_in: [BigInt!]
  totalIndexingDelegatorRewards_not_in: [BigInt!]
  totalIndexingIndexerRewards: BigInt
  totalIndexingIndexerRewards_not: BigInt
  totalIndexingIndexerRewards_gt: BigInt
  totalIndexingIndexerRewards_lt: BigInt
  totalIndexingIndexerRewards_gte: BigInt
  totalIndexingIndexerRewards_lte: BigInt
  totalIndexingIndexerRewards_in: [BigInt!]
  totalIndexingIndexerRewards_not_in: [BigInt!]
  totalTokensSignalled: BigInt
  totalTokensSignalled_not: BigInt
  totalTokensSignalled_gt: BigInt
  totalTokensSignalled_lt: BigInt
  totalTokensSignalled_gte: BigInt
  totalTokensSignalled_lte: BigInt
  totalTokensSignalled_in: [BigInt!]
  totalTokensSignalled_not_in: [BigInt!]
  defaultReserveRatio: Int
  defaultReserveRatio_not: Int
  defaultReserveRatio_gt: Int
  defaultReserveRatio_lt: Int
  defaultReserveRatio_gte: Int
  defaultReserveRatio_lte: Int
  defaultReserveRatio_in: [Int!]
  defaultReserveRatio_not_in: [Int!]
  indexerCount: Int
  indexerCount_not: Int
  indexerCount_gt: Int
  indexerCount_lt: Int
  indexerCount_gte: Int
  indexerCount_lte: Int
  indexerCount_in: [Int!]
  indexerCount_not_in: [Int!]
  stakedIndexersCount: Int
  stakedIndexersCount_not: Int
  stakedIndexersCount_gt: Int
  stakedIndexersCount_lt: Int
  stakedIndexersCount_gte: Int
  stakedIndexersCount_lte: Int
  stakedIndexersCount_in: [Int!]
  stakedIndexersCount_not_in: [Int!]
  delegatorCount: Int
  delegatorCount_not: Int
  delegatorCount_gt: Int
  delegatorCount_lt: Int
  delegatorCount_gte: Int
  delegatorCount_lte: Int
  delegatorCount_in: [Int!]
  delegatorCount_not_in: [Int!]
  curatorCount: Int
  curatorCount_not: Int
  curatorCount_gt: Int
  curatorCount_lt: Int
  curatorCount_gte: Int
  curatorCount_lte: Int
  curatorCount_in: [Int!]
  curatorCount_not_in: [Int!]
  subgraphCount: Int
  subgraphCount_not: Int
  subgraphCount_gt: Int
  subgraphCount_lt: Int
  subgraphCount_gte: Int
  subgraphCount_lte: Int
  subgraphCount_in: [Int!]
  subgraphCount_not_in: [Int!]
  subgraphDeploymentCount: Int
  subgraphDeploymentCount_not: Int
  subgraphDeploymentCount_gt: Int
  subgraphDeploymentCount_lt: Int
  subgraphDeploymentCount_gte: Int
  subgraphDeploymentCount_lte: Int
  subgraphDeploymentCount_in: [Int!]
  subgraphDeploymentCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__GraphNetwork_orderBy {
  id
  delegationRatio
  totalTokensStaked
  totalTokensClaimable
  totalUnstakedTokensLocked
  totalTokensAllocated
  totalDelegatedTokens
  totalQueryFees
  totalIndexerQueryFeesCollected
  totalIndexerQueryFeeRebates
  totalDelegatorQueryFeeRebates
  totalCuratorQueryFees
  totalTaxedQueryFees
  totalUnclaimedQueryFeeRebates
  totalIndexingRewards
  totalIndexingDelegatorRewards
  totalIndexingIndexerRewards
  totalTokensSignalled
  defaultReserveRatio
  indexerCount
  stakedIndexersCount
  delegatorCount
  curatorCount
  subgraphCount
  subgraphDeploymentCount
}

"""
Metadata for the Indexer along with parameters and staking data

"""
type ANALYTICS__Indexer {
  """Eth address of Indexer"""
  id: ID!
  """Time this indexer was created"""
  createdAt: Int!
  """Service registry URL for the indexer"""
  url: String
  """
  Geohash of the indexer. Shows where their indexer is located in the world
  """
  geoHash: String
  account: ANALYTICS__GraphAccount!
  defaultDisplayName: String
  """
  CURRENT tokens staked in the protocol. Decreases on withdraw, not on lock
  """
  stakedTokens: BigInt!
  """CURRENT  tokens allocated on all subgraphs"""
  allocatedTokens: BigInt!
  """NOT IMPLEMENTED - Tokens that have been unstaked and withdrawn"""
  unstakedTokens: BigInt!
  """CURRENT tokens locked"""
  lockedTokens: BigInt!
  """The block when the Indexers tokens unlock"""
  tokensLockedUntil: Int!
  """Active allocations of stake for this Indexer"""
  allocations(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Allocation_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Allocation_filter): [ANALYTICS__Allocation!]!
  """All allocations of stake for this Indexer (i.e. closed and active)"""
  totalAllocations(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Allocation_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Allocation_filter): [ANALYTICS__Allocation!]!
  """Number of active allocations of stake for this Indexer"""
  allocationCount: Int!
  """All allocations for this Indexer (i.e. closed and active)"""
  totalAllocationCount: BigInt!
  """Total query fees collected. Includes the portion given to delegators"""
  queryFeesCollected: BigInt!
  """
  Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators
  """
  queryFeeRebates: BigInt!
  """
  Total indexing rewards earned by this indexer from inflation. Including delegation rewards
  """
  rewardsEarned: BigInt!
  """The total amount of indexing rewards the indexer kept"""
  indexerIndexingRewards: BigInt!
  """The total amount of indexing rewards given to delegators"""
  delegatorIndexingRewards: BigInt!
  """
  Percentage of indexers' own rewards received in relation to its own stake. 1 (100%) means that the indexer is receiving the exact amount that is generated by his own stake
  """
  indexerRewardsOwnGenerationRatio: ANALYTICS__BigDecimal!
  """Amount of delegated tokens that can be eligible for rewards"""
  delegatedCapacity: BigInt!
  """Total token capacity = delegatedCapacity + stakedTokens"""
  tokenCapacity: BigInt!
  """
  Stake available to earn rewards. tokenCapacity - allocationTokens - lockedTokens
  """
  availableStake: BigInt!
  """Delegators to this Indexer"""
  delegators(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__DelegatedStake_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__DelegatedStake_filter): [ANALYTICS__DelegatedStake!]!
  """CURRENT tokens delegated to the indexer"""
  delegatedTokens: BigInt!
  """
  Ratio between the amount of the indexers own stake over the total usable stake.
  """
  ownStakeRatio: ANALYTICS__BigDecimal!
  """
  Ratio between the amount of delegated stake over the total usable stake.
  """
  delegatedStakeRatio: ANALYTICS__BigDecimal!
  """Total shares of the delegator pool"""
  delegatorShares: BigInt!
  """Exchange rate of of tokens received for each share"""
  delegationExchangeRate: ANALYTICS__BigDecimal!
  """
  The percent of indexing rewards generated by the total stake that the Indexer keeps for itself. In parts per million
  """
  indexingRewardCut: Int!
  """
  The percent of indexing rewards generated by the delegated stake that the Indexer keeps for itself
  """
  indexingRewardEffectiveCut: ANALYTICS__BigDecimal!
  """
  The percent of reward dilution delegators experience because of overdelegation. Overdelegated stake can't be used to generate rewards but still gets accounted while distributing the generated rewards. This causes dilution of the rewards for the rest of the pool.
  """
  overDelegationDilution: ANALYTICS__BigDecimal!
  """The total amount of query fees given to delegators"""
  delegatorQueryFees: BigInt!
  """
  The percent of query rebate rewards the Indexer keeps for itself. In parts per million
  """
  queryFeeCut: Int!
  """
  The percent of query rebate rewards generated by the delegated stake that the Indexer keeps for itself
  """
  queryFeeEffectiveCut: ANALYTICS__BigDecimal!
  """
  Amount of blocks a delegator chooses for the waiting period for changing their params
  """
  delegatorParameterCooldown: Int!
  """Block number for the last time the delegator updated their parameters"""
  lastDelegationParameterUpdate: Int!
  """
  Count of how many times this indexer has been forced to close an allocation
  """
  forcedClosures: Int!
  delegatorsCount: BigInt!
  dailyData(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__IndexerDailyData_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__IndexerDailyData_filter): [ANALYTICS__IndexerDailyData!]!
}

type ANALYTICS__IndexerDailyData {
  """<INDEXER ADDRESS>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that this daily data tracks"""
  indexer: ANALYTICS__Indexer!
  """[CURRENT] Value of stakedTokens for that day"""
  stakedTokens: BigInt!
  """[CURRENT] Value of delegatedTokens for that day"""
  delegatedTokens: BigInt!
  """[CURRENT] Value of allocatedTokens for that day"""
  allocatedTokens: BigInt!
  """[CURRENT] Value of availableStake for that day"""
  availableStake: BigInt!
  """
  [CURRENT] Amount of delegated tokens moved that day. Negative means more tokens were undelegated than delegated
  """
  netDailyDelegatedTokens: BigInt!
  """
  [CUMULATIVE] Total amount of query fees collected by the indexer and sent to the rebate pool
  """
  queryFeesCollected: BigInt!
  """
  [CUMULATIVE]Total amount of query fees that the indexer got from rebates
  """
  queryFeeRebates: BigInt!
  """
  [CUMULATIVE] Total amount of query fees that the delegation pool received
  """
  delegatorQueryFees: BigInt!
  """
  [CUMULATIVE] Total amount of indexing rewards generated on this indexer
  """
  totalIndexingRewards: BigInt!
  """[CUMULATIVE] Total amount of indexing rewards that the indexer kept"""
  indexerIndexingRewards: BigInt!
  """
  [CUMULATIVE] Total amount of indexing rewards sent to the delegation pool
  """
  delegatorIndexingRewards: BigInt!
  """
  [CURRENT] Exchange rate for shares of the delegation pool for this specific day
  """
  delegationExchangeRate: ANALYTICS__BigDecimal!
  delegatorsCount: BigInt!
}

input ANALYTICS__IndexerDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  delegatedTokens: BigInt
  delegatedTokens_not: BigInt
  delegatedTokens_gt: BigInt
  delegatedTokens_lt: BigInt
  delegatedTokens_gte: BigInt
  delegatedTokens_lte: BigInt
  delegatedTokens_in: [BigInt!]
  delegatedTokens_not_in: [BigInt!]
  allocatedTokens: BigInt
  allocatedTokens_not: BigInt
  allocatedTokens_gt: BigInt
  allocatedTokens_lt: BigInt
  allocatedTokens_gte: BigInt
  allocatedTokens_lte: BigInt
  allocatedTokens_in: [BigInt!]
  allocatedTokens_not_in: [BigInt!]
  availableStake: BigInt
  availableStake_not: BigInt
  availableStake_gt: BigInt
  availableStake_lt: BigInt
  availableStake_gte: BigInt
  availableStake_lte: BigInt
  availableStake_in: [BigInt!]
  availableStake_not_in: [BigInt!]
  netDailyDelegatedTokens: BigInt
  netDailyDelegatedTokens_not: BigInt
  netDailyDelegatedTokens_gt: BigInt
  netDailyDelegatedTokens_lt: BigInt
  netDailyDelegatedTokens_gte: BigInt
  netDailyDelegatedTokens_lte: BigInt
  netDailyDelegatedTokens_in: [BigInt!]
  netDailyDelegatedTokens_not_in: [BigInt!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  delegatorQueryFees: BigInt
  delegatorQueryFees_not: BigInt
  delegatorQueryFees_gt: BigInt
  delegatorQueryFees_lt: BigInt
  delegatorQueryFees_gte: BigInt
  delegatorQueryFees_lte: BigInt
  delegatorQueryFees_in: [BigInt!]
  delegatorQueryFees_not_in: [BigInt!]
  totalIndexingRewards: BigInt
  totalIndexingRewards_not: BigInt
  totalIndexingRewards_gt: BigInt
  totalIndexingRewards_lt: BigInt
  totalIndexingRewards_gte: BigInt
  totalIndexingRewards_lte: BigInt
  totalIndexingRewards_in: [BigInt!]
  totalIndexingRewards_not_in: [BigInt!]
  indexerIndexingRewards: BigInt
  indexerIndexingRewards_not: BigInt
  indexerIndexingRewards_gt: BigInt
  indexerIndexingRewards_lt: BigInt
  indexerIndexingRewards_gte: BigInt
  indexerIndexingRewards_lte: BigInt
  indexerIndexingRewards_in: [BigInt!]
  indexerIndexingRewards_not_in: [BigInt!]
  delegatorIndexingRewards: BigInt
  delegatorIndexingRewards_not: BigInt
  delegatorIndexingRewards_gt: BigInt
  delegatorIndexingRewards_lt: BigInt
  delegatorIndexingRewards_gte: BigInt
  delegatorIndexingRewards_lte: BigInt
  delegatorIndexingRewards_in: [BigInt!]
  delegatorIndexingRewards_not_in: [BigInt!]
  delegationExchangeRate: ANALYTICS__BigDecimal
  delegationExchangeRate_not: ANALYTICS__BigDecimal
  delegationExchangeRate_gt: ANALYTICS__BigDecimal
  delegationExchangeRate_lt: ANALYTICS__BigDecimal
  delegationExchangeRate_gte: ANALYTICS__BigDecimal
  delegationExchangeRate_lte: ANALYTICS__BigDecimal
  delegationExchangeRate_in: [ANALYTICS__BigDecimal!]
  delegationExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  delegatorsCount: BigInt
  delegatorsCount_not: BigInt
  delegatorsCount_gt: BigInt
  delegatorsCount_lt: BigInt
  delegatorsCount_gte: BigInt
  delegatorsCount_lte: BigInt
  delegatorsCount_in: [BigInt!]
  delegatorsCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__IndexerDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  indexer
  stakedTokens
  delegatedTokens
  allocatedTokens
  availableStake
  netDailyDelegatedTokens
  queryFeesCollected
  queryFeeRebates
  delegatorQueryFees
  totalIndexingRewards
  indexerIndexingRewards
  delegatorIndexingRewards
  delegationExchangeRate
  delegatorsCount
}

"""
Analytics

"""
type ANALYTICS__IndexerDelegatedStakeRelation {
  """
  Auxiliary entity to DelegatedStake to make it easier to batch update those delegations
  """
  id: ID!
  """Indexer entity where the delegation resides"""
  indexer: ANALYTICS__Indexer!
  """Delegator entity owner of said delegation stake"""
  delegator: ANALYTICS__Delegator!
  """DelegatedStake entity that represents the delegation"""
  stake: ANALYTICS__DelegatedStake!
  """
  Whether the delegation is active or not. Useful to avoid updating non-active delegations without deleting the entity.
  """
  active: Boolean!
}

input ANALYTICS__IndexerDelegatedStakeRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: ANALYTICS__Indexer_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: ANALYTICS__Delegator_filter
  stake: String
  stake_not: String
  stake_gt: String
  stake_lt: String
  stake_gte: String
  stake_lte: String
  stake_in: [String!]
  stake_not_in: [String!]
  stake_contains: String
  stake_contains_nocase: String
  stake_not_contains: String
  stake_not_contains_nocase: String
  stake_starts_with: String
  stake_starts_with_nocase: String
  stake_not_starts_with: String
  stake_not_starts_with_nocase: String
  stake_ends_with: String
  stake_ends_with_nocase: String
  stake_not_ends_with: String
  stake_not_ends_with_nocase: String
  stake_: ANALYTICS__DelegatedStake_filter
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__IndexerDelegatedStakeRelation_orderBy {
  id
  indexer
  delegator
  stake
  active
}

input ANALYTICS__Indexer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  url: String
  url_not: String
  url_gt: String
  url_lt: String
  url_gte: String
  url_lte: String
  url_in: [String!]
  url_not_in: [String!]
  url_contains: String
  url_contains_nocase: String
  url_not_contains: String
  url_not_contains_nocase: String
  url_starts_with: String
  url_starts_with_nocase: String
  url_not_starts_with: String
  url_not_starts_with_nocase: String
  url_ends_with: String
  url_ends_with_nocase: String
  url_not_ends_with: String
  url_not_ends_with_nocase: String
  geoHash: String
  geoHash_not: String
  geoHash_gt: String
  geoHash_lt: String
  geoHash_gte: String
  geoHash_lte: String
  geoHash_in: [String!]
  geoHash_not_in: [String!]
  geoHash_contains: String
  geoHash_contains_nocase: String
  geoHash_not_contains: String
  geoHash_not_contains_nocase: String
  geoHash_starts_with: String
  geoHash_starts_with_nocase: String
  geoHash_not_starts_with: String
  geoHash_not_starts_with_nocase: String
  geoHash_ends_with: String
  geoHash_ends_with_nocase: String
  geoHash_not_ends_with: String
  geoHash_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: ANALYTICS__GraphAccount_filter
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  allocatedTokens: BigInt
  allocatedTokens_not: BigInt
  allocatedTokens_gt: BigInt
  allocatedTokens_lt: BigInt
  allocatedTokens_gte: BigInt
  allocatedTokens_lte: BigInt
  allocatedTokens_in: [BigInt!]
  allocatedTokens_not_in: [BigInt!]
  unstakedTokens: BigInt
  unstakedTokens_not: BigInt
  unstakedTokens_gt: BigInt
  unstakedTokens_lt: BigInt
  unstakedTokens_gte: BigInt
  unstakedTokens_lte: BigInt
  unstakedTokens_in: [BigInt!]
  unstakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  tokensLockedUntil: Int
  tokensLockedUntil_not: Int
  tokensLockedUntil_gt: Int
  tokensLockedUntil_lt: Int
  tokensLockedUntil_gte: Int
  tokensLockedUntil_lte: Int
  tokensLockedUntil_in: [Int!]
  tokensLockedUntil_not_in: [Int!]
  allocations_: ANALYTICS__Allocation_filter
  totalAllocations_: ANALYTICS__Allocation_filter
  allocationCount: Int
  allocationCount_not: Int
  allocationCount_gt: Int
  allocationCount_lt: Int
  allocationCount_gte: Int
  allocationCount_lte: Int
  allocationCount_in: [Int!]
  allocationCount_not_in: [Int!]
  totalAllocationCount: BigInt
  totalAllocationCount_not: BigInt
  totalAllocationCount_gt: BigInt
  totalAllocationCount_lt: BigInt
  totalAllocationCount_gte: BigInt
  totalAllocationCount_lte: BigInt
  totalAllocationCount_in: [BigInt!]
  totalAllocationCount_not_in: [BigInt!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  rewardsEarned: BigInt
  rewardsEarned_not: BigInt
  rewardsEarned_gt: BigInt
  rewardsEarned_lt: BigInt
  rewardsEarned_gte: BigInt
  rewardsEarned_lte: BigInt
  rewardsEarned_in: [BigInt!]
  rewardsEarned_not_in: [BigInt!]
  indexerIndexingRewards: BigInt
  indexerIndexingRewards_not: BigInt
  indexerIndexingRewards_gt: BigInt
  indexerIndexingRewards_lt: BigInt
  indexerIndexingRewards_gte: BigInt
  indexerIndexingRewards_lte: BigInt
  indexerIndexingRewards_in: [BigInt!]
  indexerIndexingRewards_not_in: [BigInt!]
  delegatorIndexingRewards: BigInt
  delegatorIndexingRewards_not: BigInt
  delegatorIndexingRewards_gt: BigInt
  delegatorIndexingRewards_lt: BigInt
  delegatorIndexingRewards_gte: BigInt
  delegatorIndexingRewards_lte: BigInt
  delegatorIndexingRewards_in: [BigInt!]
  delegatorIndexingRewards_not_in: [BigInt!]
  indexerRewardsOwnGenerationRatio: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_not: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_gt: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_lt: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_gte: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_lte: ANALYTICS__BigDecimal
  indexerRewardsOwnGenerationRatio_in: [ANALYTICS__BigDecimal!]
  indexerRewardsOwnGenerationRatio_not_in: [ANALYTICS__BigDecimal!]
  delegatedCapacity: BigInt
  delegatedCapacity_not: BigInt
  delegatedCapacity_gt: BigInt
  delegatedCapacity_lt: BigInt
  delegatedCapacity_gte: BigInt
  delegatedCapacity_lte: BigInt
  delegatedCapacity_in: [BigInt!]
  delegatedCapacity_not_in: [BigInt!]
  tokenCapacity: BigInt
  tokenCapacity_not: BigInt
  tokenCapacity_gt: BigInt
  tokenCapacity_lt: BigInt
  tokenCapacity_gte: BigInt
  tokenCapacity_lte: BigInt
  tokenCapacity_in: [BigInt!]
  tokenCapacity_not_in: [BigInt!]
  availableStake: BigInt
  availableStake_not: BigInt
  availableStake_gt: BigInt
  availableStake_lt: BigInt
  availableStake_gte: BigInt
  availableStake_lte: BigInt
  availableStake_in: [BigInt!]
  availableStake_not_in: [BigInt!]
  delegators_: ANALYTICS__DelegatedStake_filter
  delegatedTokens: BigInt
  delegatedTokens_not: BigInt
  delegatedTokens_gt: BigInt
  delegatedTokens_lt: BigInt
  delegatedTokens_gte: BigInt
  delegatedTokens_lte: BigInt
  delegatedTokens_in: [BigInt!]
  delegatedTokens_not_in: [BigInt!]
  ownStakeRatio: ANALYTICS__BigDecimal
  ownStakeRatio_not: ANALYTICS__BigDecimal
  ownStakeRatio_gt: ANALYTICS__BigDecimal
  ownStakeRatio_lt: ANALYTICS__BigDecimal
  ownStakeRatio_gte: ANALYTICS__BigDecimal
  ownStakeRatio_lte: ANALYTICS__BigDecimal
  ownStakeRatio_in: [ANALYTICS__BigDecimal!]
  ownStakeRatio_not_in: [ANALYTICS__BigDecimal!]
  delegatedStakeRatio: ANALYTICS__BigDecimal
  delegatedStakeRatio_not: ANALYTICS__BigDecimal
  delegatedStakeRatio_gt: ANALYTICS__BigDecimal
  delegatedStakeRatio_lt: ANALYTICS__BigDecimal
  delegatedStakeRatio_gte: ANALYTICS__BigDecimal
  delegatedStakeRatio_lte: ANALYTICS__BigDecimal
  delegatedStakeRatio_in: [ANALYTICS__BigDecimal!]
  delegatedStakeRatio_not_in: [ANALYTICS__BigDecimal!]
  delegatorShares: BigInt
  delegatorShares_not: BigInt
  delegatorShares_gt: BigInt
  delegatorShares_lt: BigInt
  delegatorShares_gte: BigInt
  delegatorShares_lte: BigInt
  delegatorShares_in: [BigInt!]
  delegatorShares_not_in: [BigInt!]
  delegationExchangeRate: ANALYTICS__BigDecimal
  delegationExchangeRate_not: ANALYTICS__BigDecimal
  delegationExchangeRate_gt: ANALYTICS__BigDecimal
  delegationExchangeRate_lt: ANALYTICS__BigDecimal
  delegationExchangeRate_gte: ANALYTICS__BigDecimal
  delegationExchangeRate_lte: ANALYTICS__BigDecimal
  delegationExchangeRate_in: [ANALYTICS__BigDecimal!]
  delegationExchangeRate_not_in: [ANALYTICS__BigDecimal!]
  indexingRewardCut: Int
  indexingRewardCut_not: Int
  indexingRewardCut_gt: Int
  indexingRewardCut_lt: Int
  indexingRewardCut_gte: Int
  indexingRewardCut_lte: Int
  indexingRewardCut_in: [Int!]
  indexingRewardCut_not_in: [Int!]
  indexingRewardEffectiveCut: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_not: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_gt: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_lt: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_gte: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_lte: ANALYTICS__BigDecimal
  indexingRewardEffectiveCut_in: [ANALYTICS__BigDecimal!]
  indexingRewardEffectiveCut_not_in: [ANALYTICS__BigDecimal!]
  overDelegationDilution: ANALYTICS__BigDecimal
  overDelegationDilution_not: ANALYTICS__BigDecimal
  overDelegationDilution_gt: ANALYTICS__BigDecimal
  overDelegationDilution_lt: ANALYTICS__BigDecimal
  overDelegationDilution_gte: ANALYTICS__BigDecimal
  overDelegationDilution_lte: ANALYTICS__BigDecimal
  overDelegationDilution_in: [ANALYTICS__BigDecimal!]
  overDelegationDilution_not_in: [ANALYTICS__BigDecimal!]
  delegatorQueryFees: BigInt
  delegatorQueryFees_not: BigInt
  delegatorQueryFees_gt: BigInt
  delegatorQueryFees_lt: BigInt
  delegatorQueryFees_gte: BigInt
  delegatorQueryFees_lte: BigInt
  delegatorQueryFees_in: [BigInt!]
  delegatorQueryFees_not_in: [BigInt!]
  queryFeeCut: Int
  queryFeeCut_not: Int
  queryFeeCut_gt: Int
  queryFeeCut_lt: Int
  queryFeeCut_gte: Int
  queryFeeCut_lte: Int
  queryFeeCut_in: [Int!]
  queryFeeCut_not_in: [Int!]
  queryFeeEffectiveCut: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_not: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_gt: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_lt: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_gte: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_lte: ANALYTICS__BigDecimal
  queryFeeEffectiveCut_in: [ANALYTICS__BigDecimal!]
  queryFeeEffectiveCut_not_in: [ANALYTICS__BigDecimal!]
  delegatorParameterCooldown: Int
  delegatorParameterCooldown_not: Int
  delegatorParameterCooldown_gt: Int
  delegatorParameterCooldown_lt: Int
  delegatorParameterCooldown_gte: Int
  delegatorParameterCooldown_lte: Int
  delegatorParameterCooldown_in: [Int!]
  delegatorParameterCooldown_not_in: [Int!]
  lastDelegationParameterUpdate: Int
  lastDelegationParameterUpdate_not: Int
  lastDelegationParameterUpdate_gt: Int
  lastDelegationParameterUpdate_lt: Int
  lastDelegationParameterUpdate_gte: Int
  lastDelegationParameterUpdate_lte: Int
  lastDelegationParameterUpdate_in: [Int!]
  lastDelegationParameterUpdate_not_in: [Int!]
  forcedClosures: Int
  forcedClosures_not: Int
  forcedClosures_gt: Int
  forcedClosures_lt: Int
  forcedClosures_gte: Int
  forcedClosures_lte: Int
  forcedClosures_in: [Int!]
  forcedClosures_not_in: [Int!]
  delegatorsCount: BigInt
  delegatorsCount_not: BigInt
  delegatorsCount_gt: BigInt
  delegatorsCount_lt: BigInt
  delegatorsCount_gte: BigInt
  delegatorsCount_lte: BigInt
  delegatorsCount_in: [BigInt!]
  delegatorsCount_not_in: [BigInt!]
  dailyData_: ANALYTICS__IndexerDailyData_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Indexer_orderBy {
  id
  createdAt
  url
  geoHash
  account
  defaultDisplayName
  stakedTokens
  allocatedTokens
  unstakedTokens
  lockedTokens
  tokensLockedUntil
  allocations
  totalAllocations
  allocationCount
  totalAllocationCount
  queryFeesCollected
  queryFeeRebates
  rewardsEarned
  indexerIndexingRewards
  delegatorIndexingRewards
  indexerRewardsOwnGenerationRatio
  delegatedCapacity
  tokenCapacity
  availableStake
  delegators
  delegatedTokens
  ownStakeRatio
  delegatedStakeRatio
  delegatorShares
  delegationExchangeRate
  indexingRewardCut
  indexingRewardEffectiveCut
  overDelegationDilution
  delegatorQueryFees
  queryFeeCut
  queryFeeEffectiveCut
  delegatorParameterCooldown
  lastDelegationParameterUpdate
  forcedClosures
  delegatorsCount
  dailyData
}

"""
Curator Name Signal for a single Subgraph

"""
type ANALYTICS__NameSignal {
  """Eth address + subgraph ID"""
  id: ID!
  """Eth address of the curator"""
  curator: ANALYTICS__Curator!
  """Subgraph being signalled"""
  subgraph: ANALYTICS__Subgraph!
  """CUMULATIVE number of tokens the curator has signalled"""
  signalledTokens: BigInt!
  """CUMULATIVE number of tokens the curator has unsignalled"""
  unsignalledTokens: BigInt!
  """Tokens the curator has withdrawn from a deprecated name curve"""
  withdrawnTokens: BigInt!
  """Signal that the curator has from signaling their GRT"""
  nameSignal: BigInt!
  """Block for which the curator last entered or exited the curve"""
  lastNameSignalChange: Int!
  """
  Summation of realized rewards from before the last time the curator entered the curation curve
  """
  realizedRewards: BigInt!
  """Curator average cost basis for this name signal on this subgraph"""
  averageCostBasis: ANALYTICS__BigDecimal!
  """averageCostBasis / nameSignal"""
  averageCostBasisPerSignal: ANALYTICS__BigDecimal!
  entityVersion: Int!
  linkedEntity: ANALYTICS__NameSignal
}

"""
All relevant data for a Name Signal Transaction in The Graph Network

"""
type ANALYTICS__NameSignalTransaction implements ANALYTICS__Transaction {
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  signer: ANALYTICS__GraphAccount!
  type: ANALYTICS__TransactionType!
  """Amount of name signal updated"""
  nameSignal: BigInt!
  """Amount of version signal updated"""
  versionSignal: BigInt!
  """Tokens used"""
  tokens: BigInt!
  """Subgraph where name signal was updated"""
  subgraph: ANALYTICS__Subgraph!
}

input ANALYTICS__NameSignalTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: ANALYTICS__GraphAccount_filter
  type: ANALYTICS__TransactionType
  type_not: ANALYTICS__TransactionType
  type_in: [ANALYTICS__TransactionType!]
  type_not_in: [ANALYTICS__TransactionType!]
  nameSignal: BigInt
  nameSignal_not: BigInt
  nameSignal_gt: BigInt
  nameSignal_lt: BigInt
  nameSignal_gte: BigInt
  nameSignal_lte: BigInt
  nameSignal_in: [BigInt!]
  nameSignal_not_in: [BigInt!]
  versionSignal: BigInt
  versionSignal_not: BigInt
  versionSignal_gt: BigInt
  versionSignal_lt: BigInt
  versionSignal_gte: BigInt
  versionSignal_lte: BigInt
  versionSignal_in: [BigInt!]
  versionSignal_not_in: [BigInt!]
  tokens: BigInt
  tokens_not: BigInt
  tokens_gt: BigInt
  tokens_lt: BigInt
  tokens_gte: BigInt
  tokens_lte: BigInt
  tokens_in: [BigInt!]
  tokens_not_in: [BigInt!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: ANALYTICS__Subgraph_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__NameSignalTransaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
  nameSignal
  versionSignal
  tokens
  subgraph
}

input ANALYTICS__NameSignal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: ANALYTICS__Curator_filter
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: ANALYTICS__Subgraph_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  withdrawnTokens: BigInt
  withdrawnTokens_not: BigInt
  withdrawnTokens_gt: BigInt
  withdrawnTokens_lt: BigInt
  withdrawnTokens_gte: BigInt
  withdrawnTokens_lte: BigInt
  withdrawnTokens_in: [BigInt!]
  withdrawnTokens_not_in: [BigInt!]
  nameSignal: BigInt
  nameSignal_not: BigInt
  nameSignal_gt: BigInt
  nameSignal_lt: BigInt
  nameSignal_gte: BigInt
  nameSignal_lte: BigInt
  nameSignal_in: [BigInt!]
  nameSignal_not_in: [BigInt!]
  lastNameSignalChange: Int
  lastNameSignalChange_not: Int
  lastNameSignalChange_gt: Int
  lastNameSignalChange_lt: Int
  lastNameSignalChange_gte: Int
  lastNameSignalChange_lte: Int
  lastNameSignalChange_in: [Int!]
  lastNameSignalChange_not_in: [Int!]
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  averageCostBasis: ANALYTICS__BigDecimal
  averageCostBasis_not: ANALYTICS__BigDecimal
  averageCostBasis_gt: ANALYTICS__BigDecimal
  averageCostBasis_lt: ANALYTICS__BigDecimal
  averageCostBasis_gte: ANALYTICS__BigDecimal
  averageCostBasis_lte: ANALYTICS__BigDecimal
  averageCostBasis_in: [ANALYTICS__BigDecimal!]
  averageCostBasis_not_in: [ANALYTICS__BigDecimal!]
  averageCostBasisPerSignal: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_not: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_gt: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_lt: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_gte: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_lte: ANALYTICS__BigDecimal
  averageCostBasisPerSignal_in: [ANALYTICS__BigDecimal!]
  averageCostBasisPerSignal_not_in: [ANALYTICS__BigDecimal!]
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: ANALYTICS__NameSignal_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__NameSignal_orderBy {
  id
  curator
  subgraph
  signalledTokens
  unsignalledTokens
  withdrawnTokens
  nameSignal
  lastNameSignalChange
  realizedRewards
  averageCostBasis
  averageCostBasisPerSignal
  entityVersion
  linkedEntity
}

enum ANALYTICS__NameSystem {
  ENS
}

"""Defines the order direction, either ascending or descending"""
enum ANALYTICS__OrderDirection {
  asc
  desc
}

"""
Global pool of query fees for closed state channels. Each Epoch has a single pool,
hence why they share the same IDs.

"""
type ANALYTICS__Pool {
  """Epoch number of the pool"""
  id: ID!
  """
  Total effective allocation tokens from all allocations closed in this epoch
  """
  allocation: BigInt!
  """Total query fees collected in this epoch"""
  totalQueryFees: BigInt!
  """
  Total query fees claimed in this epoch. Can be smaller than totalFees because of cobbs douglas function 
  """
  claimedFees: BigInt!
  """
  Total rewards from query fees deposited to all curator bonding curves during the epoch
  """
  curatorRewards: BigInt!
  """Allocations that were closed during this epoch"""
  closedAllocations(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Allocation_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Allocation_filter): [ANALYTICS__Allocation!]!
}

input ANALYTICS__Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  allocation: BigInt
  allocation_not: BigInt
  allocation_gt: BigInt
  allocation_lt: BigInt
  allocation_gte: BigInt
  allocation_lte: BigInt
  allocation_in: [BigInt!]
  allocation_not_in: [BigInt!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  claimedFees: BigInt
  claimedFees_not: BigInt
  claimedFees_gt: BigInt
  claimedFees_lt: BigInt
  claimedFees_gte: BigInt
  claimedFees_lte: BigInt
  claimedFees_in: [BigInt!]
  claimedFees_not_in: [BigInt!]
  curatorRewards: BigInt
  curatorRewards_not: BigInt
  curatorRewards_gt: BigInt
  curatorRewards_lt: BigInt
  curatorRewards_gte: BigInt
  curatorRewards_lte: BigInt
  curatorRewards_in: [BigInt!]
  curatorRewards_not_in: [BigInt!]
  closedAllocations_: ANALYTICS__Allocation_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Pool_orderBy {
  id
  allocation
  totalQueryFees
  claimedFees
  curatorRewards
  closedAllocations
}

"""
Curator Signal for a single SubgraphDeployment

"""
type ANALYTICS__Signal {
  """Eth address + subgraph deployment ID"""
  id: ID!
  """Eth address of the curator"""
  curator: ANALYTICS__Curator!
  """Subgraph being signalled"""
  subgraphDeployment: ANALYTICS__SubgraphDeployment!
  """CUMULATIVE number of tokens the curator has signalled"""
  signalledTokens: BigInt!
  """CUMULATIVE number of tokens the curator has unsignalled"""
  unsignalledTokens: BigInt!
  """Signal that the curator has from signaling their GRT"""
  signal: BigInt!
  """Block for which the curator last entered or exited the curve"""
  lastSignalChange: Int!
  """
  Summation of realized rewards from before the last time the curator entered the curation curve
  """
  realizedRewards: BigInt!
}

"""
All relevant data for a Signal Transaction in The Graph Network

"""
type ANALYTICS__SignalTransaction implements ANALYTICS__Transaction {
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  signer: ANALYTICS__GraphAccount!
  type: ANALYTICS__TransactionType!
  """Amount of signal updated"""
  signal: BigInt!
  """Tokens used"""
  tokens: BigInt!
  """Subgraph where signal was updated"""
  subgraphDeployment: ANALYTICS__SubgraphDeployment!
  """Withdrawal fees. On minting only"""
  withdrawalFees: BigInt!
}

input ANALYTICS__SignalTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: ANALYTICS__GraphAccount_filter
  type: ANALYTICS__TransactionType
  type_not: ANALYTICS__TransactionType
  type_in: [ANALYTICS__TransactionType!]
  type_not_in: [ANALYTICS__TransactionType!]
  signal: BigInt
  signal_not: BigInt
  signal_gt: BigInt
  signal_lt: BigInt
  signal_gte: BigInt
  signal_lte: BigInt
  signal_in: [BigInt!]
  signal_not_in: [BigInt!]
  tokens: BigInt
  tokens_not: BigInt
  tokens_gt: BigInt
  tokens_lt: BigInt
  tokens_gte: BigInt
  tokens_lte: BigInt
  tokens_in: [BigInt!]
  tokens_not_in: [BigInt!]
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: ANALYTICS__SubgraphDeployment_filter
  withdrawalFees: BigInt
  withdrawalFees_not: BigInt
  withdrawalFees_gt: BigInt
  withdrawalFees_lt: BigInt
  withdrawalFees_gte: BigInt
  withdrawalFees_lte: BigInt
  withdrawalFees_in: [BigInt!]
  withdrawalFees_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__SignalTransaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
  signal
  tokens
  subgraphDeployment
  withdrawalFees
}

input ANALYTICS__Signal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: ANALYTICS__Curator_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: ANALYTICS__SubgraphDeployment_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  signal: BigInt
  signal_not: BigInt
  signal_gt: BigInt
  signal_lt: BigInt
  signal_gte: BigInt
  signal_lte: BigInt
  signal_in: [BigInt!]
  signal_not_in: [BigInt!]
  lastSignalChange: Int
  lastSignalChange_not: Int
  lastSignalChange_gt: Int
  lastSignalChange_lt: Int
  lastSignalChange_gte: Int
  lastSignalChange_lte: Int
  lastSignalChange_in: [Int!]
  lastSignalChange_not_in: [Int!]
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Signal_orderBy {
  id
  curator
  subgraphDeployment
  signalledTokens
  unsignalledTokens
  signal
  lastSignalChange
  realizedRewards
}

"""
The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
"Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
subgraph is stored on IPFS.

"""
type ANALYTICS__Subgraph {
  """
  Subgraph ID - which is derived from the Organization/Individual graph accountID
  """
  id: ID!
  """Graph account that owns this subgraph"""
  owner: ANALYTICS__GraphAccount!
  """Current version"""
  currentVersion: ANALYTICS__SubgraphVersion
  """
  [DEPRECATED] Past versions. Has the same data as 'versions' but keeps the old naming for backwards compatibility
  """
  pastVersions(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__SubgraphVersion_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__SubgraphVersion_filter): [ANALYTICS__SubgraphVersion!]!
  """List of all the subgraph versions included the current one"""
  versions(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__SubgraphVersion_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__SubgraphVersion_filter): [ANALYTICS__SubgraphVersion!]!
  """Version counter"""
  versionCount: BigInt!
  """Creation timestamp"""
  createdAt: Int!
  """Updated timestamp"""
  updatedAt: Int!
  """Whether the subgraph is active or deprecated"""
  active: Boolean!
  """Whether the subgraph has been migrated to the NFT implementation"""
  migrated: Boolean!
  """
  Auxiliary field to denote whether the subgraph is handling the initialization order on V2 events. Doesn't matter for V1 events.
  """
  initializing: Boolean!
  """
  The actual ID of the subgraph on the contracts subgraph NFT implementation. BigInt represented as a String. It's only actually valid once the subgraph is migrated (migrated == true)
  """
  nftID: String!
  """
  ID of the subgraph that was used on the old version of this The Graph Network Subgraph. Null for Subgraphs created with the new GNS implementation
  """
  oldID: String
  """
  Address used to create the ID. Only available for Subgraphs created pre-migration
  """
  creatorAddress: ANALYTICS__Bytes
  """
  Subgraph number used to create the ID. Only available for Subgraphs created pre-migration
  """
  subgraphNumber: BigInt
  """
  Version of the entity. Subgraph entities are changing the way their ID is generated when the new GNS v2 rolls out so we need to differnetiate them
  """
  entityVersion: Int!
  """
  Subgraph entities might have 'duplicate' entities so that old IDs can be persisted and still queried properly. If that happens we have to link both duplicate entities to be able to update them properly.
  """
  linkedEntity: ANALYTICS__Subgraph
  """CUMULATIVE signaled tokens on this subgraph all time"""
  signalledTokens: BigInt!
  """CUMULATIVE unsignalled tokens on this subgraph all time"""
  unsignalledTokens: BigInt!
  """The CURRENT name signal amount for this subgraph"""
  nameSignalAmount: BigInt!
  """Reserve ratio of the name curation curve. In parts per million"""
  reserveRatio: Int!
  """Tokens that can be withdrawn once the Subgraph is deprecated"""
  withdrawableTokens: BigInt!
  """Tokens the curators have withdrawn from the deprecated Subgraph"""
  withdrawnTokens: BigInt!
  """Curators of this subgraph deployment"""
  nameSignals(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__NameSignal_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__NameSignal_filter): [ANALYTICS__NameSignal!]!
  """Subgraph metadata"""
  metadataHash: ANALYTICS__Bytes
}

"""
The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
related to a SubgraphVersion.

"""
type ANALYTICS__SubgraphDeployment {
  """
  Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes
  """
  id: ID!
  """The versions this subgraph deployment relates to"""
  versions(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__SubgraphVersion_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__SubgraphVersion_filter): [ANALYTICS__SubgraphVersion!]!
  """Creation timestamp"""
  createdAt: Int!
  """
  The block at which this deployment was denied for rewards. Null if not denied
  """
  deniedAt: Int!
  """CURRENT total stake of all indexers on this Subgraph Deployment"""
  stakedTokens: BigInt!
  """Allocations created by indexers for this Subgraph"""
  indexerAllocations(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Allocation_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Allocation_filter): [ANALYTICS__Allocation!]!
  """
  Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards
  """
  indexingRewardAmount: BigInt!
  """Total rewards accrued all time by indexers"""
  indexingIndexerRewardAmount: BigInt!
  """Total rewards accrued all time by delegators"""
  indexingDelegatorRewardAmount: BigInt!
  """
  Total query fees earned by this Subgraph Deployment, without curator query fees
  """
  queryFeesAmount: BigInt!
  """
  Total query fee rebates for indexers earned from the protocol, through the cobbs douglas formula.
  """
  queryFeeRebates: BigInt!
  """
  Total query fee rebates for delegators earned from the protocol, through the cobbs douglas formula.
  """
  delegatorQueryFees: BigInt!
  """Total curator rewards from fees"""
  curatorFeeRewards: BigInt!
  """CURRENT signalled tokens in the bonding curve"""
  signalledTokens: BigInt!
  """NOT IMPLEMENTED - CURRENT signalled tokens in the bonding curve"""
  unsignalledTokens: BigInt!
  """CURRENT curation signal for this subgraph deployment"""
  signalAmount: BigInt!
  """signalledTokens / signalAmount"""
  pricePerShare: ANALYTICS__BigDecimal!
  """Curators of this subgraph deployment"""
  curatorSignals(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__Signal_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__Signal_filter): [ANALYTICS__Signal!]!
  """Bonding curve reserve ratio. In parts per million"""
  reserveRatio: Int!
  dailyData(skip: Int = 0, first: Int = 100, orderBy: ANALYTICS__SubgraphDeploymentDailyData_orderBy, orderDirection: ANALYTICS__OrderDirection, where: ANALYTICS__SubgraphDeploymentDailyData_filter): [ANALYTICS__SubgraphDeploymentDailyData!]!
}

type ANALYTICS__SubgraphDeploymentDailyData {
  """<SUBGRAPH ID>-<DAY NUMBER>"""
  id: ID!
  """Timestamp for the start of the day that this entity represents. UTC+0"""
  dayStart: BigInt!
  """Timestamp for the end of the day that this entity represents. UTC+0"""
  dayEnd: BigInt!
  """
  Number of the day this entity represents. Day 0 is the network launch day.
  """
  dayNumber: Int!
  """Original entity that the daily data entity tracks"""
  subgraphDeployment: ANALYTICS__SubgraphDeployment!
  """
  [CURRENT] Amount of allocated/staked tokens on this deployment at this specific day
  """
  stakedTokens: BigInt!
  """
  [CURRENT] Amount of signalled tokens on this deployment at this specific day
  """
  signalledTokens: BigInt!
  """[CURRENT] Amount of signal on this deployment at this specific day"""
  signalAmount: BigInt!
  """
  [CURRENT] Value of pricePerShare for the original entity at this specific day
  """
  pricePerShare: ANALYTICS__BigDecimal!
  """
  [CUMULATIVE] Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards
  """
  indexingRewardAmount: BigInt!
  """[CUMULATIVE] Total rewards accrued all time by indexers"""
  indexingIndexerRewardAmount: BigInt!
  """[CUMULATIVE] Total rewards accrued all time by delegators"""
  indexingDelegatorRewardAmount: BigInt!
  """
  [CUMULATIVE] Total query fees earned by this Subgraph Deployment, without curator query fees
  """
  queryFeesAmount: BigInt!
  """
  [CUMULATIVE] Total query fee rebates for indexers earned from the protocol, through the cobbs douglas formula.
  """
  queryFeeRebates: BigInt!
  """
  [CUMULATIVE] Total query fee rebates for delegators earned from the protocol, through the cobbs douglas formula.
  """
  delegatorQueryFees: BigInt!
  """[CUMULATIVE] Total curator rewards from fees"""
  curatorFeeRewards: BigInt!
}

input ANALYTICS__SubgraphDeploymentDailyData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dayStart: BigInt
  dayStart_not: BigInt
  dayStart_gt: BigInt
  dayStart_lt: BigInt
  dayStart_gte: BigInt
  dayStart_lte: BigInt
  dayStart_in: [BigInt!]
  dayStart_not_in: [BigInt!]
  dayEnd: BigInt
  dayEnd_not: BigInt
  dayEnd_gt: BigInt
  dayEnd_lt: BigInt
  dayEnd_gte: BigInt
  dayEnd_lte: BigInt
  dayEnd_in: [BigInt!]
  dayEnd_not_in: [BigInt!]
  dayNumber: Int
  dayNumber_not: Int
  dayNumber_gt: Int
  dayNumber_lt: Int
  dayNumber_gte: Int
  dayNumber_lte: Int
  dayNumber_in: [Int!]
  dayNumber_not_in: [Int!]
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: ANALYTICS__SubgraphDeployment_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  signalAmount: BigInt
  signalAmount_not: BigInt
  signalAmount_gt: BigInt
  signalAmount_lt: BigInt
  signalAmount_gte: BigInt
  signalAmount_lte: BigInt
  signalAmount_in: [BigInt!]
  signalAmount_not_in: [BigInt!]
  pricePerShare: ANALYTICS__BigDecimal
  pricePerShare_not: ANALYTICS__BigDecimal
  pricePerShare_gt: ANALYTICS__BigDecimal
  pricePerShare_lt: ANALYTICS__BigDecimal
  pricePerShare_gte: ANALYTICS__BigDecimal
  pricePerShare_lte: ANALYTICS__BigDecimal
  pricePerShare_in: [ANALYTICS__BigDecimal!]
  pricePerShare_not_in: [ANALYTICS__BigDecimal!]
  indexingRewardAmount: BigInt
  indexingRewardAmount_not: BigInt
  indexingRewardAmount_gt: BigInt
  indexingRewardAmount_lt: BigInt
  indexingRewardAmount_gte: BigInt
  indexingRewardAmount_lte: BigInt
  indexingRewardAmount_in: [BigInt!]
  indexingRewardAmount_not_in: [BigInt!]
  indexingIndexerRewardAmount: BigInt
  indexingIndexerRewardAmount_not: BigInt
  indexingIndexerRewardAmount_gt: BigInt
  indexingIndexerRewardAmount_lt: BigInt
  indexingIndexerRewardAmount_gte: BigInt
  indexingIndexerRewardAmount_lte: BigInt
  indexingIndexerRewardAmount_in: [BigInt!]
  indexingIndexerRewardAmount_not_in: [BigInt!]
  indexingDelegatorRewardAmount: BigInt
  indexingDelegatorRewardAmount_not: BigInt
  indexingDelegatorRewardAmount_gt: BigInt
  indexingDelegatorRewardAmount_lt: BigInt
  indexingDelegatorRewardAmount_gte: BigInt
  indexingDelegatorRewardAmount_lte: BigInt
  indexingDelegatorRewardAmount_in: [BigInt!]
  indexingDelegatorRewardAmount_not_in: [BigInt!]
  queryFeesAmount: BigInt
  queryFeesAmount_not: BigInt
  queryFeesAmount_gt: BigInt
  queryFeesAmount_lt: BigInt
  queryFeesAmount_gte: BigInt
  queryFeesAmount_lte: BigInt
  queryFeesAmount_in: [BigInt!]
  queryFeesAmount_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  delegatorQueryFees: BigInt
  delegatorQueryFees_not: BigInt
  delegatorQueryFees_gt: BigInt
  delegatorQueryFees_lt: BigInt
  delegatorQueryFees_gte: BigInt
  delegatorQueryFees_lte: BigInt
  delegatorQueryFees_in: [BigInt!]
  delegatorQueryFees_not_in: [BigInt!]
  curatorFeeRewards: BigInt
  curatorFeeRewards_not: BigInt
  curatorFeeRewards_gt: BigInt
  curatorFeeRewards_lt: BigInt
  curatorFeeRewards_gte: BigInt
  curatorFeeRewards_lte: BigInt
  curatorFeeRewards_in: [BigInt!]
  curatorFeeRewards_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__SubgraphDeploymentDailyData_orderBy {
  id
  dayStart
  dayEnd
  dayNumber
  subgraphDeployment
  stakedTokens
  signalledTokens
  signalAmount
  pricePerShare
  indexingRewardAmount
  indexingIndexerRewardAmount
  indexingDelegatorRewardAmount
  queryFeesAmount
  queryFeeRebates
  delegatorQueryFees
  curatorFeeRewards
}

input ANALYTICS__SubgraphDeployment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  versions_: ANALYTICS__SubgraphVersion_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  deniedAt: Int
  deniedAt_not: Int
  deniedAt_gt: Int
  deniedAt_lt: Int
  deniedAt_gte: Int
  deniedAt_lte: Int
  deniedAt_in: [Int!]
  deniedAt_not_in: [Int!]
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  indexerAllocations_: ANALYTICS__Allocation_filter
  indexingRewardAmount: BigInt
  indexingRewardAmount_not: BigInt
  indexingRewardAmount_gt: BigInt
  indexingRewardAmount_lt: BigInt
  indexingRewardAmount_gte: BigInt
  indexingRewardAmount_lte: BigInt
  indexingRewardAmount_in: [BigInt!]
  indexingRewardAmount_not_in: [BigInt!]
  indexingIndexerRewardAmount: BigInt
  indexingIndexerRewardAmount_not: BigInt
  indexingIndexerRewardAmount_gt: BigInt
  indexingIndexerRewardAmount_lt: BigInt
  indexingIndexerRewardAmount_gte: BigInt
  indexingIndexerRewardAmount_lte: BigInt
  indexingIndexerRewardAmount_in: [BigInt!]
  indexingIndexerRewardAmount_not_in: [BigInt!]
  indexingDelegatorRewardAmount: BigInt
  indexingDelegatorRewardAmount_not: BigInt
  indexingDelegatorRewardAmount_gt: BigInt
  indexingDelegatorRewardAmount_lt: BigInt
  indexingDelegatorRewardAmount_gte: BigInt
  indexingDelegatorRewardAmount_lte: BigInt
  indexingDelegatorRewardAmount_in: [BigInt!]
  indexingDelegatorRewardAmount_not_in: [BigInt!]
  queryFeesAmount: BigInt
  queryFeesAmount_not: BigInt
  queryFeesAmount_gt: BigInt
  queryFeesAmount_lt: BigInt
  queryFeesAmount_gte: BigInt
  queryFeesAmount_lte: BigInt
  queryFeesAmount_in: [BigInt!]
  queryFeesAmount_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  delegatorQueryFees: BigInt
  delegatorQueryFees_not: BigInt
  delegatorQueryFees_gt: BigInt
  delegatorQueryFees_lt: BigInt
  delegatorQueryFees_gte: BigInt
  delegatorQueryFees_lte: BigInt
  delegatorQueryFees_in: [BigInt!]
  delegatorQueryFees_not_in: [BigInt!]
  curatorFeeRewards: BigInt
  curatorFeeRewards_not: BigInt
  curatorFeeRewards_gt: BigInt
  curatorFeeRewards_lt: BigInt
  curatorFeeRewards_gte: BigInt
  curatorFeeRewards_lte: BigInt
  curatorFeeRewards_in: [BigInt!]
  curatorFeeRewards_not_in: [BigInt!]
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  signalAmount: BigInt
  signalAmount_not: BigInt
  signalAmount_gt: BigInt
  signalAmount_lt: BigInt
  signalAmount_gte: BigInt
  signalAmount_lte: BigInt
  signalAmount_in: [BigInt!]
  signalAmount_not_in: [BigInt!]
  pricePerShare: ANALYTICS__BigDecimal
  pricePerShare_not: ANALYTICS__BigDecimal
  pricePerShare_gt: ANALYTICS__BigDecimal
  pricePerShare_lt: ANALYTICS__BigDecimal
  pricePerShare_gte: ANALYTICS__BigDecimal
  pricePerShare_lte: ANALYTICS__BigDecimal
  pricePerShare_in: [ANALYTICS__BigDecimal!]
  pricePerShare_not_in: [ANALYTICS__BigDecimal!]
  curatorSignals_: ANALYTICS__Signal_filter
  reserveRatio: Int
  reserveRatio_not: Int
  reserveRatio_gt: Int
  reserveRatio_lt: Int
  reserveRatio_gte: Int
  reserveRatio_lte: Int
  reserveRatio_in: [Int!]
  reserveRatio_not_in: [Int!]
  dailyData_: ANALYTICS__SubgraphDeploymentDailyData_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__SubgraphDeployment_orderBy {
  id
  versions
  createdAt
  deniedAt
  stakedTokens
  indexerAllocations
  indexingRewardAmount
  indexingIndexerRewardAmount
  indexingDelegatorRewardAmount
  queryFeesAmount
  queryFeeRebates
  delegatorQueryFees
  curatorFeeRewards
  signalledTokens
  unsignalledTokens
  signalAmount
  pricePerShare
  curatorSignals
  reserveRatio
  dailyData
}

"""
The SubgraphVersion entity represents a version of the Subgraph. A new SubgraphVersion is created
whenever there is an update to the Subgraph triggered by the owner. The new SubgraphVersion can
then point to a new SubgraphDeployment, thus allowing the Subgraph to resolve to a different
deployment, while keeping the same endpoint. The metadata and label are stored on IPFS. The label
is for the developer to provide a semantic version. This is different from the version, which is
just a counter than increases each time a new SubgraphVersion is created for a Subgraph.

"""
type ANALYTICS__SubgraphVersion {
  """Concatenation of subgraph, subgraph deployment, and version ID"""
  id: ID!
  """Subgraph of this version"""
  subgraph: ANALYTICS__Subgraph!
  """Subgraph deployment of this version"""
  subgraphDeployment: ANALYTICS__SubgraphDeployment!
  """Version number"""
  version: Int!
  """Creation timestamp"""
  createdAt: Int!
  """Subgraph version metadata content address"""
  metadataHash: ANALYTICS__Bytes
  entityVersion: Int!
  linkedEntity: ANALYTICS__SubgraphVersion
}

input ANALYTICS__SubgraphVersion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: ANALYTICS__Subgraph_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: ANALYTICS__SubgraphDeployment_filter
  version: Int
  version_not: Int
  version_gt: Int
  version_lt: Int
  version_gte: Int
  version_lte: Int
  version_in: [Int!]
  version_not_in: [Int!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  metadataHash: ANALYTICS__Bytes
  metadataHash_not: ANALYTICS__Bytes
  metadataHash_gt: ANALYTICS__Bytes
  metadataHash_lt: ANALYTICS__Bytes
  metadataHash_gte: ANALYTICS__Bytes
  metadataHash_lte: ANALYTICS__Bytes
  metadataHash_in: [ANALYTICS__Bytes!]
  metadataHash_not_in: [ANALYTICS__Bytes!]
  metadataHash_contains: ANALYTICS__Bytes
  metadataHash_not_contains: ANALYTICS__Bytes
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: ANALYTICS__SubgraphVersion_filter
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__SubgraphVersion_orderBy {
  id
  subgraph
  subgraphDeployment
  version
  createdAt
  metadataHash
  entityVersion
  linkedEntity
}

input ANALYTICS__Subgraph_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: ANALYTICS__GraphAccount_filter
  currentVersion: String
  currentVersion_not: String
  currentVersion_gt: String
  currentVersion_lt: String
  currentVersion_gte: String
  currentVersion_lte: String
  currentVersion_in: [String!]
  currentVersion_not_in: [String!]
  currentVersion_contains: String
  currentVersion_contains_nocase: String
  currentVersion_not_contains: String
  currentVersion_not_contains_nocase: String
  currentVersion_starts_with: String
  currentVersion_starts_with_nocase: String
  currentVersion_not_starts_with: String
  currentVersion_not_starts_with_nocase: String
  currentVersion_ends_with: String
  currentVersion_ends_with_nocase: String
  currentVersion_not_ends_with: String
  currentVersion_not_ends_with_nocase: String
  currentVersion_: ANALYTICS__SubgraphVersion_filter
  pastVersions_: ANALYTICS__SubgraphVersion_filter
  versions_: ANALYTICS__SubgraphVersion_filter
  versionCount: BigInt
  versionCount_not: BigInt
  versionCount_gt: BigInt
  versionCount_lt: BigInt
  versionCount_gte: BigInt
  versionCount_lte: BigInt
  versionCount_in: [BigInt!]
  versionCount_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_gt: Int
  updatedAt_lt: Int
  updatedAt_gte: Int
  updatedAt_lte: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  migrated: Boolean
  migrated_not: Boolean
  migrated_in: [Boolean!]
  migrated_not_in: [Boolean!]
  initializing: Boolean
  initializing_not: Boolean
  initializing_in: [Boolean!]
  initializing_not_in: [Boolean!]
  nftID: String
  nftID_not: String
  nftID_gt: String
  nftID_lt: String
  nftID_gte: String
  nftID_lte: String
  nftID_in: [String!]
  nftID_not_in: [String!]
  nftID_contains: String
  nftID_contains_nocase: String
  nftID_not_contains: String
  nftID_not_contains_nocase: String
  nftID_starts_with: String
  nftID_starts_with_nocase: String
  nftID_not_starts_with: String
  nftID_not_starts_with_nocase: String
  nftID_ends_with: String
  nftID_ends_with_nocase: String
  nftID_not_ends_with: String
  nftID_not_ends_with_nocase: String
  oldID: String
  oldID_not: String
  oldID_gt: String
  oldID_lt: String
  oldID_gte: String
  oldID_lte: String
  oldID_in: [String!]
  oldID_not_in: [String!]
  oldID_contains: String
  oldID_contains_nocase: String
  oldID_not_contains: String
  oldID_not_contains_nocase: String
  oldID_starts_with: String
  oldID_starts_with_nocase: String
  oldID_not_starts_with: String
  oldID_not_starts_with_nocase: String
  oldID_ends_with: String
  oldID_ends_with_nocase: String
  oldID_not_ends_with: String
  oldID_not_ends_with_nocase: String
  creatorAddress: ANALYTICS__Bytes
  creatorAddress_not: ANALYTICS__Bytes
  creatorAddress_gt: ANALYTICS__Bytes
  creatorAddress_lt: ANALYTICS__Bytes
  creatorAddress_gte: ANALYTICS__Bytes
  creatorAddress_lte: ANALYTICS__Bytes
  creatorAddress_in: [ANALYTICS__Bytes!]
  creatorAddress_not_in: [ANALYTICS__Bytes!]
  creatorAddress_contains: ANALYTICS__Bytes
  creatorAddress_not_contains: ANALYTICS__Bytes
  subgraphNumber: BigInt
  subgraphNumber_not: BigInt
  subgraphNumber_gt: BigInt
  subgraphNumber_lt: BigInt
  subgraphNumber_gte: BigInt
  subgraphNumber_lte: BigInt
  subgraphNumber_in: [BigInt!]
  subgraphNumber_not_in: [BigInt!]
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: ANALYTICS__Subgraph_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  nameSignalAmount: BigInt
  nameSignalAmount_not: BigInt
  nameSignalAmount_gt: BigInt
  nameSignalAmount_lt: BigInt
  nameSignalAmount_gte: BigInt
  nameSignalAmount_lte: BigInt
  nameSignalAmount_in: [BigInt!]
  nameSignalAmount_not_in: [BigInt!]
  reserveRatio: Int
  reserveRatio_not: Int
  reserveRatio_gt: Int
  reserveRatio_lt: Int
  reserveRatio_gte: Int
  reserveRatio_lte: Int
  reserveRatio_in: [Int!]
  reserveRatio_not_in: [Int!]
  withdrawableTokens: BigInt
  withdrawableTokens_not: BigInt
  withdrawableTokens_gt: BigInt
  withdrawableTokens_lt: BigInt
  withdrawableTokens_gte: BigInt
  withdrawableTokens_lte: BigInt
  withdrawableTokens_in: [BigInt!]
  withdrawableTokens_not_in: [BigInt!]
  withdrawnTokens: BigInt
  withdrawnTokens_not: BigInt
  withdrawnTokens_gt: BigInt
  withdrawnTokens_lt: BigInt
  withdrawnTokens_gte: BigInt
  withdrawnTokens_lte: BigInt
  withdrawnTokens_in: [BigInt!]
  withdrawnTokens_not_in: [BigInt!]
  nameSignals_: ANALYTICS__NameSignal_filter
  metadataHash: ANALYTICS__Bytes
  metadataHash_not: ANALYTICS__Bytes
  metadataHash_gt: ANALYTICS__Bytes
  metadataHash_lt: ANALYTICS__Bytes
  metadataHash_gte: ANALYTICS__Bytes
  metadataHash_lte: ANALYTICS__Bytes
  metadataHash_in: [ANALYTICS__Bytes!]
  metadataHash_not_in: [ANALYTICS__Bytes!]
  metadataHash_contains: ANALYTICS__Bytes
  metadataHash_not_contains: ANALYTICS__Bytes
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Subgraph_orderBy {
  id
  owner
  currentVersion
  pastVersions
  versions
  versionCount
  createdAt
  updatedAt
  active
  migrated
  initializing
  nftID
  oldID
  creatorAddress
  subgraphNumber
  entityVersion
  linkedEntity
  signalledTokens
  unsignalledTokens
  nameSignalAmount
  reserveRatio
  withdrawableTokens
  withdrawnTokens
  nameSignals
  metadataHash
}

"""
A generic transaction in The Graph Network

"""
interface ANALYTICS__Transaction {
  """Transaction hash concatenated with event log index"""
  id: ID!
  """Block number for the transaction"""
  blockNumber: Int!
  """Timestamp for the transaction"""
  timestamp: Int!
  """Signer of the transaction"""
  signer: ANALYTICS__GraphAccount!
  """Type of Graph Network transaction"""
  type: ANALYTICS__TransactionType!
}

enum ANALYTICS__TransactionType {
  Stake
  Unstake
  MintSignal
  BurnSignal
  MintNSignal
  BurnNSignal
}

input ANALYTICS__Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: ANALYTICS__GraphAccount_filter
  type: ANALYTICS__TransactionType
  type_not: ANALYTICS__TransactionType
  type_in: [ANALYTICS__TransactionType!]
  type_not_in: [ANALYTICS__TransactionType!]
  """Filter for the block changed event."""
  _change_block: ANALYTICS__BlockChangedFilter
}

enum ANALYTICS__Transaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
}

type ANALYTICS___Block_ {
  """The hash of the block"""
  hash: ANALYTICS__Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type ANALYTICS___Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: ANALYTICS___Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum ANALYTICS___SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

"""
A state channel Allocation representing a single Indexer-SubgraphDeployment stake

"""
type NETWORK__Allocation {
  """Channel Address"""
  id: ID!
  """Indexer of this allocation"""
  indexer: NETWORK__Indexer!
  """Creator of the allocation - can be the operator or the indexer"""
  creator: NETWORK__Bytes!
  """
  If the Allocation is active it shows the indexer. If closed, it is null
  """
  activeForIndexer: NETWORK__Indexer
  """Subgraph deployment that is being allocated to"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """Tokens allocation in this allocation"""
  allocatedTokens: BigInt!
  """Effective allocation that is realized upon closing"""
  effectiveAllocation: BigInt!
  """Epoch this allocation was created"""
  createdAtEpoch: Int!
  """Block at which this allocation was created"""
  createdAtBlockHash: NETWORK__Bytes!
  """Block number at which this allocation was created"""
  createdAtBlockNumber: Int!
  """Epoch this allocation was closed in"""
  closedAtEpoch: Int
  """Block hash at which this allocation was closed"""
  closedAtBlockHash: NETWORK__Bytes
  """Block number at which this allocation was closed"""
  closedAtBlockNumber: Int
  """
  Fees this allocation collected from query fees upon closing. Excludes curator reward and protocol tax
  """
  queryFeesCollected: BigInt!
  """
  Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators
  """
  queryFeeRebates: BigInt!
  """Curator rewards deposited to the curating bonding curve"""
  curatorRewards: BigInt!
  """
  Indexing rewards earned by this allocation. Includes delegator and indexer rewards
  """
  indexingRewards: BigInt!
  """Indexing rewards earned by this allocation by indexers"""
  indexingIndexerRewards: BigInt!
  """Indexing rewards earned by this allocation by delegators"""
  indexingDelegatorRewards: BigInt!
  """Pool in which this allocation was closed"""
  poolClosedIn: NETWORK__Pool
  """Fees paid out to delegators"""
  delegationFees: BigInt!
  """Status of the allocation"""
  status: NETWORK__AllocationStatus!
  """Timestamp this allocation was created at"""
  createdAt: Int!
  """Timestamp this allocation was closed at"""
  closedAt: Int
  """POI submitted with a closed allocation"""
  poi: NETWORK__Bytes
  indexingRewardCutAtStart: Int!
  indexingRewardEffectiveCutAtStart: NETWORK__BigDecimal!
  queryFeeCutAtStart: Int!
  queryFeeEffectiveCutAtStart: NETWORK__BigDecimal!
  indexingRewardCutAtClose: Int
  indexingRewardEffectiveCutAtClose: NETWORK__BigDecimal
  queryFeeCutAtClose: Int
  queryFeeEffectiveCutAtClose: NETWORK__BigDecimal
  """NOT IMPLEMENTED - Return for this allocation"""
  totalReturn: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Yearly annualzied return"""
  annualizedReturn: NETWORK__BigDecimal!
}

enum NETWORK__AllocationStatus {
  Null
  Active
  Closed
  Finalized
  Claimed
}

input NETWORK__Allocation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: NETWORK__Indexer_filter
  creator: NETWORK__Bytes
  creator_not: NETWORK__Bytes
  creator_gt: NETWORK__Bytes
  creator_lt: NETWORK__Bytes
  creator_gte: NETWORK__Bytes
  creator_lte: NETWORK__Bytes
  creator_in: [NETWORK__Bytes!]
  creator_not_in: [NETWORK__Bytes!]
  creator_contains: NETWORK__Bytes
  creator_not_contains: NETWORK__Bytes
  activeForIndexer: String
  activeForIndexer_not: String
  activeForIndexer_gt: String
  activeForIndexer_lt: String
  activeForIndexer_gte: String
  activeForIndexer_lte: String
  activeForIndexer_in: [String!]
  activeForIndexer_not_in: [String!]
  activeForIndexer_contains: String
  activeForIndexer_contains_nocase: String
  activeForIndexer_not_contains: String
  activeForIndexer_not_contains_nocase: String
  activeForIndexer_starts_with: String
  activeForIndexer_starts_with_nocase: String
  activeForIndexer_not_starts_with: String
  activeForIndexer_not_starts_with_nocase: String
  activeForIndexer_ends_with: String
  activeForIndexer_ends_with_nocase: String
  activeForIndexer_not_ends_with: String
  activeForIndexer_not_ends_with_nocase: String
  activeForIndexer_: NETWORK__Indexer_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  allocatedTokens: BigInt
  allocatedTokens_not: BigInt
  allocatedTokens_gt: BigInt
  allocatedTokens_lt: BigInt
  allocatedTokens_gte: BigInt
  allocatedTokens_lte: BigInt
  allocatedTokens_in: [BigInt!]
  allocatedTokens_not_in: [BigInt!]
  effectiveAllocation: BigInt
  effectiveAllocation_not: BigInt
  effectiveAllocation_gt: BigInt
  effectiveAllocation_lt: BigInt
  effectiveAllocation_gte: BigInt
  effectiveAllocation_lte: BigInt
  effectiveAllocation_in: [BigInt!]
  effectiveAllocation_not_in: [BigInt!]
  createdAtEpoch: Int
  createdAtEpoch_not: Int
  createdAtEpoch_gt: Int
  createdAtEpoch_lt: Int
  createdAtEpoch_gte: Int
  createdAtEpoch_lte: Int
  createdAtEpoch_in: [Int!]
  createdAtEpoch_not_in: [Int!]
  createdAtBlockHash: NETWORK__Bytes
  createdAtBlockHash_not: NETWORK__Bytes
  createdAtBlockHash_gt: NETWORK__Bytes
  createdAtBlockHash_lt: NETWORK__Bytes
  createdAtBlockHash_gte: NETWORK__Bytes
  createdAtBlockHash_lte: NETWORK__Bytes
  createdAtBlockHash_in: [NETWORK__Bytes!]
  createdAtBlockHash_not_in: [NETWORK__Bytes!]
  createdAtBlockHash_contains: NETWORK__Bytes
  createdAtBlockHash_not_contains: NETWORK__Bytes
  createdAtBlockNumber: Int
  createdAtBlockNumber_not: Int
  createdAtBlockNumber_gt: Int
  createdAtBlockNumber_lt: Int
  createdAtBlockNumber_gte: Int
  createdAtBlockNumber_lte: Int
  createdAtBlockNumber_in: [Int!]
  createdAtBlockNumber_not_in: [Int!]
  closedAtEpoch: Int
  closedAtEpoch_not: Int
  closedAtEpoch_gt: Int
  closedAtEpoch_lt: Int
  closedAtEpoch_gte: Int
  closedAtEpoch_lte: Int
  closedAtEpoch_in: [Int!]
  closedAtEpoch_not_in: [Int!]
  closedAtBlockHash: NETWORK__Bytes
  closedAtBlockHash_not: NETWORK__Bytes
  closedAtBlockHash_gt: NETWORK__Bytes
  closedAtBlockHash_lt: NETWORK__Bytes
  closedAtBlockHash_gte: NETWORK__Bytes
  closedAtBlockHash_lte: NETWORK__Bytes
  closedAtBlockHash_in: [NETWORK__Bytes!]
  closedAtBlockHash_not_in: [NETWORK__Bytes!]
  closedAtBlockHash_contains: NETWORK__Bytes
  closedAtBlockHash_not_contains: NETWORK__Bytes
  closedAtBlockNumber: Int
  closedAtBlockNumber_not: Int
  closedAtBlockNumber_gt: Int
  closedAtBlockNumber_lt: Int
  closedAtBlockNumber_gte: Int
  closedAtBlockNumber_lte: Int
  closedAtBlockNumber_in: [Int!]
  closedAtBlockNumber_not_in: [Int!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  curatorRewards: BigInt
  curatorRewards_not: BigInt
  curatorRewards_gt: BigInt
  curatorRewards_lt: BigInt
  curatorRewards_gte: BigInt
  curatorRewards_lte: BigInt
  curatorRewards_in: [BigInt!]
  curatorRewards_not_in: [BigInt!]
  indexingRewards: BigInt
  indexingRewards_not: BigInt
  indexingRewards_gt: BigInt
  indexingRewards_lt: BigInt
  indexingRewards_gte: BigInt
  indexingRewards_lte: BigInt
  indexingRewards_in: [BigInt!]
  indexingRewards_not_in: [BigInt!]
  indexingIndexerRewards: BigInt
  indexingIndexerRewards_not: BigInt
  indexingIndexerRewards_gt: BigInt
  indexingIndexerRewards_lt: BigInt
  indexingIndexerRewards_gte: BigInt
  indexingIndexerRewards_lte: BigInt
  indexingIndexerRewards_in: [BigInt!]
  indexingIndexerRewards_not_in: [BigInt!]
  indexingDelegatorRewards: BigInt
  indexingDelegatorRewards_not: BigInt
  indexingDelegatorRewards_gt: BigInt
  indexingDelegatorRewards_lt: BigInt
  indexingDelegatorRewards_gte: BigInt
  indexingDelegatorRewards_lte: BigInt
  indexingDelegatorRewards_in: [BigInt!]
  indexingDelegatorRewards_not_in: [BigInt!]
  poolClosedIn: String
  poolClosedIn_not: String
  poolClosedIn_gt: String
  poolClosedIn_lt: String
  poolClosedIn_gte: String
  poolClosedIn_lte: String
  poolClosedIn_in: [String!]
  poolClosedIn_not_in: [String!]
  poolClosedIn_contains: String
  poolClosedIn_contains_nocase: String
  poolClosedIn_not_contains: String
  poolClosedIn_not_contains_nocase: String
  poolClosedIn_starts_with: String
  poolClosedIn_starts_with_nocase: String
  poolClosedIn_not_starts_with: String
  poolClosedIn_not_starts_with_nocase: String
  poolClosedIn_ends_with: String
  poolClosedIn_ends_with_nocase: String
  poolClosedIn_not_ends_with: String
  poolClosedIn_not_ends_with_nocase: String
  poolClosedIn_: NETWORK__Pool_filter
  delegationFees: BigInt
  delegationFees_not: BigInt
  delegationFees_gt: BigInt
  delegationFees_lt: BigInt
  delegationFees_gte: BigInt
  delegationFees_lte: BigInt
  delegationFees_in: [BigInt!]
  delegationFees_not_in: [BigInt!]
  status: NETWORK__AllocationStatus
  status_not: NETWORK__AllocationStatus
  status_in: [NETWORK__AllocationStatus!]
  status_not_in: [NETWORK__AllocationStatus!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  closedAt: Int
  closedAt_not: Int
  closedAt_gt: Int
  closedAt_lt: Int
  closedAt_gte: Int
  closedAt_lte: Int
  closedAt_in: [Int!]
  closedAt_not_in: [Int!]
  poi: NETWORK__Bytes
  poi_not: NETWORK__Bytes
  poi_gt: NETWORK__Bytes
  poi_lt: NETWORK__Bytes
  poi_gte: NETWORK__Bytes
  poi_lte: NETWORK__Bytes
  poi_in: [NETWORK__Bytes!]
  poi_not_in: [NETWORK__Bytes!]
  poi_contains: NETWORK__Bytes
  poi_not_contains: NETWORK__Bytes
  indexingRewardCutAtStart: Int
  indexingRewardCutAtStart_not: Int
  indexingRewardCutAtStart_gt: Int
  indexingRewardCutAtStart_lt: Int
  indexingRewardCutAtStart_gte: Int
  indexingRewardCutAtStart_lte: Int
  indexingRewardCutAtStart_in: [Int!]
  indexingRewardCutAtStart_not_in: [Int!]
  indexingRewardEffectiveCutAtStart: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_not: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_gt: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_lt: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_gte: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_lte: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtStart_in: [NETWORK__BigDecimal!]
  indexingRewardEffectiveCutAtStart_not_in: [NETWORK__BigDecimal!]
  queryFeeCutAtStart: Int
  queryFeeCutAtStart_not: Int
  queryFeeCutAtStart_gt: Int
  queryFeeCutAtStart_lt: Int
  queryFeeCutAtStart_gte: Int
  queryFeeCutAtStart_lte: Int
  queryFeeCutAtStart_in: [Int!]
  queryFeeCutAtStart_not_in: [Int!]
  queryFeeEffectiveCutAtStart: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_not: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_gt: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_lt: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_gte: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_lte: NETWORK__BigDecimal
  queryFeeEffectiveCutAtStart_in: [NETWORK__BigDecimal!]
  queryFeeEffectiveCutAtStart_not_in: [NETWORK__BigDecimal!]
  indexingRewardCutAtClose: Int
  indexingRewardCutAtClose_not: Int
  indexingRewardCutAtClose_gt: Int
  indexingRewardCutAtClose_lt: Int
  indexingRewardCutAtClose_gte: Int
  indexingRewardCutAtClose_lte: Int
  indexingRewardCutAtClose_in: [Int!]
  indexingRewardCutAtClose_not_in: [Int!]
  indexingRewardEffectiveCutAtClose: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_not: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_gt: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_lt: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_gte: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_lte: NETWORK__BigDecimal
  indexingRewardEffectiveCutAtClose_in: [NETWORK__BigDecimal!]
  indexingRewardEffectiveCutAtClose_not_in: [NETWORK__BigDecimal!]
  queryFeeCutAtClose: Int
  queryFeeCutAtClose_not: Int
  queryFeeCutAtClose_gt: Int
  queryFeeCutAtClose_lt: Int
  queryFeeCutAtClose_gte: Int
  queryFeeCutAtClose_lte: Int
  queryFeeCutAtClose_in: [Int!]
  queryFeeCutAtClose_not_in: [Int!]
  queryFeeEffectiveCutAtClose: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_not: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_gt: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_lt: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_gte: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_lte: NETWORK__BigDecimal
  queryFeeEffectiveCutAtClose_in: [NETWORK__BigDecimal!]
  queryFeeEffectiveCutAtClose_not_in: [NETWORK__BigDecimal!]
  totalReturn: NETWORK__BigDecimal
  totalReturn_not: NETWORK__BigDecimal
  totalReturn_gt: NETWORK__BigDecimal
  totalReturn_lt: NETWORK__BigDecimal
  totalReturn_gte: NETWORK__BigDecimal
  totalReturn_lte: NETWORK__BigDecimal
  totalReturn_in: [NETWORK__BigDecimal!]
  totalReturn_not_in: [NETWORK__BigDecimal!]
  annualizedReturn: NETWORK__BigDecimal
  annualizedReturn_not: NETWORK__BigDecimal
  annualizedReturn_gt: NETWORK__BigDecimal
  annualizedReturn_lt: NETWORK__BigDecimal
  annualizedReturn_gte: NETWORK__BigDecimal
  annualizedReturn_lte: NETWORK__BigDecimal
  annualizedReturn_in: [NETWORK__BigDecimal!]
  annualizedReturn_not_in: [NETWORK__BigDecimal!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Allocation_orderBy {
  id
  indexer
  creator
  activeForIndexer
  subgraphDeployment
  allocatedTokens
  effectiveAllocation
  createdAtEpoch
  createdAtBlockHash
  createdAtBlockNumber
  closedAtEpoch
  closedAtBlockHash
  closedAtBlockNumber
  queryFeesCollected
  queryFeeRebates
  curatorRewards
  indexingRewards
  indexingIndexerRewards
  indexingDelegatorRewards
  poolClosedIn
  delegationFees
  status
  createdAt
  closedAt
  poi
  indexingRewardCutAtStart
  indexingRewardEffectiveCutAtStart
  queryFeeCutAtStart
  queryFeeEffectiveCutAtStart
  indexingRewardCutAtClose
  indexingRewardEffectiveCutAtClose
  queryFeeCutAtClose
  queryFeeEffectiveCutAtClose
  totalReturn
  annualizedReturn
}

"""
Attestation of a dispute

"""
type NETWORK__Attestation {
  """Concatenation of the requestCID and responseCID"""
  id: ID!
  """Subgraph deployment being disputed"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """RequestCID"""
  requestCID: String!
  """ResponseCID"""
  responseCID: String!
  """NOT IMPLEMENTED - Gas used by the attested query"""
  gasUsed: BigInt
  """NOT IMPLEMENTED - Bytes of attested query"""
  responseNumBytes: BigInt
  """V of the indexers signature"""
  v: Int!
  """R of the indexers signature"""
  r: String!
  """S of the indexers signature"""
  s: String!
}

input NETWORK__Attestation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  requestCID: String
  requestCID_not: String
  requestCID_gt: String
  requestCID_lt: String
  requestCID_gte: String
  requestCID_lte: String
  requestCID_in: [String!]
  requestCID_not_in: [String!]
  requestCID_contains: String
  requestCID_contains_nocase: String
  requestCID_not_contains: String
  requestCID_not_contains_nocase: String
  requestCID_starts_with: String
  requestCID_starts_with_nocase: String
  requestCID_not_starts_with: String
  requestCID_not_starts_with_nocase: String
  requestCID_ends_with: String
  requestCID_ends_with_nocase: String
  requestCID_not_ends_with: String
  requestCID_not_ends_with_nocase: String
  responseCID: String
  responseCID_not: String
  responseCID_gt: String
  responseCID_lt: String
  responseCID_gte: String
  responseCID_lte: String
  responseCID_in: [String!]
  responseCID_not_in: [String!]
  responseCID_contains: String
  responseCID_contains_nocase: String
  responseCID_not_contains: String
  responseCID_not_contains_nocase: String
  responseCID_starts_with: String
  responseCID_starts_with_nocase: String
  responseCID_not_starts_with: String
  responseCID_not_starts_with_nocase: String
  responseCID_ends_with: String
  responseCID_ends_with_nocase: String
  responseCID_not_ends_with: String
  responseCID_not_ends_with_nocase: String
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  responseNumBytes: BigInt
  responseNumBytes_not: BigInt
  responseNumBytes_gt: BigInt
  responseNumBytes_lt: BigInt
  responseNumBytes_gte: BigInt
  responseNumBytes_lte: BigInt
  responseNumBytes_in: [BigInt!]
  responseNumBytes_not_in: [BigInt!]
  v: Int
  v_not: Int
  v_gt: Int
  v_lt: Int
  v_gte: Int
  v_lte: Int
  v_in: [Int!]
  v_not_in: [Int!]
  r: String
  r_not: String
  r_gt: String
  r_lt: String
  r_gte: String
  r_lte: String
  r_in: [String!]
  r_not_in: [String!]
  r_contains: String
  r_contains_nocase: String
  r_not_contains: String
  r_not_contains_nocase: String
  r_starts_with: String
  r_starts_with_nocase: String
  r_not_starts_with: String
  r_not_starts_with_nocase: String
  r_ends_with: String
  r_ends_with_nocase: String
  r_not_ends_with: String
  r_not_ends_with_nocase: String
  s: String
  s_not: String
  s_gt: String
  s_lt: String
  s_gte: String
  s_lte: String
  s_in: [String!]
  s_not_in: [String!]
  s_contains: String
  s_contains_nocase: String
  s_not_contains: String
  s_not_contains_nocase: String
  s_starts_with: String
  s_starts_with_nocase: String
  s_not_starts_with: String
  s_not_starts_with_nocase: String
  s_ends_with: String
  s_ends_with_nocase: String
  s_not_ends_with: String
  s_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Attestation_orderBy {
  id
  subgraphDeployment
  requestCID
  responseCID
  gasUsed
  responseNumBytes
  v
  r
  s
}

"""
Authorized functions for the Manager

"""
type NETWORK__AuthorizedFunction {
  """Function signature (string)"""
  id: ID!
  """
  The contract address that is authorized to have this function called on itself
  """
  target: NETWORK__Bytes!
  """Hash of the function signature"""
  sigHash: NETWORK__Bytes!
  """Token lock Manager"""
  manager: NETWORK__TokenManager!
}

input NETWORK__AuthorizedFunction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  target: NETWORK__Bytes
  target_not: NETWORK__Bytes
  target_gt: NETWORK__Bytes
  target_lt: NETWORK__Bytes
  target_gte: NETWORK__Bytes
  target_lte: NETWORK__Bytes
  target_in: [NETWORK__Bytes!]
  target_not_in: [NETWORK__Bytes!]
  target_contains: NETWORK__Bytes
  target_not_contains: NETWORK__Bytes
  sigHash: NETWORK__Bytes
  sigHash_not: NETWORK__Bytes
  sigHash_gt: NETWORK__Bytes
  sigHash_lt: NETWORK__Bytes
  sigHash_gte: NETWORK__Bytes
  sigHash_lte: NETWORK__Bytes
  sigHash_in: [NETWORK__Bytes!]
  sigHash_not_in: [NETWORK__Bytes!]
  sigHash_contains: NETWORK__Bytes
  sigHash_not_contains: NETWORK__Bytes
  manager: String
  manager_not: String
  manager_gt: String
  manager_lt: String
  manager_gte: String
  manager_lte: String
  manager_in: [String!]
  manager_not_in: [String!]
  manager_contains: String
  manager_contains_nocase: String
  manager_not_contains: String
  manager_not_contains_nocase: String
  manager_starts_with: String
  manager_starts_with_nocase: String
  manager_not_starts_with: String
  manager_not_starts_with_nocase: String
  manager_ends_with: String
  manager_ends_with_nocase: String
  manager_not_ends_with: String
  manager_not_ends_with_nocase: String
  manager_: NETWORK__TokenManager_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__AuthorizedFunction_orderBy {
  id
  target
  sigHash
  manager
}

scalar NETWORK__BigDecimal

input NETWORK__BlockChangedFilter {
  number_gte: Int!
}

input NETWORK__Block_height {
  hash: NETWORK__Bytes
  number: Int
  number_gte: Int
}

scalar NETWORK__Bytes

"""
Curator with all Signals and metrics

"""
type NETWORK__Curator {
  """Eth address of the Curator"""
  id: ID!
  """Time this curator was created"""
  createdAt: Int!
  """Graph account of this curator"""
  account: NETWORK__GraphAccount!
  """CUMULATIVE tokens signalled on all the subgraphs"""
  totalSignalledTokens: BigInt!
  """CUMULATIVE tokens unsignalled on all the subgraphs"""
  totalUnsignalledTokens: BigInt!
  """Subgraphs the curator is curating"""
  signals(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Signal_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Signal_filter): [NETWORK__Signal!]!
  """
  Default display name is the current default name. Used for filtered queries
  """
  defaultDisplayName: String
  """CUMULATIVE tokens signalled on all names"""
  totalNameSignalledTokens: BigInt!
  """CUMULATIVE tokens unsignalled on all names"""
  totalNameUnsignalledTokens: BigInt!
  """CUMULATIVE withdrawn tokens from deprecated subgraphs"""
  totalWithdrawnTokens: BigInt!
  """Subgraphs the curator is curating"""
  nameSignals(skip: Int = 0, first: Int = 100, orderBy: NETWORK__NameSignal_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__NameSignal_filter): [NETWORK__NameSignal!]!
  """NOT IMPLEMENTED - Summation of realized rewards from all Signals"""
  realizedRewards: BigInt!
  """NOT IMPLEMENTED - Annualized rate of return on curator signal"""
  annualizedReturn: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Total return of the curator"""
  totalReturn: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Signaling efficiency of the curator"""
  signalingEfficiency: NETWORK__BigDecimal!
  """CURRENT summed name signal for all bonding curves"""
  totalNameSignal: NETWORK__BigDecimal!
  """
  Total curator cost basis of all shares of name pools purchased on all bonding curves
  """
  totalNameSignalAverageCostBasis: NETWORK__BigDecimal!
  """totalNameSignalAverageCostBasis / totalNameSignal"""
  totalAverageCostBasisPerNameSignal: NETWORK__BigDecimal!
  """CURRENT summed signal for all bonding curves"""
  totalSignal: NETWORK__BigDecimal!
  """
  Total curator cost basis of all version signal shares purchased on all bonding curves. Includes those purchased through GNS name pools
  """
  totalSignalAverageCostBasis: NETWORK__BigDecimal!
  """totalSignalAverageCostBasis / totalSignal"""
  totalAverageCostBasisPerSignal: NETWORK__BigDecimal!
  """Total amount of signals created by this user"""
  signalCount: Int!
  """Amount of active signals for this user"""
  activeSignalCount: Int!
  """Total amount of name signals created by this user"""
  nameSignalCount: Int!
  """Amount of active name signals for this user"""
  activeNameSignalCount: Int!
  """
  Total amount of name signals and signals created by this user. signalCount + nameSignalCount
  """
  combinedSignalCount: Int!
  """
  Amount of active name signals and signals for this user. signalCount + nameSignalCount
  """
  activeCombinedSignalCount: Int!
}

input NETWORK__Curator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: NETWORK__GraphAccount_filter
  totalSignalledTokens: BigInt
  totalSignalledTokens_not: BigInt
  totalSignalledTokens_gt: BigInt
  totalSignalledTokens_lt: BigInt
  totalSignalledTokens_gte: BigInt
  totalSignalledTokens_lte: BigInt
  totalSignalledTokens_in: [BigInt!]
  totalSignalledTokens_not_in: [BigInt!]
  totalUnsignalledTokens: BigInt
  totalUnsignalledTokens_not: BigInt
  totalUnsignalledTokens_gt: BigInt
  totalUnsignalledTokens_lt: BigInt
  totalUnsignalledTokens_gte: BigInt
  totalUnsignalledTokens_lte: BigInt
  totalUnsignalledTokens_in: [BigInt!]
  totalUnsignalledTokens_not_in: [BigInt!]
  signals_: NETWORK__Signal_filter
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  totalNameSignalledTokens: BigInt
  totalNameSignalledTokens_not: BigInt
  totalNameSignalledTokens_gt: BigInt
  totalNameSignalledTokens_lt: BigInt
  totalNameSignalledTokens_gte: BigInt
  totalNameSignalledTokens_lte: BigInt
  totalNameSignalledTokens_in: [BigInt!]
  totalNameSignalledTokens_not_in: [BigInt!]
  totalNameUnsignalledTokens: BigInt
  totalNameUnsignalledTokens_not: BigInt
  totalNameUnsignalledTokens_gt: BigInt
  totalNameUnsignalledTokens_lt: BigInt
  totalNameUnsignalledTokens_gte: BigInt
  totalNameUnsignalledTokens_lte: BigInt
  totalNameUnsignalledTokens_in: [BigInt!]
  totalNameUnsignalledTokens_not_in: [BigInt!]
  totalWithdrawnTokens: BigInt
  totalWithdrawnTokens_not: BigInt
  totalWithdrawnTokens_gt: BigInt
  totalWithdrawnTokens_lt: BigInt
  totalWithdrawnTokens_gte: BigInt
  totalWithdrawnTokens_lte: BigInt
  totalWithdrawnTokens_in: [BigInt!]
  totalWithdrawnTokens_not_in: [BigInt!]
  nameSignals_: NETWORK__NameSignal_filter
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  annualizedReturn: NETWORK__BigDecimal
  annualizedReturn_not: NETWORK__BigDecimal
  annualizedReturn_gt: NETWORK__BigDecimal
  annualizedReturn_lt: NETWORK__BigDecimal
  annualizedReturn_gte: NETWORK__BigDecimal
  annualizedReturn_lte: NETWORK__BigDecimal
  annualizedReturn_in: [NETWORK__BigDecimal!]
  annualizedReturn_not_in: [NETWORK__BigDecimal!]
  totalReturn: NETWORK__BigDecimal
  totalReturn_not: NETWORK__BigDecimal
  totalReturn_gt: NETWORK__BigDecimal
  totalReturn_lt: NETWORK__BigDecimal
  totalReturn_gte: NETWORK__BigDecimal
  totalReturn_lte: NETWORK__BigDecimal
  totalReturn_in: [NETWORK__BigDecimal!]
  totalReturn_not_in: [NETWORK__BigDecimal!]
  signalingEfficiency: NETWORK__BigDecimal
  signalingEfficiency_not: NETWORK__BigDecimal
  signalingEfficiency_gt: NETWORK__BigDecimal
  signalingEfficiency_lt: NETWORK__BigDecimal
  signalingEfficiency_gte: NETWORK__BigDecimal
  signalingEfficiency_lte: NETWORK__BigDecimal
  signalingEfficiency_in: [NETWORK__BigDecimal!]
  signalingEfficiency_not_in: [NETWORK__BigDecimal!]
  totalNameSignal: NETWORK__BigDecimal
  totalNameSignal_not: NETWORK__BigDecimal
  totalNameSignal_gt: NETWORK__BigDecimal
  totalNameSignal_lt: NETWORK__BigDecimal
  totalNameSignal_gte: NETWORK__BigDecimal
  totalNameSignal_lte: NETWORK__BigDecimal
  totalNameSignal_in: [NETWORK__BigDecimal!]
  totalNameSignal_not_in: [NETWORK__BigDecimal!]
  totalNameSignalAverageCostBasis: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_not: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_gt: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_lt: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_gte: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_lte: NETWORK__BigDecimal
  totalNameSignalAverageCostBasis_in: [NETWORK__BigDecimal!]
  totalNameSignalAverageCostBasis_not_in: [NETWORK__BigDecimal!]
  totalAverageCostBasisPerNameSignal: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_not: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_gt: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_lt: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_gte: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_lte: NETWORK__BigDecimal
  totalAverageCostBasisPerNameSignal_in: [NETWORK__BigDecimal!]
  totalAverageCostBasisPerNameSignal_not_in: [NETWORK__BigDecimal!]
  totalSignal: NETWORK__BigDecimal
  totalSignal_not: NETWORK__BigDecimal
  totalSignal_gt: NETWORK__BigDecimal
  totalSignal_lt: NETWORK__BigDecimal
  totalSignal_gte: NETWORK__BigDecimal
  totalSignal_lte: NETWORK__BigDecimal
  totalSignal_in: [NETWORK__BigDecimal!]
  totalSignal_not_in: [NETWORK__BigDecimal!]
  totalSignalAverageCostBasis: NETWORK__BigDecimal
  totalSignalAverageCostBasis_not: NETWORK__BigDecimal
  totalSignalAverageCostBasis_gt: NETWORK__BigDecimal
  totalSignalAverageCostBasis_lt: NETWORK__BigDecimal
  totalSignalAverageCostBasis_gte: NETWORK__BigDecimal
  totalSignalAverageCostBasis_lte: NETWORK__BigDecimal
  totalSignalAverageCostBasis_in: [NETWORK__BigDecimal!]
  totalSignalAverageCostBasis_not_in: [NETWORK__BigDecimal!]
  totalAverageCostBasisPerSignal: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_not: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_gt: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_lt: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_gte: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_lte: NETWORK__BigDecimal
  totalAverageCostBasisPerSignal_in: [NETWORK__BigDecimal!]
  totalAverageCostBasisPerSignal_not_in: [NETWORK__BigDecimal!]
  signalCount: Int
  signalCount_not: Int
  signalCount_gt: Int
  signalCount_lt: Int
  signalCount_gte: Int
  signalCount_lte: Int
  signalCount_in: [Int!]
  signalCount_not_in: [Int!]
  activeSignalCount: Int
  activeSignalCount_not: Int
  activeSignalCount_gt: Int
  activeSignalCount_lt: Int
  activeSignalCount_gte: Int
  activeSignalCount_lte: Int
  activeSignalCount_in: [Int!]
  activeSignalCount_not_in: [Int!]
  nameSignalCount: Int
  nameSignalCount_not: Int
  nameSignalCount_gt: Int
  nameSignalCount_lt: Int
  nameSignalCount_gte: Int
  nameSignalCount_lte: Int
  nameSignalCount_in: [Int!]
  nameSignalCount_not_in: [Int!]
  activeNameSignalCount: Int
  activeNameSignalCount_not: Int
  activeNameSignalCount_gt: Int
  activeNameSignalCount_lt: Int
  activeNameSignalCount_gte: Int
  activeNameSignalCount_lte: Int
  activeNameSignalCount_in: [Int!]
  activeNameSignalCount_not_in: [Int!]
  combinedSignalCount: Int
  combinedSignalCount_not: Int
  combinedSignalCount_gt: Int
  combinedSignalCount_lt: Int
  combinedSignalCount_gte: Int
  combinedSignalCount_lte: Int
  combinedSignalCount_in: [Int!]
  combinedSignalCount_not_in: [Int!]
  activeCombinedSignalCount: Int
  activeCombinedSignalCount_not: Int
  activeCombinedSignalCount_gt: Int
  activeCombinedSignalCount_lt: Int
  activeCombinedSignalCount_gte: Int
  activeCombinedSignalCount_lte: Int
  activeCombinedSignalCount_in: [Int!]
  activeCombinedSignalCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Curator_orderBy {
  id
  createdAt
  account
  totalSignalledTokens
  totalUnsignalledTokens
  signals
  defaultDisplayName
  totalNameSignalledTokens
  totalNameUnsignalledTokens
  totalWithdrawnTokens
  nameSignals
  realizedRewards
  annualizedReturn
  totalReturn
  signalingEfficiency
  totalNameSignal
  totalNameSignalAverageCostBasis
  totalAverageCostBasisPerNameSignal
  totalSignal
  totalSignalAverageCostBasis
  totalAverageCostBasisPerSignal
  signalCount
  activeSignalCount
  nameSignalCount
  activeNameSignalCount
  combinedSignalCount
  activeCombinedSignalCount
}

type NETWORK__CurrentSubgraphDeploymentRelation {
  """
  Auxiliary entity used to batch update Subgraph entities when signalling on the deployment changes. ID replicates the deployment ID and adds a counter, to make it easy to reproduce.
  """
  id: ID!
  subgraph: NETWORK__Subgraph!
  deployment: NETWORK__SubgraphDeployment!
  """
  Indicates whether this relation is active. This means that the deployment is still the current deployment for the named Subgraph
  """
  active: Boolean!
}

input NETWORK__CurrentSubgraphDeploymentRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  deployment: String
  deployment_not: String
  deployment_gt: String
  deployment_lt: String
  deployment_gte: String
  deployment_lte: String
  deployment_in: [String!]
  deployment_not_in: [String!]
  deployment_contains: String
  deployment_contains_nocase: String
  deployment_not_contains: String
  deployment_not_contains_nocase: String
  deployment_starts_with: String
  deployment_starts_with_nocase: String
  deployment_not_starts_with: String
  deployment_not_starts_with_nocase: String
  deployment_ends_with: String
  deployment_ends_with_nocase: String
  deployment_not_ends_with: String
  deployment_not_ends_with_nocase: String
  deployment_: NETWORK__SubgraphDeployment_filter
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__CurrentSubgraphDeploymentRelation_orderBy {
  id
  subgraph
  deployment
  active
}

"""
Delegator stake for a single Indexer

"""
type NETWORK__DelegatedStake {
  """Concatenation of Delegator address and Indexer address"""
  id: ID!
  """Index the stake is delegated to"""
  indexer: NETWORK__Indexer!
  """Delegator"""
  delegator: NETWORK__Delegator!
  """CUMULATIVE tokens delegated"""
  stakedTokens: BigInt!
  """CUMULATIVE tokens undelegated"""
  unstakedTokens: BigInt!
  """CURRENT tokens locked"""
  lockedTokens: BigInt!
  """Epoch the locked tokens get unlocked"""
  lockedUntil: Int!
  """
  Shares owned in the delegator pool. Used to calculate total amount delegated
  """
  shareAmount: BigInt!
  """
  The rate this delegator paid for their shares (calculated using average cost basis). Used for rewards calculations
  """
  personalExchangeRate: NETWORK__BigDecimal!
  """Realized rewards from undelegating and realizing a reward"""
  realizedRewards: NETWORK__BigDecimal!
  """Time this delegator first delegated to an indexer"""
  createdAt: Int!
  """Last time this delegator delegated towards this indexer"""
  lastDelegatedAt: Int
  """Last time this delegator undelegated from this indexer"""
  lastUndelegatedAt: Int
}

input NETWORK__DelegatedStake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: NETWORK__Indexer_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: NETWORK__Delegator_filter
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  unstakedTokens: BigInt
  unstakedTokens_not: BigInt
  unstakedTokens_gt: BigInt
  unstakedTokens_lt: BigInt
  unstakedTokens_gte: BigInt
  unstakedTokens_lte: BigInt
  unstakedTokens_in: [BigInt!]
  unstakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  lockedUntil: Int
  lockedUntil_not: Int
  lockedUntil_gt: Int
  lockedUntil_lt: Int
  lockedUntil_gte: Int
  lockedUntil_lte: Int
  lockedUntil_in: [Int!]
  lockedUntil_not_in: [Int!]
  shareAmount: BigInt
  shareAmount_not: BigInt
  shareAmount_gt: BigInt
  shareAmount_lt: BigInt
  shareAmount_gte: BigInt
  shareAmount_lte: BigInt
  shareAmount_in: [BigInt!]
  shareAmount_not_in: [BigInt!]
  personalExchangeRate: NETWORK__BigDecimal
  personalExchangeRate_not: NETWORK__BigDecimal
  personalExchangeRate_gt: NETWORK__BigDecimal
  personalExchangeRate_lt: NETWORK__BigDecimal
  personalExchangeRate_gte: NETWORK__BigDecimal
  personalExchangeRate_lte: NETWORK__BigDecimal
  personalExchangeRate_in: [NETWORK__BigDecimal!]
  personalExchangeRate_not_in: [NETWORK__BigDecimal!]
  realizedRewards: NETWORK__BigDecimal
  realizedRewards_not: NETWORK__BigDecimal
  realizedRewards_gt: NETWORK__BigDecimal
  realizedRewards_lt: NETWORK__BigDecimal
  realizedRewards_gte: NETWORK__BigDecimal
  realizedRewards_lte: NETWORK__BigDecimal
  realizedRewards_in: [NETWORK__BigDecimal!]
  realizedRewards_not_in: [NETWORK__BigDecimal!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  lastDelegatedAt: Int
  lastDelegatedAt_not: Int
  lastDelegatedAt_gt: Int
  lastDelegatedAt_lt: Int
  lastDelegatedAt_gte: Int
  lastDelegatedAt_lte: Int
  lastDelegatedAt_in: [Int!]
  lastDelegatedAt_not_in: [Int!]
  lastUndelegatedAt: Int
  lastUndelegatedAt_not: Int
  lastUndelegatedAt_gt: Int
  lastUndelegatedAt_lt: Int
  lastUndelegatedAt_gte: Int
  lastUndelegatedAt_lte: Int
  lastUndelegatedAt_in: [Int!]
  lastUndelegatedAt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__DelegatedStake_orderBy {
  id
  indexer
  delegator
  stakedTokens
  unstakedTokens
  lockedTokens
  lockedUntil
  shareAmount
  personalExchangeRate
  realizedRewards
  createdAt
  lastDelegatedAt
  lastUndelegatedAt
}

"""
Delegator with all their delegated stakes towards Indexers

"""
type NETWORK__Delegator {
  """Delegator address"""
  id: ID!
  """Graph account of the delegator"""
  account: NETWORK__GraphAccount!
  """Stakes of this delegator"""
  stakes(skip: Int = 0, first: Int = 100, orderBy: NETWORK__DelegatedStake_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__DelegatedStake_filter): [NETWORK__DelegatedStake!]!
  """CUMULATIVE staked tokens in DelegatorStakes of this Delegator"""
  totalStakedTokens: BigInt!
  """CUMULATIVE unstaked tokens in DelegatorStakes of this Delegator"""
  totalUnstakedTokens: BigInt!
  """Time created at"""
  createdAt: Int!
  """
  Total realized rewards on all delegated stakes. Realized rewards are added when undelegating and realizing a profit
  """
  totalRealizedRewards: NETWORK__BigDecimal!
  """Total DelegatedStake entity count (Active and inactive)"""
  stakesCount: Int!
  """
  Active DelegatedStake entity count. Active means it still has GRT delegated
  """
  activeStakesCount: Int!
  """
  Default display name is the current default name. Used for filtered queries
  """
  defaultDisplayName: String
}

input NETWORK__Delegator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: NETWORK__GraphAccount_filter
  stakes_: NETWORK__DelegatedStake_filter
  totalStakedTokens: BigInt
  totalStakedTokens_not: BigInt
  totalStakedTokens_gt: BigInt
  totalStakedTokens_lt: BigInt
  totalStakedTokens_gte: BigInt
  totalStakedTokens_lte: BigInt
  totalStakedTokens_in: [BigInt!]
  totalStakedTokens_not_in: [BigInt!]
  totalUnstakedTokens: BigInt
  totalUnstakedTokens_not: BigInt
  totalUnstakedTokens_gt: BigInt
  totalUnstakedTokens_lt: BigInt
  totalUnstakedTokens_gte: BigInt
  totalUnstakedTokens_lte: BigInt
  totalUnstakedTokens_in: [BigInt!]
  totalUnstakedTokens_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  totalRealizedRewards: NETWORK__BigDecimal
  totalRealizedRewards_not: NETWORK__BigDecimal
  totalRealizedRewards_gt: NETWORK__BigDecimal
  totalRealizedRewards_lt: NETWORK__BigDecimal
  totalRealizedRewards_gte: NETWORK__BigDecimal
  totalRealizedRewards_lte: NETWORK__BigDecimal
  totalRealizedRewards_in: [NETWORK__BigDecimal!]
  totalRealizedRewards_not_in: [NETWORK__BigDecimal!]
  stakesCount: Int
  stakesCount_not: Int
  stakesCount_gt: Int
  stakesCount_lt: Int
  stakesCount_gte: Int
  stakesCount_lte: Int
  stakesCount_in: [Int!]
  stakesCount_not_in: [Int!]
  activeStakesCount: Int
  activeStakesCount_not: Int
  activeStakesCount_gt: Int
  activeStakesCount_lt: Int
  activeStakesCount_gte: Int
  activeStakesCount_lte: Int
  activeStakesCount_in: [Int!]
  activeStakesCount_not_in: [Int!]
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Delegator_orderBy {
  id
  account
  stakes
  totalStakedTokens
  totalUnstakedTokens
  createdAt
  totalRealizedRewards
  stakesCount
  activeStakesCount
  defaultDisplayName
}

"""
Dispute of a query. Includes single query, conflicting attestation, and indexing disputes

"""
type NETWORK__Dispute {
  """Dispute ID"""
  id: ID!
  """Subgraph deployment being disputed"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """Fisherman address"""
  fisherman: NETWORK__GraphAccount!
  """Fisherman deposit"""
  deposit: BigInt!
  """Time dispute was created"""
  createdAt: Int!
  """Time dispute was closed at"""
  closedAt: Int!
  """Status of the dispute. Accepted means the Indexer was slashed"""
  status: NETWORK__DisputeStatus!
  """Total amount of tokens slashed on the dispute"""
  tokensSlashed: NETWORK__BigDecimal!
  """Amount of the slashed tokens that was burned"""
  tokensBurned: NETWORK__BigDecimal!
  """Amount of the slashed tokens that was payed as reward to the fisherman"""
  tokensRewarded: BigInt!
  """Type of dispute"""
  type: NETWORK__DisputeType!
  """Indexer disputed"""
  indexer: NETWORK__GraphAccount!
  """Attestation. Only for single query and conflicting attestations"""
  attestation: NETWORK__Attestation
  """Linked dispute of other Indexer. Only for conflicting attestation"""
  linkedDispute: NETWORK__Dispute
  """Allocation ID. Only for Indexing Disputes"""
  allocation: NETWORK__Allocation
}

enum NETWORK__DisputeStatus {
  Undecided
  Accepted
  Rejected
  Draw
}

enum NETWORK__DisputeType {
  SingleQuery
  Conflicting
  Indexing
}

input NETWORK__Dispute_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  fisherman: String
  fisherman_not: String
  fisherman_gt: String
  fisherman_lt: String
  fisherman_gte: String
  fisherman_lte: String
  fisherman_in: [String!]
  fisherman_not_in: [String!]
  fisherman_contains: String
  fisherman_contains_nocase: String
  fisherman_not_contains: String
  fisherman_not_contains_nocase: String
  fisherman_starts_with: String
  fisherman_starts_with_nocase: String
  fisherman_not_starts_with: String
  fisherman_not_starts_with_nocase: String
  fisherman_ends_with: String
  fisherman_ends_with_nocase: String
  fisherman_not_ends_with: String
  fisherman_not_ends_with_nocase: String
  fisherman_: NETWORK__GraphAccount_filter
  deposit: BigInt
  deposit_not: BigInt
  deposit_gt: BigInt
  deposit_lt: BigInt
  deposit_gte: BigInt
  deposit_lte: BigInt
  deposit_in: [BigInt!]
  deposit_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  closedAt: Int
  closedAt_not: Int
  closedAt_gt: Int
  closedAt_lt: Int
  closedAt_gte: Int
  closedAt_lte: Int
  closedAt_in: [Int!]
  closedAt_not_in: [Int!]
  status: NETWORK__DisputeStatus
  status_not: NETWORK__DisputeStatus
  status_in: [NETWORK__DisputeStatus!]
  status_not_in: [NETWORK__DisputeStatus!]
  tokensSlashed: NETWORK__BigDecimal
  tokensSlashed_not: NETWORK__BigDecimal
  tokensSlashed_gt: NETWORK__BigDecimal
  tokensSlashed_lt: NETWORK__BigDecimal
  tokensSlashed_gte: NETWORK__BigDecimal
  tokensSlashed_lte: NETWORK__BigDecimal
  tokensSlashed_in: [NETWORK__BigDecimal!]
  tokensSlashed_not_in: [NETWORK__BigDecimal!]
  tokensBurned: NETWORK__BigDecimal
  tokensBurned_not: NETWORK__BigDecimal
  tokensBurned_gt: NETWORK__BigDecimal
  tokensBurned_lt: NETWORK__BigDecimal
  tokensBurned_gte: NETWORK__BigDecimal
  tokensBurned_lte: NETWORK__BigDecimal
  tokensBurned_in: [NETWORK__BigDecimal!]
  tokensBurned_not_in: [NETWORK__BigDecimal!]
  tokensRewarded: BigInt
  tokensRewarded_not: BigInt
  tokensRewarded_gt: BigInt
  tokensRewarded_lt: BigInt
  tokensRewarded_gte: BigInt
  tokensRewarded_lte: BigInt
  tokensRewarded_in: [BigInt!]
  tokensRewarded_not_in: [BigInt!]
  type: NETWORK__DisputeType
  type_not: NETWORK__DisputeType
  type_in: [NETWORK__DisputeType!]
  type_not_in: [NETWORK__DisputeType!]
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: NETWORK__GraphAccount_filter
  attestation: String
  attestation_not: String
  attestation_gt: String
  attestation_lt: String
  attestation_gte: String
  attestation_lte: String
  attestation_in: [String!]
  attestation_not_in: [String!]
  attestation_contains: String
  attestation_contains_nocase: String
  attestation_not_contains: String
  attestation_not_contains_nocase: String
  attestation_starts_with: String
  attestation_starts_with_nocase: String
  attestation_not_starts_with: String
  attestation_not_starts_with_nocase: String
  attestation_ends_with: String
  attestation_ends_with_nocase: String
  attestation_not_ends_with: String
  attestation_not_ends_with_nocase: String
  attestation_: NETWORK__Attestation_filter
  linkedDispute: String
  linkedDispute_not: String
  linkedDispute_gt: String
  linkedDispute_lt: String
  linkedDispute_gte: String
  linkedDispute_lte: String
  linkedDispute_in: [String!]
  linkedDispute_not_in: [String!]
  linkedDispute_contains: String
  linkedDispute_contains_nocase: String
  linkedDispute_not_contains: String
  linkedDispute_not_contains_nocase: String
  linkedDispute_starts_with: String
  linkedDispute_starts_with_nocase: String
  linkedDispute_not_starts_with: String
  linkedDispute_not_starts_with_nocase: String
  linkedDispute_ends_with: String
  linkedDispute_ends_with_nocase: String
  linkedDispute_not_ends_with: String
  linkedDispute_not_ends_with_nocase: String
  linkedDispute_: NETWORK__Dispute_filter
  allocation: String
  allocation_not: String
  allocation_gt: String
  allocation_lt: String
  allocation_gte: String
  allocation_lte: String
  allocation_in: [String!]
  allocation_not_in: [String!]
  allocation_contains: String
  allocation_contains_nocase: String
  allocation_not_contains: String
  allocation_not_contains_nocase: String
  allocation_starts_with: String
  allocation_starts_with_nocase: String
  allocation_not_starts_with: String
  allocation_not_starts_with_nocase: String
  allocation_ends_with: String
  allocation_ends_with_nocase: String
  allocation_not_ends_with: String
  allocation_not_ends_with_nocase: String
  allocation_: NETWORK__Allocation_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Dispute_orderBy {
  id
  subgraphDeployment
  fisherman
  deposit
  createdAt
  closedAt
  status
  tokensSlashed
  tokensBurned
  tokensRewarded
  type
  indexer
  attestation
  linkedDispute
  allocation
}

"""
Epoch aggregate data for network statistics on signaling, rewards, and query fees

"""
type NETWORK__Epoch {
  """Epoch number"""
  id: ID!
  """Start block of the epoch"""
  startBlock: Int!
  """End block of the epoch"""
  endBlock: Int!
  """Signaled tokens during this epoch"""
  signalledTokens: BigInt!
  """Stake deposited during this epoch"""
  stakeDeposited: BigInt!
  """
  Total amount of query fees generated during this epoch (Includes everything)
  """
  totalQueryFees: BigInt!
  """
  Amount of query fees generated that were burnt by the 1% protocol tax during this epoch
  """
  taxedQueryFees: BigInt!
  """
  Amount of query fees generated that are going to the rebate pool for indexers during this epoch
  """
  queryFeesCollected: BigInt!
  """
  Amount of query fees generated that are going to curators during this epoch
  """
  curatorQueryFees: BigInt!
  """
  Rebate amount claimed from the protocol through cobbs douglas during this epoch (Doesn't correlate to the queryFeesCollected for this epoch since there's a 7 day period before claiming)
  """
  queryFeeRebates: BigInt!
  """
  Total indexing rewards earned in this epoch. Includes both delegator and indexer rewards
  """
  totalRewards: BigInt!
  """Total indexing rewards earned in this epoch by indexers"""
  totalIndexerRewards: BigInt!
  """Total indexing rewards earned in this epoch by delegators"""
  totalDelegatorRewards: BigInt!
}

input NETWORK__Epoch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startBlock: Int
  startBlock_not: Int
  startBlock_gt: Int
  startBlock_lt: Int
  startBlock_gte: Int
  startBlock_lte: Int
  startBlock_in: [Int!]
  startBlock_not_in: [Int!]
  endBlock: Int
  endBlock_not: Int
  endBlock_gt: Int
  endBlock_lt: Int
  endBlock_gte: Int
  endBlock_lte: Int
  endBlock_in: [Int!]
  endBlock_not_in: [Int!]
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  stakeDeposited: BigInt
  stakeDeposited_not: BigInt
  stakeDeposited_gt: BigInt
  stakeDeposited_lt: BigInt
  stakeDeposited_gte: BigInt
  stakeDeposited_lte: BigInt
  stakeDeposited_in: [BigInt!]
  stakeDeposited_not_in: [BigInt!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  taxedQueryFees: BigInt
  taxedQueryFees_not: BigInt
  taxedQueryFees_gt: BigInt
  taxedQueryFees_lt: BigInt
  taxedQueryFees_gte: BigInt
  taxedQueryFees_lte: BigInt
  taxedQueryFees_in: [BigInt!]
  taxedQueryFees_not_in: [BigInt!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  curatorQueryFees: BigInt
  curatorQueryFees_not: BigInt
  curatorQueryFees_gt: BigInt
  curatorQueryFees_lt: BigInt
  curatorQueryFees_gte: BigInt
  curatorQueryFees_lte: BigInt
  curatorQueryFees_in: [BigInt!]
  curatorQueryFees_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  totalRewards: BigInt
  totalRewards_not: BigInt
  totalRewards_gt: BigInt
  totalRewards_lt: BigInt
  totalRewards_gte: BigInt
  totalRewards_lte: BigInt
  totalRewards_in: [BigInt!]
  totalRewards_not_in: [BigInt!]
  totalIndexerRewards: BigInt
  totalIndexerRewards_not: BigInt
  totalIndexerRewards_gt: BigInt
  totalIndexerRewards_lt: BigInt
  totalIndexerRewards_gte: BigInt
  totalIndexerRewards_lte: BigInt
  totalIndexerRewards_in: [BigInt!]
  totalIndexerRewards_not_in: [BigInt!]
  totalDelegatorRewards: BigInt
  totalDelegatorRewards_not: BigInt
  totalDelegatorRewards_gt: BigInt
  totalDelegatorRewards_lt: BigInt
  totalDelegatorRewards_gte: BigInt
  totalDelegatorRewards_lte: BigInt
  totalDelegatorRewards_in: [BigInt!]
  totalDelegatorRewards_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Epoch_orderBy {
  id
  startBlock
  endBlock
  signalledTokens
  stakeDeposited
  totalQueryFees
  taxedQueryFees
  queryFeesCollected
  curatorQueryFees
  queryFeeRebates
  totalRewards
  totalIndexerRewards
  totalDelegatorRewards
}

"""
An account within the graph network. Contains metadata and all relevant data for this accounts
delegating, curating, and indexing.

"""
type NETWORK__GraphAccount {
  """Graph account ID"""
  id: ID!
  """All names this graph account has claimed from all name systems"""
  names(skip: Int = 0, first: Int = 100, orderBy: NETWORK__GraphAccountName_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__GraphAccountName_filter): [NETWORK__GraphAccountName!]!
  """Default name the graph account has chosen"""
  defaultName: NETWORK__GraphAccountName
  """Time the account was created"""
  createdAt: Int!
  """
  Default display name is the current default name. Used for filtered queries in the explorer
  """
  defaultDisplayName: String
  """True if it is an organization. False if it is an individual"""
  isOrganization: Boolean
  """IPFS hash with account metadata details"""
  metadataHash: NETWORK__Bytes
  """Main repository of code for the graph account"""
  codeRepository: String
  """Description of the graph account"""
  description: String
  """Image URL"""
  image: String
  """Website URL"""
  website: String
  """Display name. Not unique"""
  displayName: String
  """Operator of other Graph Accounts"""
  operatorOf(skip: Int = 0, first: Int = 100, orderBy: NETWORK__GraphAccount_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__GraphAccount_filter): [NETWORK__GraphAccount!]!
  """Operators of this Graph Accounts"""
  operators(skip: Int = 0, first: Int = 100, orderBy: NETWORK__GraphAccount_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__GraphAccount_filter): [NETWORK__GraphAccount!]!
  """Graph token balance"""
  balance: BigInt!
  """Amount this account has approved staking to transfer their GRT"""
  curationApproval: BigInt!
  """Amount this account has approved curation to transfer their GRT"""
  stakingApproval: BigInt!
  """Amount this account has approved the GNS to transfer their GRT"""
  gnsApproval: BigInt!
  """Subgraphs the graph account owns"""
  subgraphs(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Subgraph_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Subgraph_filter): [NETWORK__Subgraph!]!
  """Time that this graph account became a developer"""
  developerCreatedAt: Int
  """
  NOT IMPLEMENTED - Total query fees the subgraphs created by this account have accumulated in GRT
  """
  subgraphQueryFees: BigInt!
  """Disputes this graph account has created"""
  createdDisputes(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Dispute_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Dispute_filter): [NETWORK__Dispute!]!
  """Disputes against this graph account"""
  disputesAgainst(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Dispute_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Dispute_filter): [NETWORK__Dispute!]!
  """Curator fields for this GraphAccount. Null if never curated"""
  curator: NETWORK__Curator
  """Indexer fields for this GraphAccount. Null if never indexed"""
  indexer: NETWORK__Indexer
  """Delegator fields for this GraphAccount. Null if never delegated"""
  delegator: NETWORK__Delegator
  """Name signal transactions created by this GraphAccount"""
  nameSignalTransactions(skip: Int = 0, first: Int = 100, orderBy: NETWORK__NameSignalTransaction_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__NameSignalTransaction_filter): [NETWORK__NameSignalTransaction!]!
  tokenLockWallets(skip: Int = 0, first: Int = 100, orderBy: NETWORK__TokenLockWallet_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__TokenLockWallet_filter): [NETWORK__TokenLockWallet!]!
}

"""
A name chosen by a Graph Account from a Name System such as ENS. This allows Graph Accounts to be
recognized by name, rather than just an Ethereum address

"""
type NETWORK__GraphAccountName {
  """Name system concatenated with the unique ID of the name system"""
  id: ID!
  """Name system for this name"""
  nameSystem: NETWORK__NameSystem!
  """Name from the system"""
  name: String!
  """
  The graph account that owned the name when it was linked in the graph network
  """
  graphAccount: NETWORK__GraphAccount
}

input NETWORK__GraphAccountName_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nameSystem: NETWORK__NameSystem
  nameSystem_not: NETWORK__NameSystem
  nameSystem_in: [NETWORK__NameSystem!]
  nameSystem_not_in: [NETWORK__NameSystem!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  graphAccount: String
  graphAccount_not: String
  graphAccount_gt: String
  graphAccount_lt: String
  graphAccount_gte: String
  graphAccount_lte: String
  graphAccount_in: [String!]
  graphAccount_not_in: [String!]
  graphAccount_contains: String
  graphAccount_contains_nocase: String
  graphAccount_not_contains: String
  graphAccount_not_contains_nocase: String
  graphAccount_starts_with: String
  graphAccount_starts_with_nocase: String
  graphAccount_not_starts_with: String
  graphAccount_not_starts_with_nocase: String
  graphAccount_ends_with: String
  graphAccount_ends_with_nocase: String
  graphAccount_not_ends_with: String
  graphAccount_not_ends_with_nocase: String
  graphAccount_: NETWORK__GraphAccount_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__GraphAccountName_orderBy {
  id
  nameSystem
  name
  graphAccount
}

input NETWORK__GraphAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  names_: NETWORK__GraphAccountName_filter
  defaultName: String
  defaultName_not: String
  defaultName_gt: String
  defaultName_lt: String
  defaultName_gte: String
  defaultName_lte: String
  defaultName_in: [String!]
  defaultName_not_in: [String!]
  defaultName_contains: String
  defaultName_contains_nocase: String
  defaultName_not_contains: String
  defaultName_not_contains_nocase: String
  defaultName_starts_with: String
  defaultName_starts_with_nocase: String
  defaultName_not_starts_with: String
  defaultName_not_starts_with_nocase: String
  defaultName_ends_with: String
  defaultName_ends_with_nocase: String
  defaultName_not_ends_with: String
  defaultName_not_ends_with_nocase: String
  defaultName_: NETWORK__GraphAccountName_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  isOrganization: Boolean
  isOrganization_not: Boolean
  isOrganization_in: [Boolean!]
  isOrganization_not_in: [Boolean!]
  metadataHash: NETWORK__Bytes
  metadataHash_not: NETWORK__Bytes
  metadataHash_gt: NETWORK__Bytes
  metadataHash_lt: NETWORK__Bytes
  metadataHash_gte: NETWORK__Bytes
  metadataHash_lte: NETWORK__Bytes
  metadataHash_in: [NETWORK__Bytes!]
  metadataHash_not_in: [NETWORK__Bytes!]
  metadataHash_contains: NETWORK__Bytes
  metadataHash_not_contains: NETWORK__Bytes
  codeRepository: String
  codeRepository_not: String
  codeRepository_gt: String
  codeRepository_lt: String
  codeRepository_gte: String
  codeRepository_lte: String
  codeRepository_in: [String!]
  codeRepository_not_in: [String!]
  codeRepository_contains: String
  codeRepository_contains_nocase: String
  codeRepository_not_contains: String
  codeRepository_not_contains_nocase: String
  codeRepository_starts_with: String
  codeRepository_starts_with_nocase: String
  codeRepository_not_starts_with: String
  codeRepository_not_starts_with_nocase: String
  codeRepository_ends_with: String
  codeRepository_ends_with_nocase: String
  codeRepository_not_ends_with: String
  codeRepository_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  operatorOf_: NETWORK__GraphAccount_filter
  operators: [String!]
  operators_not: [String!]
  operators_contains: [String!]
  operators_contains_nocase: [String!]
  operators_not_contains: [String!]
  operators_not_contains_nocase: [String!]
  operators_: NETWORK__GraphAccount_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  curationApproval: BigInt
  curationApproval_not: BigInt
  curationApproval_gt: BigInt
  curationApproval_lt: BigInt
  curationApproval_gte: BigInt
  curationApproval_lte: BigInt
  curationApproval_in: [BigInt!]
  curationApproval_not_in: [BigInt!]
  stakingApproval: BigInt
  stakingApproval_not: BigInt
  stakingApproval_gt: BigInt
  stakingApproval_lt: BigInt
  stakingApproval_gte: BigInt
  stakingApproval_lte: BigInt
  stakingApproval_in: [BigInt!]
  stakingApproval_not_in: [BigInt!]
  gnsApproval: BigInt
  gnsApproval_not: BigInt
  gnsApproval_gt: BigInt
  gnsApproval_lt: BigInt
  gnsApproval_gte: BigInt
  gnsApproval_lte: BigInt
  gnsApproval_in: [BigInt!]
  gnsApproval_not_in: [BigInt!]
  subgraphs_: NETWORK__Subgraph_filter
  developerCreatedAt: Int
  developerCreatedAt_not: Int
  developerCreatedAt_gt: Int
  developerCreatedAt_lt: Int
  developerCreatedAt_gte: Int
  developerCreatedAt_lte: Int
  developerCreatedAt_in: [Int!]
  developerCreatedAt_not_in: [Int!]
  subgraphQueryFees: BigInt
  subgraphQueryFees_not: BigInt
  subgraphQueryFees_gt: BigInt
  subgraphQueryFees_lt: BigInt
  subgraphQueryFees_gte: BigInt
  subgraphQueryFees_lte: BigInt
  subgraphQueryFees_in: [BigInt!]
  subgraphQueryFees_not_in: [BigInt!]
  createdDisputes_: NETWORK__Dispute_filter
  disputesAgainst_: NETWORK__Dispute_filter
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: NETWORK__Curator_filter
  indexer: String
  indexer_not: String
  indexer_gt: String
  indexer_lt: String
  indexer_gte: String
  indexer_lte: String
  indexer_in: [String!]
  indexer_not_in: [String!]
  indexer_contains: String
  indexer_contains_nocase: String
  indexer_not_contains: String
  indexer_not_contains_nocase: String
  indexer_starts_with: String
  indexer_starts_with_nocase: String
  indexer_not_starts_with: String
  indexer_not_starts_with_nocase: String
  indexer_ends_with: String
  indexer_ends_with_nocase: String
  indexer_not_ends_with: String
  indexer_not_ends_with_nocase: String
  indexer_: NETWORK__Indexer_filter
  delegator: String
  delegator_not: String
  delegator_gt: String
  delegator_lt: String
  delegator_gte: String
  delegator_lte: String
  delegator_in: [String!]
  delegator_not_in: [String!]
  delegator_contains: String
  delegator_contains_nocase: String
  delegator_not_contains: String
  delegator_not_contains_nocase: String
  delegator_starts_with: String
  delegator_starts_with_nocase: String
  delegator_not_starts_with: String
  delegator_not_starts_with_nocase: String
  delegator_ends_with: String
  delegator_ends_with_nocase: String
  delegator_not_ends_with: String
  delegator_not_ends_with_nocase: String
  delegator_: NETWORK__Delegator_filter
  nameSignalTransactions_: NETWORK__NameSignalTransaction_filter
  tokenLockWallets: [String!]
  tokenLockWallets_not: [String!]
  tokenLockWallets_contains: [String!]
  tokenLockWallets_contains_nocase: [String!]
  tokenLockWallets_not_contains: [String!]
  tokenLockWallets_not_contains_nocase: [String!]
  tokenLockWallets_: NETWORK__TokenLockWallet_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__GraphAccount_orderBy {
  id
  names
  defaultName
  createdAt
  defaultDisplayName
  isOrganization
  metadataHash
  codeRepository
  description
  image
  website
  displayName
  operatorOf
  operators
  balance
  curationApproval
  stakingApproval
  gnsApproval
  subgraphs
  developerCreatedAt
  subgraphQueryFees
  createdDisputes
  disputesAgainst
  curator
  indexer
  delegator
  nameSignalTransactions
  tokenLockWallets
}

"""
Graph Network global parameters and contract addresses

"""
type NETWORK__GraphNetwork {
  """ID is set to 1"""
  id: ID!
  """Controller address"""
  controller: NETWORK__Bytes!
  """Graph token address"""
  graphToken: NETWORK__Bytes!
  """Epoch manager address"""
  epochManager: NETWORK__Bytes!
  """Epoch Manager implementations. Last in the array is current"""
  epochManagerImplementations: [NETWORK__Bytes!]!
  """Curation address"""
  curation: NETWORK__Bytes!
  """Curation implementations. Last in the array is current"""
  curationImplementations: [NETWORK__Bytes!]!
  """Staking address"""
  staking: NETWORK__Bytes!
  """Graph token implementations. Last in the array is current"""
  stakingImplementations: [NETWORK__Bytes!]!
  """Dispute manager address"""
  disputeManager: NETWORK__Bytes!
  """GNS address"""
  gns: NETWORK__Bytes!
  """Service registry address"""
  serviceRegistry: NETWORK__Bytes!
  """Rewards manager address"""
  rewardsManager: NETWORK__Bytes!
  """Rewards Manager implementations. Last in the array is current"""
  rewardsManagerImplementations: [NETWORK__Bytes!]!
  """True if the protocol is paused"""
  isPaused: Boolean!
  """True if the protocol is partially paused"""
  isPartialPaused: Boolean!
  """Governor of the controller (i.e. the whole protocol)"""
  governor: NETWORK__Bytes!
  """Pause guardian address"""
  pauseGuardian: NETWORK__Bytes!
  """Percentage of fees going to curators. In parts per million"""
  curationPercentage: Int!
  """Percentage of fees burn as protocol fee. In parts per million"""
  protocolFeePercentage: Int!
  """
  Ratio of max staked delegation tokens to indexers stake that earns rewards
  """
  delegationRatio: Int!
  """Epochs to wait before fees can be claimed in rebate pool"""
  channelDisputeEpochs: Int!
  """Epochs to wait before delegators can settle"""
  maxAllocationEpochs: Int!
  """Time in blocks needed to wait to unstake"""
  thawingPeriod: Int!
  """
  Minimum time an Indexer must use for resetting their Delegation parameters
  """
  delegationParametersCooldown: Int!
  """Minimum GRT an indexer must stake"""
  minimumIndexerStake: BigInt!
  """Contracts that have been approved to be a slasher"""
  slashers: [NETWORK__Bytes!]
  """Time in epochs a delegator needs to wait to withdraw delegated stake"""
  delegationUnbondingPeriod: Int!
  """Alpha in the cobbs douglas formula"""
  rebateRatio: NETWORK__BigDecimal!
  """Tax that delegators pay to deposit. In Parts per million"""
  delegationTaxPercentage: Int!
  """Asset holder for the protocol"""
  assetHolders: [NETWORK__Bytes!]
  """The total amount of GRT staked in the staking contract"""
  totalTokensStaked: BigInt!
  """
  NOT IMPLEMENTED - Total tokens that are settled and waiting to be claimed
  """
  totalTokensClaimable: BigInt!
  """
  Total tokens that are currently locked or withdrawable in the network from unstaking
  """
  totalUnstakedTokensLocked: BigInt!
  """Total GRT currently in allocation"""
  totalTokensAllocated: BigInt!
  """Total delegated tokens in the protocol"""
  totalDelegatedTokens: BigInt!
  """The total amount of GRT signalled in the Curation contract"""
  totalTokensSignalled: BigInt!
  """Total GRT currently curating via the Auto-Migrate function"""
  totalTokensSignalledAutoMigrate: NETWORK__BigDecimal!
  """Total GRT currently curating to a specific version"""
  totalTokensSignalledDirectly: NETWORK__BigDecimal!
  """Total query fees generated in the network"""
  totalQueryFees: BigInt!
  """Total query fees collected by indexers"""
  totalIndexerQueryFeesCollected: BigInt!
  """Total query fees rebates claimed by indexers"""
  totalIndexerQueryFeeRebates: BigInt!
  """Total query fees rebates claimed by delegators"""
  totalDelegatorQueryFeeRebates: BigInt!
  """Total query fees payed to curators"""
  totalCuratorQueryFees: BigInt!
  """Total protocol taxes applied to the query fees"""
  totalTaxedQueryFees: BigInt!
  """
  Total unclaimed rebates. Includes unclaimed rebates, and rebates lost in cobbs douglas 
  """
  totalUnclaimedQueryFeeRebates: BigInt!
  """Total indexing rewards minted"""
  totalIndexingRewards: BigInt!
  """Total indexing rewards minted to Delegators"""
  totalIndexingDelegatorRewards: BigInt!
  """Total indexing rewards minted to Indexers"""
  totalIndexingIndexerRewards: BigInt!
  """
  The issuance rate of GRT per block. To get annual rate do (networkGRTIssuance * 10^-18)^(blocksPerYear)
  """
  networkGRTIssuance: BigInt!
  """Address of the availability oracle"""
  subgraphAvailabilityOracle: NETWORK__Bytes!
  """Default reserve ratio for all subgraphs. In parts per million"""
  defaultReserveRatio: Int!
  """Minimum amount of tokens needed to start curating"""
  minimumCurationDeposit: BigInt!
  """The fee charged when a curator withdraws signal. In parts per million"""
  curationTaxPercentage: Int!
  """Percentage of the GNS migration tax payed by the subgraph owner"""
  ownerTaxPercentage: Int!
  """Graph Token supply"""
  totalSupply: BigInt!
  """NOT IMPLEMENTED - Price of one GRT in USD"""
  GRTinUSD: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Price of one GRT in ETH"""
  GRTinETH: NETWORK__BigDecimal
  """Total amount of GRT minted"""
  totalGRTMinted: BigInt!
  """Total amount of GRT burned"""
  totalGRTBurned: BigInt!
  """Epoch Length in blocks"""
  epochLength: Int!
  """Epoch that was last run"""
  lastRunEpoch: Int!
  """Epoch when epoch length was last updated"""
  lastLengthUpdateEpoch: Int!
  """Block when epoch length was last updated"""
  lastLengthUpdateBlock: Int!
  """Current epoch the protocol is in"""
  currentEpoch: Int!
  """Total indexers"""
  indexerCount: Int!
  """Number of indexers that currently have some stake in the protocol"""
  stakedIndexersCount: Int!
  """Total amount of delegators historically"""
  delegatorCount: Int!
  """
  Total active delegators. Those that still have at least one active delegation.
  """
  activeDelegatorCount: Int!
  """Total amount of delegations historically"""
  delegationCount: Int!
  """
  Total active delegations. Those delegations that still have GRT staked towards an indexer
  """
  activeDelegationCount: Int!
  """Total amount of curators historically"""
  curatorCount: Int!
  """Total amount of curators historically"""
  activeCuratorCount: Int!
  """Total amount of Subgraph entities"""
  subgraphCount: Int!
  """Amount of active Subgraph entities"""
  activeSubgraphCount: Int!
  """Total amount of SubgraphDeployment entities"""
  subgraphDeploymentCount: Int!
  """Total epochs"""
  epochCount: Int!
  """Dispute arbitrator"""
  arbitrator: NETWORK__Bytes!
  """
  Penalty to Indexer on successful disputes for query disputes. In parts per million
  """
  querySlashingPercentage: Int!
  """
  Penalty to Indexer on successful disputes for indexing disputes. In parts per million
  """
  indexingSlashingPercentage: Int!
  """
  [DEPRECATED] Penalty to Indexer on successful disputes for indexing disputes. In parts per million
  """
  slashingPercentage: Int!
  """Minimum deposit to create a dispute"""
  minimumDisputeDeposit: BigInt!
  """Reward to Fisherman on successful disputes. In parts per million"""
  fishermanRewardPercentage: Int!
  """
  Total amount of GRT deposited to the L1 gateway. Note that the actual amount claimed in L2 might be lower due to tickets not redeemed.
  """
  totalGRTDeposited: BigInt!
  """
  NOT IMPLEMENTED - Total amount of GRT withdrawn from the L2 gateway and claimed in L1.
  """
  totalGRTWithdrawnConfirmed: BigInt!
  """
  NOT IMPLEMENTED - Total amount of GRT deposited to the L1 gateway and redeemed in L2.
  """
  totalGRTDepositedConfirmed: BigInt!
  """
  Total amount of GRT withdrawn from the L2 gateway. Note that the actual amount claimed in L1 might be lower due to outbound transactions not finalized.
  """
  totalGRTWithdrawn: BigInt!
  """
  Block number for L1. Only implemented for L2 deployments to properly reflect the L1 block used for timings
  """
  currentL1BlockNumber: BigInt
}

input NETWORK__GraphNetwork_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  controller: NETWORK__Bytes
  controller_not: NETWORK__Bytes
  controller_gt: NETWORK__Bytes
  controller_lt: NETWORK__Bytes
  controller_gte: NETWORK__Bytes
  controller_lte: NETWORK__Bytes
  controller_in: [NETWORK__Bytes!]
  controller_not_in: [NETWORK__Bytes!]
  controller_contains: NETWORK__Bytes
  controller_not_contains: NETWORK__Bytes
  graphToken: NETWORK__Bytes
  graphToken_not: NETWORK__Bytes
  graphToken_gt: NETWORK__Bytes
  graphToken_lt: NETWORK__Bytes
  graphToken_gte: NETWORK__Bytes
  graphToken_lte: NETWORK__Bytes
  graphToken_in: [NETWORK__Bytes!]
  graphToken_not_in: [NETWORK__Bytes!]
  graphToken_contains: NETWORK__Bytes
  graphToken_not_contains: NETWORK__Bytes
  epochManager: NETWORK__Bytes
  epochManager_not: NETWORK__Bytes
  epochManager_gt: NETWORK__Bytes
  epochManager_lt: NETWORK__Bytes
  epochManager_gte: NETWORK__Bytes
  epochManager_lte: NETWORK__Bytes
  epochManager_in: [NETWORK__Bytes!]
  epochManager_not_in: [NETWORK__Bytes!]
  epochManager_contains: NETWORK__Bytes
  epochManager_not_contains: NETWORK__Bytes
  epochManagerImplementations: [NETWORK__Bytes!]
  epochManagerImplementations_not: [NETWORK__Bytes!]
  epochManagerImplementations_contains: [NETWORK__Bytes!]
  epochManagerImplementations_contains_nocase: [NETWORK__Bytes!]
  epochManagerImplementations_not_contains: [NETWORK__Bytes!]
  epochManagerImplementations_not_contains_nocase: [NETWORK__Bytes!]
  curation: NETWORK__Bytes
  curation_not: NETWORK__Bytes
  curation_gt: NETWORK__Bytes
  curation_lt: NETWORK__Bytes
  curation_gte: NETWORK__Bytes
  curation_lte: NETWORK__Bytes
  curation_in: [NETWORK__Bytes!]
  curation_not_in: [NETWORK__Bytes!]
  curation_contains: NETWORK__Bytes
  curation_not_contains: NETWORK__Bytes
  curationImplementations: [NETWORK__Bytes!]
  curationImplementations_not: [NETWORK__Bytes!]
  curationImplementations_contains: [NETWORK__Bytes!]
  curationImplementations_contains_nocase: [NETWORK__Bytes!]
  curationImplementations_not_contains: [NETWORK__Bytes!]
  curationImplementations_not_contains_nocase: [NETWORK__Bytes!]
  staking: NETWORK__Bytes
  staking_not: NETWORK__Bytes
  staking_gt: NETWORK__Bytes
  staking_lt: NETWORK__Bytes
  staking_gte: NETWORK__Bytes
  staking_lte: NETWORK__Bytes
  staking_in: [NETWORK__Bytes!]
  staking_not_in: [NETWORK__Bytes!]
  staking_contains: NETWORK__Bytes
  staking_not_contains: NETWORK__Bytes
  stakingImplementations: [NETWORK__Bytes!]
  stakingImplementations_not: [NETWORK__Bytes!]
  stakingImplementations_contains: [NETWORK__Bytes!]
  stakingImplementations_contains_nocase: [NETWORK__Bytes!]
  stakingImplementations_not_contains: [NETWORK__Bytes!]
  stakingImplementations_not_contains_nocase: [NETWORK__Bytes!]
  disputeManager: NETWORK__Bytes
  disputeManager_not: NETWORK__Bytes
  disputeManager_gt: NETWORK__Bytes
  disputeManager_lt: NETWORK__Bytes
  disputeManager_gte: NETWORK__Bytes
  disputeManager_lte: NETWORK__Bytes
  disputeManager_in: [NETWORK__Bytes!]
  disputeManager_not_in: [NETWORK__Bytes!]
  disputeManager_contains: NETWORK__Bytes
  disputeManager_not_contains: NETWORK__Bytes
  gns: NETWORK__Bytes
  gns_not: NETWORK__Bytes
  gns_gt: NETWORK__Bytes
  gns_lt: NETWORK__Bytes
  gns_gte: NETWORK__Bytes
  gns_lte: NETWORK__Bytes
  gns_in: [NETWORK__Bytes!]
  gns_not_in: [NETWORK__Bytes!]
  gns_contains: NETWORK__Bytes
  gns_not_contains: NETWORK__Bytes
  serviceRegistry: NETWORK__Bytes
  serviceRegistry_not: NETWORK__Bytes
  serviceRegistry_gt: NETWORK__Bytes
  serviceRegistry_lt: NETWORK__Bytes
  serviceRegistry_gte: NETWORK__Bytes
  serviceRegistry_lte: NETWORK__Bytes
  serviceRegistry_in: [NETWORK__Bytes!]
  serviceRegistry_not_in: [NETWORK__Bytes!]
  serviceRegistry_contains: NETWORK__Bytes
  serviceRegistry_not_contains: NETWORK__Bytes
  rewardsManager: NETWORK__Bytes
  rewardsManager_not: NETWORK__Bytes
  rewardsManager_gt: NETWORK__Bytes
  rewardsManager_lt: NETWORK__Bytes
  rewardsManager_gte: NETWORK__Bytes
  rewardsManager_lte: NETWORK__Bytes
  rewardsManager_in: [NETWORK__Bytes!]
  rewardsManager_not_in: [NETWORK__Bytes!]
  rewardsManager_contains: NETWORK__Bytes
  rewardsManager_not_contains: NETWORK__Bytes
  rewardsManagerImplementations: [NETWORK__Bytes!]
  rewardsManagerImplementations_not: [NETWORK__Bytes!]
  rewardsManagerImplementations_contains: [NETWORK__Bytes!]
  rewardsManagerImplementations_contains_nocase: [NETWORK__Bytes!]
  rewardsManagerImplementations_not_contains: [NETWORK__Bytes!]
  rewardsManagerImplementations_not_contains_nocase: [NETWORK__Bytes!]
  isPaused: Boolean
  isPaused_not: Boolean
  isPaused_in: [Boolean!]
  isPaused_not_in: [Boolean!]
  isPartialPaused: Boolean
  isPartialPaused_not: Boolean
  isPartialPaused_in: [Boolean!]
  isPartialPaused_not_in: [Boolean!]
  governor: NETWORK__Bytes
  governor_not: NETWORK__Bytes
  governor_gt: NETWORK__Bytes
  governor_lt: NETWORK__Bytes
  governor_gte: NETWORK__Bytes
  governor_lte: NETWORK__Bytes
  governor_in: [NETWORK__Bytes!]
  governor_not_in: [NETWORK__Bytes!]
  governor_contains: NETWORK__Bytes
  governor_not_contains: NETWORK__Bytes
  pauseGuardian: NETWORK__Bytes
  pauseGuardian_not: NETWORK__Bytes
  pauseGuardian_gt: NETWORK__Bytes
  pauseGuardian_lt: NETWORK__Bytes
  pauseGuardian_gte: NETWORK__Bytes
  pauseGuardian_lte: NETWORK__Bytes
  pauseGuardian_in: [NETWORK__Bytes!]
  pauseGuardian_not_in: [NETWORK__Bytes!]
  pauseGuardian_contains: NETWORK__Bytes
  pauseGuardian_not_contains: NETWORK__Bytes
  curationPercentage: Int
  curationPercentage_not: Int
  curationPercentage_gt: Int
  curationPercentage_lt: Int
  curationPercentage_gte: Int
  curationPercentage_lte: Int
  curationPercentage_in: [Int!]
  curationPercentage_not_in: [Int!]
  protocolFeePercentage: Int
  protocolFeePercentage_not: Int
  protocolFeePercentage_gt: Int
  protocolFeePercentage_lt: Int
  protocolFeePercentage_gte: Int
  protocolFeePercentage_lte: Int
  protocolFeePercentage_in: [Int!]
  protocolFeePercentage_not_in: [Int!]
  delegationRatio: Int
  delegationRatio_not: Int
  delegationRatio_gt: Int
  delegationRatio_lt: Int
  delegationRatio_gte: Int
  delegationRatio_lte: Int
  delegationRatio_in: [Int!]
  delegationRatio_not_in: [Int!]
  channelDisputeEpochs: Int
  channelDisputeEpochs_not: Int
  channelDisputeEpochs_gt: Int
  channelDisputeEpochs_lt: Int
  channelDisputeEpochs_gte: Int
  channelDisputeEpochs_lte: Int
  channelDisputeEpochs_in: [Int!]
  channelDisputeEpochs_not_in: [Int!]
  maxAllocationEpochs: Int
  maxAllocationEpochs_not: Int
  maxAllocationEpochs_gt: Int
  maxAllocationEpochs_lt: Int
  maxAllocationEpochs_gte: Int
  maxAllocationEpochs_lte: Int
  maxAllocationEpochs_in: [Int!]
  maxAllocationEpochs_not_in: [Int!]
  thawingPeriod: Int
  thawingPeriod_not: Int
  thawingPeriod_gt: Int
  thawingPeriod_lt: Int
  thawingPeriod_gte: Int
  thawingPeriod_lte: Int
  thawingPeriod_in: [Int!]
  thawingPeriod_not_in: [Int!]
  delegationParametersCooldown: Int
  delegationParametersCooldown_not: Int
  delegationParametersCooldown_gt: Int
  delegationParametersCooldown_lt: Int
  delegationParametersCooldown_gte: Int
  delegationParametersCooldown_lte: Int
  delegationParametersCooldown_in: [Int!]
  delegationParametersCooldown_not_in: [Int!]
  minimumIndexerStake: BigInt
  minimumIndexerStake_not: BigInt
  minimumIndexerStake_gt: BigInt
  minimumIndexerStake_lt: BigInt
  minimumIndexerStake_gte: BigInt
  minimumIndexerStake_lte: BigInt
  minimumIndexerStake_in: [BigInt!]
  minimumIndexerStake_not_in: [BigInt!]
  slashers: [NETWORK__Bytes!]
  slashers_not: [NETWORK__Bytes!]
  slashers_contains: [NETWORK__Bytes!]
  slashers_contains_nocase: [NETWORK__Bytes!]
  slashers_not_contains: [NETWORK__Bytes!]
  slashers_not_contains_nocase: [NETWORK__Bytes!]
  delegationUnbondingPeriod: Int
  delegationUnbondingPeriod_not: Int
  delegationUnbondingPeriod_gt: Int
  delegationUnbondingPeriod_lt: Int
  delegationUnbondingPeriod_gte: Int
  delegationUnbondingPeriod_lte: Int
  delegationUnbondingPeriod_in: [Int!]
  delegationUnbondingPeriod_not_in: [Int!]
  rebateRatio: NETWORK__BigDecimal
  rebateRatio_not: NETWORK__BigDecimal
  rebateRatio_gt: NETWORK__BigDecimal
  rebateRatio_lt: NETWORK__BigDecimal
  rebateRatio_gte: NETWORK__BigDecimal
  rebateRatio_lte: NETWORK__BigDecimal
  rebateRatio_in: [NETWORK__BigDecimal!]
  rebateRatio_not_in: [NETWORK__BigDecimal!]
  delegationTaxPercentage: Int
  delegationTaxPercentage_not: Int
  delegationTaxPercentage_gt: Int
  delegationTaxPercentage_lt: Int
  delegationTaxPercentage_gte: Int
  delegationTaxPercentage_lte: Int
  delegationTaxPercentage_in: [Int!]
  delegationTaxPercentage_not_in: [Int!]
  assetHolders: [NETWORK__Bytes!]
  assetHolders_not: [NETWORK__Bytes!]
  assetHolders_contains: [NETWORK__Bytes!]
  assetHolders_contains_nocase: [NETWORK__Bytes!]
  assetHolders_not_contains: [NETWORK__Bytes!]
  assetHolders_not_contains_nocase: [NETWORK__Bytes!]
  totalTokensStaked: BigInt
  totalTokensStaked_not: BigInt
  totalTokensStaked_gt: BigInt
  totalTokensStaked_lt: BigInt
  totalTokensStaked_gte: BigInt
  totalTokensStaked_lte: BigInt
  totalTokensStaked_in: [BigInt!]
  totalTokensStaked_not_in: [BigInt!]
  totalTokensClaimable: BigInt
  totalTokensClaimable_not: BigInt
  totalTokensClaimable_gt: BigInt
  totalTokensClaimable_lt: BigInt
  totalTokensClaimable_gte: BigInt
  totalTokensClaimable_lte: BigInt
  totalTokensClaimable_in: [BigInt!]
  totalTokensClaimable_not_in: [BigInt!]
  totalUnstakedTokensLocked: BigInt
  totalUnstakedTokensLocked_not: BigInt
  totalUnstakedTokensLocked_gt: BigInt
  totalUnstakedTokensLocked_lt: BigInt
  totalUnstakedTokensLocked_gte: BigInt
  totalUnstakedTokensLocked_lte: BigInt
  totalUnstakedTokensLocked_in: [BigInt!]
  totalUnstakedTokensLocked_not_in: [BigInt!]
  totalTokensAllocated: BigInt
  totalTokensAllocated_not: BigInt
  totalTokensAllocated_gt: BigInt
  totalTokensAllocated_lt: BigInt
  totalTokensAllocated_gte: BigInt
  totalTokensAllocated_lte: BigInt
  totalTokensAllocated_in: [BigInt!]
  totalTokensAllocated_not_in: [BigInt!]
  totalDelegatedTokens: BigInt
  totalDelegatedTokens_not: BigInt
  totalDelegatedTokens_gt: BigInt
  totalDelegatedTokens_lt: BigInt
  totalDelegatedTokens_gte: BigInt
  totalDelegatedTokens_lte: BigInt
  totalDelegatedTokens_in: [BigInt!]
  totalDelegatedTokens_not_in: [BigInt!]
  totalTokensSignalled: BigInt
  totalTokensSignalled_not: BigInt
  totalTokensSignalled_gt: BigInt
  totalTokensSignalled_lt: BigInt
  totalTokensSignalled_gte: BigInt
  totalTokensSignalled_lte: BigInt
  totalTokensSignalled_in: [BigInt!]
  totalTokensSignalled_not_in: [BigInt!]
  totalTokensSignalledAutoMigrate: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_not: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_gt: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_lt: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_gte: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_lte: NETWORK__BigDecimal
  totalTokensSignalledAutoMigrate_in: [NETWORK__BigDecimal!]
  totalTokensSignalledAutoMigrate_not_in: [NETWORK__BigDecimal!]
  totalTokensSignalledDirectly: NETWORK__BigDecimal
  totalTokensSignalledDirectly_not: NETWORK__BigDecimal
  totalTokensSignalledDirectly_gt: NETWORK__BigDecimal
  totalTokensSignalledDirectly_lt: NETWORK__BigDecimal
  totalTokensSignalledDirectly_gte: NETWORK__BigDecimal
  totalTokensSignalledDirectly_lte: NETWORK__BigDecimal
  totalTokensSignalledDirectly_in: [NETWORK__BigDecimal!]
  totalTokensSignalledDirectly_not_in: [NETWORK__BigDecimal!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  totalIndexerQueryFeesCollected: BigInt
  totalIndexerQueryFeesCollected_not: BigInt
  totalIndexerQueryFeesCollected_gt: BigInt
  totalIndexerQueryFeesCollected_lt: BigInt
  totalIndexerQueryFeesCollected_gte: BigInt
  totalIndexerQueryFeesCollected_lte: BigInt
  totalIndexerQueryFeesCollected_in: [BigInt!]
  totalIndexerQueryFeesCollected_not_in: [BigInt!]
  totalIndexerQueryFeeRebates: BigInt
  totalIndexerQueryFeeRebates_not: BigInt
  totalIndexerQueryFeeRebates_gt: BigInt
  totalIndexerQueryFeeRebates_lt: BigInt
  totalIndexerQueryFeeRebates_gte: BigInt
  totalIndexerQueryFeeRebates_lte: BigInt
  totalIndexerQueryFeeRebates_in: [BigInt!]
  totalIndexerQueryFeeRebates_not_in: [BigInt!]
  totalDelegatorQueryFeeRebates: BigInt
  totalDelegatorQueryFeeRebates_not: BigInt
  totalDelegatorQueryFeeRebates_gt: BigInt
  totalDelegatorQueryFeeRebates_lt: BigInt
  totalDelegatorQueryFeeRebates_gte: BigInt
  totalDelegatorQueryFeeRebates_lte: BigInt
  totalDelegatorQueryFeeRebates_in: [BigInt!]
  totalDelegatorQueryFeeRebates_not_in: [BigInt!]
  totalCuratorQueryFees: BigInt
  totalCuratorQueryFees_not: BigInt
  totalCuratorQueryFees_gt: BigInt
  totalCuratorQueryFees_lt: BigInt
  totalCuratorQueryFees_gte: BigInt
  totalCuratorQueryFees_lte: BigInt
  totalCuratorQueryFees_in: [BigInt!]
  totalCuratorQueryFees_not_in: [BigInt!]
  totalTaxedQueryFees: BigInt
  totalTaxedQueryFees_not: BigInt
  totalTaxedQueryFees_gt: BigInt
  totalTaxedQueryFees_lt: BigInt
  totalTaxedQueryFees_gte: BigInt
  totalTaxedQueryFees_lte: BigInt
  totalTaxedQueryFees_in: [BigInt!]
  totalTaxedQueryFees_not_in: [BigInt!]
  totalUnclaimedQueryFeeRebates: BigInt
  totalUnclaimedQueryFeeRebates_not: BigInt
  totalUnclaimedQueryFeeRebates_gt: BigInt
  totalUnclaimedQueryFeeRebates_lt: BigInt
  totalUnclaimedQueryFeeRebates_gte: BigInt
  totalUnclaimedQueryFeeRebates_lte: BigInt
  totalUnclaimedQueryFeeRebates_in: [BigInt!]
  totalUnclaimedQueryFeeRebates_not_in: [BigInt!]
  totalIndexingRewards: BigInt
  totalIndexingRewards_not: BigInt
  totalIndexingRewards_gt: BigInt
  totalIndexingRewards_lt: BigInt
  totalIndexingRewards_gte: BigInt
  totalIndexingRewards_lte: BigInt
  totalIndexingRewards_in: [BigInt!]
  totalIndexingRewards_not_in: [BigInt!]
  totalIndexingDelegatorRewards: BigInt
  totalIndexingDelegatorRewards_not: BigInt
  totalIndexingDelegatorRewards_gt: BigInt
  totalIndexingDelegatorRewards_lt: BigInt
  totalIndexingDelegatorRewards_gte: BigInt
  totalIndexingDelegatorRewards_lte: BigInt
  totalIndexingDelegatorRewards_in: [BigInt!]
  totalIndexingDelegatorRewards_not_in: [BigInt!]
  totalIndexingIndexerRewards: BigInt
  totalIndexingIndexerRewards_not: BigInt
  totalIndexingIndexerRewards_gt: BigInt
  totalIndexingIndexerRewards_lt: BigInt
  totalIndexingIndexerRewards_gte: BigInt
  totalIndexingIndexerRewards_lte: BigInt
  totalIndexingIndexerRewards_in: [BigInt!]
  totalIndexingIndexerRewards_not_in: [BigInt!]
  networkGRTIssuance: BigInt
  networkGRTIssuance_not: BigInt
  networkGRTIssuance_gt: BigInt
  networkGRTIssuance_lt: BigInt
  networkGRTIssuance_gte: BigInt
  networkGRTIssuance_lte: BigInt
  networkGRTIssuance_in: [BigInt!]
  networkGRTIssuance_not_in: [BigInt!]
  subgraphAvailabilityOracle: NETWORK__Bytes
  subgraphAvailabilityOracle_not: NETWORK__Bytes
  subgraphAvailabilityOracle_gt: NETWORK__Bytes
  subgraphAvailabilityOracle_lt: NETWORK__Bytes
  subgraphAvailabilityOracle_gte: NETWORK__Bytes
  subgraphAvailabilityOracle_lte: NETWORK__Bytes
  subgraphAvailabilityOracle_in: [NETWORK__Bytes!]
  subgraphAvailabilityOracle_not_in: [NETWORK__Bytes!]
  subgraphAvailabilityOracle_contains: NETWORK__Bytes
  subgraphAvailabilityOracle_not_contains: NETWORK__Bytes
  defaultReserveRatio: Int
  defaultReserveRatio_not: Int
  defaultReserveRatio_gt: Int
  defaultReserveRatio_lt: Int
  defaultReserveRatio_gte: Int
  defaultReserveRatio_lte: Int
  defaultReserveRatio_in: [Int!]
  defaultReserveRatio_not_in: [Int!]
  minimumCurationDeposit: BigInt
  minimumCurationDeposit_not: BigInt
  minimumCurationDeposit_gt: BigInt
  minimumCurationDeposit_lt: BigInt
  minimumCurationDeposit_gte: BigInt
  minimumCurationDeposit_lte: BigInt
  minimumCurationDeposit_in: [BigInt!]
  minimumCurationDeposit_not_in: [BigInt!]
  curationTaxPercentage: Int
  curationTaxPercentage_not: Int
  curationTaxPercentage_gt: Int
  curationTaxPercentage_lt: Int
  curationTaxPercentage_gte: Int
  curationTaxPercentage_lte: Int
  curationTaxPercentage_in: [Int!]
  curationTaxPercentage_not_in: [Int!]
  ownerTaxPercentage: Int
  ownerTaxPercentage_not: Int
  ownerTaxPercentage_gt: Int
  ownerTaxPercentage_lt: Int
  ownerTaxPercentage_gte: Int
  ownerTaxPercentage_lte: Int
  ownerTaxPercentage_in: [Int!]
  ownerTaxPercentage_not_in: [Int!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  GRTinUSD: NETWORK__BigDecimal
  GRTinUSD_not: NETWORK__BigDecimal
  GRTinUSD_gt: NETWORK__BigDecimal
  GRTinUSD_lt: NETWORK__BigDecimal
  GRTinUSD_gte: NETWORK__BigDecimal
  GRTinUSD_lte: NETWORK__BigDecimal
  GRTinUSD_in: [NETWORK__BigDecimal!]
  GRTinUSD_not_in: [NETWORK__BigDecimal!]
  GRTinETH: NETWORK__BigDecimal
  GRTinETH_not: NETWORK__BigDecimal
  GRTinETH_gt: NETWORK__BigDecimal
  GRTinETH_lt: NETWORK__BigDecimal
  GRTinETH_gte: NETWORK__BigDecimal
  GRTinETH_lte: NETWORK__BigDecimal
  GRTinETH_in: [NETWORK__BigDecimal!]
  GRTinETH_not_in: [NETWORK__BigDecimal!]
  totalGRTMinted: BigInt
  totalGRTMinted_not: BigInt
  totalGRTMinted_gt: BigInt
  totalGRTMinted_lt: BigInt
  totalGRTMinted_gte: BigInt
  totalGRTMinted_lte: BigInt
  totalGRTMinted_in: [BigInt!]
  totalGRTMinted_not_in: [BigInt!]
  totalGRTBurned: BigInt
  totalGRTBurned_not: BigInt
  totalGRTBurned_gt: BigInt
  totalGRTBurned_lt: BigInt
  totalGRTBurned_gte: BigInt
  totalGRTBurned_lte: BigInt
  totalGRTBurned_in: [BigInt!]
  totalGRTBurned_not_in: [BigInt!]
  epochLength: Int
  epochLength_not: Int
  epochLength_gt: Int
  epochLength_lt: Int
  epochLength_gte: Int
  epochLength_lte: Int
  epochLength_in: [Int!]
  epochLength_not_in: [Int!]
  lastRunEpoch: Int
  lastRunEpoch_not: Int
  lastRunEpoch_gt: Int
  lastRunEpoch_lt: Int
  lastRunEpoch_gte: Int
  lastRunEpoch_lte: Int
  lastRunEpoch_in: [Int!]
  lastRunEpoch_not_in: [Int!]
  lastLengthUpdateEpoch: Int
  lastLengthUpdateEpoch_not: Int
  lastLengthUpdateEpoch_gt: Int
  lastLengthUpdateEpoch_lt: Int
  lastLengthUpdateEpoch_gte: Int
  lastLengthUpdateEpoch_lte: Int
  lastLengthUpdateEpoch_in: [Int!]
  lastLengthUpdateEpoch_not_in: [Int!]
  lastLengthUpdateBlock: Int
  lastLengthUpdateBlock_not: Int
  lastLengthUpdateBlock_gt: Int
  lastLengthUpdateBlock_lt: Int
  lastLengthUpdateBlock_gte: Int
  lastLengthUpdateBlock_lte: Int
  lastLengthUpdateBlock_in: [Int!]
  lastLengthUpdateBlock_not_in: [Int!]
  currentEpoch: Int
  currentEpoch_not: Int
  currentEpoch_gt: Int
  currentEpoch_lt: Int
  currentEpoch_gte: Int
  currentEpoch_lte: Int
  currentEpoch_in: [Int!]
  currentEpoch_not_in: [Int!]
  indexerCount: Int
  indexerCount_not: Int
  indexerCount_gt: Int
  indexerCount_lt: Int
  indexerCount_gte: Int
  indexerCount_lte: Int
  indexerCount_in: [Int!]
  indexerCount_not_in: [Int!]
  stakedIndexersCount: Int
  stakedIndexersCount_not: Int
  stakedIndexersCount_gt: Int
  stakedIndexersCount_lt: Int
  stakedIndexersCount_gte: Int
  stakedIndexersCount_lte: Int
  stakedIndexersCount_in: [Int!]
  stakedIndexersCount_not_in: [Int!]
  delegatorCount: Int
  delegatorCount_not: Int
  delegatorCount_gt: Int
  delegatorCount_lt: Int
  delegatorCount_gte: Int
  delegatorCount_lte: Int
  delegatorCount_in: [Int!]
  delegatorCount_not_in: [Int!]
  activeDelegatorCount: Int
  activeDelegatorCount_not: Int
  activeDelegatorCount_gt: Int
  activeDelegatorCount_lt: Int
  activeDelegatorCount_gte: Int
  activeDelegatorCount_lte: Int
  activeDelegatorCount_in: [Int!]
  activeDelegatorCount_not_in: [Int!]
  delegationCount: Int
  delegationCount_not: Int
  delegationCount_gt: Int
  delegationCount_lt: Int
  delegationCount_gte: Int
  delegationCount_lte: Int
  delegationCount_in: [Int!]
  delegationCount_not_in: [Int!]
  activeDelegationCount: Int
  activeDelegationCount_not: Int
  activeDelegationCount_gt: Int
  activeDelegationCount_lt: Int
  activeDelegationCount_gte: Int
  activeDelegationCount_lte: Int
  activeDelegationCount_in: [Int!]
  activeDelegationCount_not_in: [Int!]
  curatorCount: Int
  curatorCount_not: Int
  curatorCount_gt: Int
  curatorCount_lt: Int
  curatorCount_gte: Int
  curatorCount_lte: Int
  curatorCount_in: [Int!]
  curatorCount_not_in: [Int!]
  activeCuratorCount: Int
  activeCuratorCount_not: Int
  activeCuratorCount_gt: Int
  activeCuratorCount_lt: Int
  activeCuratorCount_gte: Int
  activeCuratorCount_lte: Int
  activeCuratorCount_in: [Int!]
  activeCuratorCount_not_in: [Int!]
  subgraphCount: Int
  subgraphCount_not: Int
  subgraphCount_gt: Int
  subgraphCount_lt: Int
  subgraphCount_gte: Int
  subgraphCount_lte: Int
  subgraphCount_in: [Int!]
  subgraphCount_not_in: [Int!]
  activeSubgraphCount: Int
  activeSubgraphCount_not: Int
  activeSubgraphCount_gt: Int
  activeSubgraphCount_lt: Int
  activeSubgraphCount_gte: Int
  activeSubgraphCount_lte: Int
  activeSubgraphCount_in: [Int!]
  activeSubgraphCount_not_in: [Int!]
  subgraphDeploymentCount: Int
  subgraphDeploymentCount_not: Int
  subgraphDeploymentCount_gt: Int
  subgraphDeploymentCount_lt: Int
  subgraphDeploymentCount_gte: Int
  subgraphDeploymentCount_lte: Int
  subgraphDeploymentCount_in: [Int!]
  subgraphDeploymentCount_not_in: [Int!]
  epochCount: Int
  epochCount_not: Int
  epochCount_gt: Int
  epochCount_lt: Int
  epochCount_gte: Int
  epochCount_lte: Int
  epochCount_in: [Int!]
  epochCount_not_in: [Int!]
  arbitrator: NETWORK__Bytes
  arbitrator_not: NETWORK__Bytes
  arbitrator_gt: NETWORK__Bytes
  arbitrator_lt: NETWORK__Bytes
  arbitrator_gte: NETWORK__Bytes
  arbitrator_lte: NETWORK__Bytes
  arbitrator_in: [NETWORK__Bytes!]
  arbitrator_not_in: [NETWORK__Bytes!]
  arbitrator_contains: NETWORK__Bytes
  arbitrator_not_contains: NETWORK__Bytes
  querySlashingPercentage: Int
  querySlashingPercentage_not: Int
  querySlashingPercentage_gt: Int
  querySlashingPercentage_lt: Int
  querySlashingPercentage_gte: Int
  querySlashingPercentage_lte: Int
  querySlashingPercentage_in: [Int!]
  querySlashingPercentage_not_in: [Int!]
  indexingSlashingPercentage: Int
  indexingSlashingPercentage_not: Int
  indexingSlashingPercentage_gt: Int
  indexingSlashingPercentage_lt: Int
  indexingSlashingPercentage_gte: Int
  indexingSlashingPercentage_lte: Int
  indexingSlashingPercentage_in: [Int!]
  indexingSlashingPercentage_not_in: [Int!]
  slashingPercentage: Int
  slashingPercentage_not: Int
  slashingPercentage_gt: Int
  slashingPercentage_lt: Int
  slashingPercentage_gte: Int
  slashingPercentage_lte: Int
  slashingPercentage_in: [Int!]
  slashingPercentage_not_in: [Int!]
  minimumDisputeDeposit: BigInt
  minimumDisputeDeposit_not: BigInt
  minimumDisputeDeposit_gt: BigInt
  minimumDisputeDeposit_lt: BigInt
  minimumDisputeDeposit_gte: BigInt
  minimumDisputeDeposit_lte: BigInt
  minimumDisputeDeposit_in: [BigInt!]
  minimumDisputeDeposit_not_in: [BigInt!]
  fishermanRewardPercentage: Int
  fishermanRewardPercentage_not: Int
  fishermanRewardPercentage_gt: Int
  fishermanRewardPercentage_lt: Int
  fishermanRewardPercentage_gte: Int
  fishermanRewardPercentage_lte: Int
  fishermanRewardPercentage_in: [Int!]
  fishermanRewardPercentage_not_in: [Int!]
  totalGRTDeposited: BigInt
  totalGRTDeposited_not: BigInt
  totalGRTDeposited_gt: BigInt
  totalGRTDeposited_lt: BigInt
  totalGRTDeposited_gte: BigInt
  totalGRTDeposited_lte: BigInt
  totalGRTDeposited_in: [BigInt!]
  totalGRTDeposited_not_in: [BigInt!]
  totalGRTWithdrawnConfirmed: BigInt
  totalGRTWithdrawnConfirmed_not: BigInt
  totalGRTWithdrawnConfirmed_gt: BigInt
  totalGRTWithdrawnConfirmed_lt: BigInt
  totalGRTWithdrawnConfirmed_gte: BigInt
  totalGRTWithdrawnConfirmed_lte: BigInt
  totalGRTWithdrawnConfirmed_in: [BigInt!]
  totalGRTWithdrawnConfirmed_not_in: [BigInt!]
  totalGRTDepositedConfirmed: BigInt
  totalGRTDepositedConfirmed_not: BigInt
  totalGRTDepositedConfirmed_gt: BigInt
  totalGRTDepositedConfirmed_lt: BigInt
  totalGRTDepositedConfirmed_gte: BigInt
  totalGRTDepositedConfirmed_lte: BigInt
  totalGRTDepositedConfirmed_in: [BigInt!]
  totalGRTDepositedConfirmed_not_in: [BigInt!]
  totalGRTWithdrawn: BigInt
  totalGRTWithdrawn_not: BigInt
  totalGRTWithdrawn_gt: BigInt
  totalGRTWithdrawn_lt: BigInt
  totalGRTWithdrawn_gte: BigInt
  totalGRTWithdrawn_lte: BigInt
  totalGRTWithdrawn_in: [BigInt!]
  totalGRTWithdrawn_not_in: [BigInt!]
  currentL1BlockNumber: BigInt
  currentL1BlockNumber_not: BigInt
  currentL1BlockNumber_gt: BigInt
  currentL1BlockNumber_lt: BigInt
  currentL1BlockNumber_gte: BigInt
  currentL1BlockNumber_lte: BigInt
  currentL1BlockNumber_in: [BigInt!]
  currentL1BlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__GraphNetwork_orderBy {
  id
  controller
  graphToken
  epochManager
  epochManagerImplementations
  curation
  curationImplementations
  staking
  stakingImplementations
  disputeManager
  gns
  serviceRegistry
  rewardsManager
  rewardsManagerImplementations
  isPaused
  isPartialPaused
  governor
  pauseGuardian
  curationPercentage
  protocolFeePercentage
  delegationRatio
  channelDisputeEpochs
  maxAllocationEpochs
  thawingPeriod
  delegationParametersCooldown
  minimumIndexerStake
  slashers
  delegationUnbondingPeriod
  rebateRatio
  delegationTaxPercentage
  assetHolders
  totalTokensStaked
  totalTokensClaimable
  totalUnstakedTokensLocked
  totalTokensAllocated
  totalDelegatedTokens
  totalTokensSignalled
  totalTokensSignalledAutoMigrate
  totalTokensSignalledDirectly
  totalQueryFees
  totalIndexerQueryFeesCollected
  totalIndexerQueryFeeRebates
  totalDelegatorQueryFeeRebates
  totalCuratorQueryFees
  totalTaxedQueryFees
  totalUnclaimedQueryFeeRebates
  totalIndexingRewards
  totalIndexingDelegatorRewards
  totalIndexingIndexerRewards
  networkGRTIssuance
  subgraphAvailabilityOracle
  defaultReserveRatio
  minimumCurationDeposit
  curationTaxPercentage
  ownerTaxPercentage
  totalSupply
  GRTinUSD
  GRTinETH
  totalGRTMinted
  totalGRTBurned
  epochLength
  lastRunEpoch
  lastLengthUpdateEpoch
  lastLengthUpdateBlock
  currentEpoch
  indexerCount
  stakedIndexersCount
  delegatorCount
  activeDelegatorCount
  delegationCount
  activeDelegationCount
  curatorCount
  activeCuratorCount
  subgraphCount
  activeSubgraphCount
  subgraphDeploymentCount
  epochCount
  arbitrator
  querySlashingPercentage
  indexingSlashingPercentage
  slashingPercentage
  minimumDisputeDeposit
  fishermanRewardPercentage
  totalGRTDeposited
  totalGRTWithdrawnConfirmed
  totalGRTDepositedConfirmed
  totalGRTWithdrawn
  currentL1BlockNumber
}

"""
Metadata for the Indexer along with parameters and staking data

"""
type NETWORK__Indexer {
  """Eth address of Indexer"""
  id: ID!
  """Time this indexer was created"""
  createdAt: Int!
  """Graph account of this indexer"""
  account: NETWORK__GraphAccount!
  """Service registry URL for the indexer"""
  url: String
  """
  Geohash of the indexer. Shows where their indexer is located in the world
  """
  geoHash: String
  """
  Default display name is the current default name. Used for filtered queries
  """
  defaultDisplayName: String
  """
  CURRENT tokens staked in the protocol. Decreases on withdraw, not on lock
  """
  stakedTokens: BigInt!
  """CURRENT  tokens allocated on all subgraphs"""
  allocatedTokens: BigInt!
  """NOT IMPLEMENTED - Tokens that have been unstaked and withdrawn"""
  unstakedTokens: BigInt!
  """CURRENT tokens locked"""
  lockedTokens: BigInt!
  """The block when the Indexers tokens unlock"""
  tokensLockedUntil: Int!
  """Active allocations of stake for this Indexer"""
  allocations(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Allocation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Allocation_filter): [NETWORK__Allocation!]!
  """All allocations of stake for this Indexer (i.e. closed and active)"""
  totalAllocations(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Allocation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Allocation_filter): [NETWORK__Allocation!]!
  """Number of active allocations of stake for this Indexer"""
  allocationCount: Int!
  """All allocations for this Indexer (i.e. closed and active)"""
  totalAllocationCount: BigInt!
  """Total query fees collected. Includes the portion given to delegators"""
  queryFeesCollected: BigInt!
  """
  Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators
  """
  queryFeeRebates: BigInt!
  """
  Total indexing rewards earned by this indexer from inflation. Including delegation rewards
  """
  rewardsEarned: BigInt!
  """The total amount of indexing rewards the indexer kept"""
  indexerIndexingRewards: BigInt!
  """The total amount of indexing rewards given to delegators"""
  delegatorIndexingRewards: BigInt!
  """
  Percentage of indexers' own rewards received in relation to its own stake. 1 (100%) means that the indexer is receiving the exact amount that is generated by his own stake
  """
  indexerRewardsOwnGenerationRatio: NETWORK__BigDecimal!
  """Amount of delegated tokens that can be eligible for rewards"""
  delegatedCapacity: BigInt!
  """Total token capacity = delegatedCapacity + stakedTokens"""
  tokenCapacity: BigInt!
  """
  Stake available to earn rewards. tokenCapacity - allocationTokens - lockedTokens
  """
  availableStake: BigInt!
  """Delegators to this Indexer"""
  delegators(skip: Int = 0, first: Int = 100, orderBy: NETWORK__DelegatedStake_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__DelegatedStake_filter): [NETWORK__DelegatedStake!]!
  """CURRENT tokens delegated to the indexer"""
  delegatedTokens: BigInt!
  """
  Ratio between the amount of the indexers own stake over the total usable stake.
  """
  ownStakeRatio: NETWORK__BigDecimal!
  """
  Ratio between the amount of delegated stake over the total usable stake.
  """
  delegatedStakeRatio: NETWORK__BigDecimal!
  """Total shares of the delegator pool"""
  delegatorShares: BigInt!
  """Exchange rate of of tokens received for each share"""
  delegationExchangeRate: NETWORK__BigDecimal!
  """
  The percent of indexing rewards generated by the total stake that the Indexer keeps for itself. In parts per million
  """
  indexingRewardCut: Int!
  """
  The percent of indexing rewards generated by the delegated stake that the Indexer keeps for itself
  """
  indexingRewardEffectiveCut: NETWORK__BigDecimal!
  """
  The percent of reward dilution delegators experience because of overdelegation. Overdelegated stake can't be used to generate rewards but still gets accounted while distributing the generated rewards. This causes dilution of the rewards for the rest of the pool.
  """
  overDelegationDilution: NETWORK__BigDecimal!
  """The total amount of query fees given to delegators"""
  delegatorQueryFees: BigInt!
  """
  The percent of query rebate rewards the Indexer keeps for itself. In parts per million
  """
  queryFeeCut: Int!
  """
  The percent of query rebate rewards generated by the delegated stake that the Indexer keeps for itself
  """
  queryFeeEffectiveCut: NETWORK__BigDecimal!
  """
  Amount of blocks a delegator chooses for the waiting period for changing their params
  """
  delegatorParameterCooldown: Int!
  """Block number for the last time the delegator updated their parameters"""
  lastDelegationParameterUpdate: Int!
  """
  Count of how many times this indexer has been forced to close an allocation
  """
  forcedClosures: Int!
  """NOT IMPLEMENTED - Total return this indexer has earned"""
  totalReturn: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Annualized rate of return for the indexer"""
  annualizedReturn: NETWORK__BigDecimal!
  """NOT IMPLEMENTED - Staking efficiency of the indexer"""
  stakingEfficiency: NETWORK__BigDecimal!
}

input NETWORK__Indexer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: NETWORK__GraphAccount_filter
  url: String
  url_not: String
  url_gt: String
  url_lt: String
  url_gte: String
  url_lte: String
  url_in: [String!]
  url_not_in: [String!]
  url_contains: String
  url_contains_nocase: String
  url_not_contains: String
  url_not_contains_nocase: String
  url_starts_with: String
  url_starts_with_nocase: String
  url_not_starts_with: String
  url_not_starts_with_nocase: String
  url_ends_with: String
  url_ends_with_nocase: String
  url_not_ends_with: String
  url_not_ends_with_nocase: String
  geoHash: String
  geoHash_not: String
  geoHash_gt: String
  geoHash_lt: String
  geoHash_gte: String
  geoHash_lte: String
  geoHash_in: [String!]
  geoHash_not_in: [String!]
  geoHash_contains: String
  geoHash_contains_nocase: String
  geoHash_not_contains: String
  geoHash_not_contains_nocase: String
  geoHash_starts_with: String
  geoHash_starts_with_nocase: String
  geoHash_not_starts_with: String
  geoHash_not_starts_with_nocase: String
  geoHash_ends_with: String
  geoHash_ends_with_nocase: String
  geoHash_not_ends_with: String
  geoHash_not_ends_with_nocase: String
  defaultDisplayName: String
  defaultDisplayName_not: String
  defaultDisplayName_gt: String
  defaultDisplayName_lt: String
  defaultDisplayName_gte: String
  defaultDisplayName_lte: String
  defaultDisplayName_in: [String!]
  defaultDisplayName_not_in: [String!]
  defaultDisplayName_contains: String
  defaultDisplayName_contains_nocase: String
  defaultDisplayName_not_contains: String
  defaultDisplayName_not_contains_nocase: String
  defaultDisplayName_starts_with: String
  defaultDisplayName_starts_with_nocase: String
  defaultDisplayName_not_starts_with: String
  defaultDisplayName_not_starts_with_nocase: String
  defaultDisplayName_ends_with: String
  defaultDisplayName_ends_with_nocase: String
  defaultDisplayName_not_ends_with: String
  defaultDisplayName_not_ends_with_nocase: String
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  allocatedTokens: BigInt
  allocatedTokens_not: BigInt
  allocatedTokens_gt: BigInt
  allocatedTokens_lt: BigInt
  allocatedTokens_gte: BigInt
  allocatedTokens_lte: BigInt
  allocatedTokens_in: [BigInt!]
  allocatedTokens_not_in: [BigInt!]
  unstakedTokens: BigInt
  unstakedTokens_not: BigInt
  unstakedTokens_gt: BigInt
  unstakedTokens_lt: BigInt
  unstakedTokens_gte: BigInt
  unstakedTokens_lte: BigInt
  unstakedTokens_in: [BigInt!]
  unstakedTokens_not_in: [BigInt!]
  lockedTokens: BigInt
  lockedTokens_not: BigInt
  lockedTokens_gt: BigInt
  lockedTokens_lt: BigInt
  lockedTokens_gte: BigInt
  lockedTokens_lte: BigInt
  lockedTokens_in: [BigInt!]
  lockedTokens_not_in: [BigInt!]
  tokensLockedUntil: Int
  tokensLockedUntil_not: Int
  tokensLockedUntil_gt: Int
  tokensLockedUntil_lt: Int
  tokensLockedUntil_gte: Int
  tokensLockedUntil_lte: Int
  tokensLockedUntil_in: [Int!]
  tokensLockedUntil_not_in: [Int!]
  allocations_: NETWORK__Allocation_filter
  totalAllocations_: NETWORK__Allocation_filter
  allocationCount: Int
  allocationCount_not: Int
  allocationCount_gt: Int
  allocationCount_lt: Int
  allocationCount_gte: Int
  allocationCount_lte: Int
  allocationCount_in: [Int!]
  allocationCount_not_in: [Int!]
  totalAllocationCount: BigInt
  totalAllocationCount_not: BigInt
  totalAllocationCount_gt: BigInt
  totalAllocationCount_lt: BigInt
  totalAllocationCount_gte: BigInt
  totalAllocationCount_lte: BigInt
  totalAllocationCount_in: [BigInt!]
  totalAllocationCount_not_in: [BigInt!]
  queryFeesCollected: BigInt
  queryFeesCollected_not: BigInt
  queryFeesCollected_gt: BigInt
  queryFeesCollected_lt: BigInt
  queryFeesCollected_gte: BigInt
  queryFeesCollected_lte: BigInt
  queryFeesCollected_in: [BigInt!]
  queryFeesCollected_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  rewardsEarned: BigInt
  rewardsEarned_not: BigInt
  rewardsEarned_gt: BigInt
  rewardsEarned_lt: BigInt
  rewardsEarned_gte: BigInt
  rewardsEarned_lte: BigInt
  rewardsEarned_in: [BigInt!]
  rewardsEarned_not_in: [BigInt!]
  indexerIndexingRewards: BigInt
  indexerIndexingRewards_not: BigInt
  indexerIndexingRewards_gt: BigInt
  indexerIndexingRewards_lt: BigInt
  indexerIndexingRewards_gte: BigInt
  indexerIndexingRewards_lte: BigInt
  indexerIndexingRewards_in: [BigInt!]
  indexerIndexingRewards_not_in: [BigInt!]
  delegatorIndexingRewards: BigInt
  delegatorIndexingRewards_not: BigInt
  delegatorIndexingRewards_gt: BigInt
  delegatorIndexingRewards_lt: BigInt
  delegatorIndexingRewards_gte: BigInt
  delegatorIndexingRewards_lte: BigInt
  delegatorIndexingRewards_in: [BigInt!]
  delegatorIndexingRewards_not_in: [BigInt!]
  indexerRewardsOwnGenerationRatio: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_not: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_gt: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_lt: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_gte: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_lte: NETWORK__BigDecimal
  indexerRewardsOwnGenerationRatio_in: [NETWORK__BigDecimal!]
  indexerRewardsOwnGenerationRatio_not_in: [NETWORK__BigDecimal!]
  delegatedCapacity: BigInt
  delegatedCapacity_not: BigInt
  delegatedCapacity_gt: BigInt
  delegatedCapacity_lt: BigInt
  delegatedCapacity_gte: BigInt
  delegatedCapacity_lte: BigInt
  delegatedCapacity_in: [BigInt!]
  delegatedCapacity_not_in: [BigInt!]
  tokenCapacity: BigInt
  tokenCapacity_not: BigInt
  tokenCapacity_gt: BigInt
  tokenCapacity_lt: BigInt
  tokenCapacity_gte: BigInt
  tokenCapacity_lte: BigInt
  tokenCapacity_in: [BigInt!]
  tokenCapacity_not_in: [BigInt!]
  availableStake: BigInt
  availableStake_not: BigInt
  availableStake_gt: BigInt
  availableStake_lt: BigInt
  availableStake_gte: BigInt
  availableStake_lte: BigInt
  availableStake_in: [BigInt!]
  availableStake_not_in: [BigInt!]
  delegators_: NETWORK__DelegatedStake_filter
  delegatedTokens: BigInt
  delegatedTokens_not: BigInt
  delegatedTokens_gt: BigInt
  delegatedTokens_lt: BigInt
  delegatedTokens_gte: BigInt
  delegatedTokens_lte: BigInt
  delegatedTokens_in: [BigInt!]
  delegatedTokens_not_in: [BigInt!]
  ownStakeRatio: NETWORK__BigDecimal
  ownStakeRatio_not: NETWORK__BigDecimal
  ownStakeRatio_gt: NETWORK__BigDecimal
  ownStakeRatio_lt: NETWORK__BigDecimal
  ownStakeRatio_gte: NETWORK__BigDecimal
  ownStakeRatio_lte: NETWORK__BigDecimal
  ownStakeRatio_in: [NETWORK__BigDecimal!]
  ownStakeRatio_not_in: [NETWORK__BigDecimal!]
  delegatedStakeRatio: NETWORK__BigDecimal
  delegatedStakeRatio_not: NETWORK__BigDecimal
  delegatedStakeRatio_gt: NETWORK__BigDecimal
  delegatedStakeRatio_lt: NETWORK__BigDecimal
  delegatedStakeRatio_gte: NETWORK__BigDecimal
  delegatedStakeRatio_lte: NETWORK__BigDecimal
  delegatedStakeRatio_in: [NETWORK__BigDecimal!]
  delegatedStakeRatio_not_in: [NETWORK__BigDecimal!]
  delegatorShares: BigInt
  delegatorShares_not: BigInt
  delegatorShares_gt: BigInt
  delegatorShares_lt: BigInt
  delegatorShares_gte: BigInt
  delegatorShares_lte: BigInt
  delegatorShares_in: [BigInt!]
  delegatorShares_not_in: [BigInt!]
  delegationExchangeRate: NETWORK__BigDecimal
  delegationExchangeRate_not: NETWORK__BigDecimal
  delegationExchangeRate_gt: NETWORK__BigDecimal
  delegationExchangeRate_lt: NETWORK__BigDecimal
  delegationExchangeRate_gte: NETWORK__BigDecimal
  delegationExchangeRate_lte: NETWORK__BigDecimal
  delegationExchangeRate_in: [NETWORK__BigDecimal!]
  delegationExchangeRate_not_in: [NETWORK__BigDecimal!]
  indexingRewardCut: Int
  indexingRewardCut_not: Int
  indexingRewardCut_gt: Int
  indexingRewardCut_lt: Int
  indexingRewardCut_gte: Int
  indexingRewardCut_lte: Int
  indexingRewardCut_in: [Int!]
  indexingRewardCut_not_in: [Int!]
  indexingRewardEffectiveCut: NETWORK__BigDecimal
  indexingRewardEffectiveCut_not: NETWORK__BigDecimal
  indexingRewardEffectiveCut_gt: NETWORK__BigDecimal
  indexingRewardEffectiveCut_lt: NETWORK__BigDecimal
  indexingRewardEffectiveCut_gte: NETWORK__BigDecimal
  indexingRewardEffectiveCut_lte: NETWORK__BigDecimal
  indexingRewardEffectiveCut_in: [NETWORK__BigDecimal!]
  indexingRewardEffectiveCut_not_in: [NETWORK__BigDecimal!]
  overDelegationDilution: NETWORK__BigDecimal
  overDelegationDilution_not: NETWORK__BigDecimal
  overDelegationDilution_gt: NETWORK__BigDecimal
  overDelegationDilution_lt: NETWORK__BigDecimal
  overDelegationDilution_gte: NETWORK__BigDecimal
  overDelegationDilution_lte: NETWORK__BigDecimal
  overDelegationDilution_in: [NETWORK__BigDecimal!]
  overDelegationDilution_not_in: [NETWORK__BigDecimal!]
  delegatorQueryFees: BigInt
  delegatorQueryFees_not: BigInt
  delegatorQueryFees_gt: BigInt
  delegatorQueryFees_lt: BigInt
  delegatorQueryFees_gte: BigInt
  delegatorQueryFees_lte: BigInt
  delegatorQueryFees_in: [BigInt!]
  delegatorQueryFees_not_in: [BigInt!]
  queryFeeCut: Int
  queryFeeCut_not: Int
  queryFeeCut_gt: Int
  queryFeeCut_lt: Int
  queryFeeCut_gte: Int
  queryFeeCut_lte: Int
  queryFeeCut_in: [Int!]
  queryFeeCut_not_in: [Int!]
  queryFeeEffectiveCut: NETWORK__BigDecimal
  queryFeeEffectiveCut_not: NETWORK__BigDecimal
  queryFeeEffectiveCut_gt: NETWORK__BigDecimal
  queryFeeEffectiveCut_lt: NETWORK__BigDecimal
  queryFeeEffectiveCut_gte: NETWORK__BigDecimal
  queryFeeEffectiveCut_lte: NETWORK__BigDecimal
  queryFeeEffectiveCut_in: [NETWORK__BigDecimal!]
  queryFeeEffectiveCut_not_in: [NETWORK__BigDecimal!]
  delegatorParameterCooldown: Int
  delegatorParameterCooldown_not: Int
  delegatorParameterCooldown_gt: Int
  delegatorParameterCooldown_lt: Int
  delegatorParameterCooldown_gte: Int
  delegatorParameterCooldown_lte: Int
  delegatorParameterCooldown_in: [Int!]
  delegatorParameterCooldown_not_in: [Int!]
  lastDelegationParameterUpdate: Int
  lastDelegationParameterUpdate_not: Int
  lastDelegationParameterUpdate_gt: Int
  lastDelegationParameterUpdate_lt: Int
  lastDelegationParameterUpdate_gte: Int
  lastDelegationParameterUpdate_lte: Int
  lastDelegationParameterUpdate_in: [Int!]
  lastDelegationParameterUpdate_not_in: [Int!]
  forcedClosures: Int
  forcedClosures_not: Int
  forcedClosures_gt: Int
  forcedClosures_lt: Int
  forcedClosures_gte: Int
  forcedClosures_lte: Int
  forcedClosures_in: [Int!]
  forcedClosures_not_in: [Int!]
  totalReturn: NETWORK__BigDecimal
  totalReturn_not: NETWORK__BigDecimal
  totalReturn_gt: NETWORK__BigDecimal
  totalReturn_lt: NETWORK__BigDecimal
  totalReturn_gte: NETWORK__BigDecimal
  totalReturn_lte: NETWORK__BigDecimal
  totalReturn_in: [NETWORK__BigDecimal!]
  totalReturn_not_in: [NETWORK__BigDecimal!]
  annualizedReturn: NETWORK__BigDecimal
  annualizedReturn_not: NETWORK__BigDecimal
  annualizedReturn_gt: NETWORK__BigDecimal
  annualizedReturn_lt: NETWORK__BigDecimal
  annualizedReturn_gte: NETWORK__BigDecimal
  annualizedReturn_lte: NETWORK__BigDecimal
  annualizedReturn_in: [NETWORK__BigDecimal!]
  annualizedReturn_not_in: [NETWORK__BigDecimal!]
  stakingEfficiency: NETWORK__BigDecimal
  stakingEfficiency_not: NETWORK__BigDecimal
  stakingEfficiency_gt: NETWORK__BigDecimal
  stakingEfficiency_lt: NETWORK__BigDecimal
  stakingEfficiency_gte: NETWORK__BigDecimal
  stakingEfficiency_lte: NETWORK__BigDecimal
  stakingEfficiency_in: [NETWORK__BigDecimal!]
  stakingEfficiency_not_in: [NETWORK__BigDecimal!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Indexer_orderBy {
  id
  createdAt
  account
  url
  geoHash
  defaultDisplayName
  stakedTokens
  allocatedTokens
  unstakedTokens
  lockedTokens
  tokensLockedUntil
  allocations
  totalAllocations
  allocationCount
  totalAllocationCount
  queryFeesCollected
  queryFeeRebates
  rewardsEarned
  indexerIndexingRewards
  delegatorIndexingRewards
  indexerRewardsOwnGenerationRatio
  delegatedCapacity
  tokenCapacity
  availableStake
  delegators
  delegatedTokens
  ownStakeRatio
  delegatedStakeRatio
  delegatorShares
  delegationExchangeRate
  indexingRewardCut
  indexingRewardEffectiveCut
  overDelegationDilution
  delegatorQueryFees
  queryFeeCut
  queryFeeEffectiveCut
  delegatorParameterCooldown
  lastDelegationParameterUpdate
  forcedClosures
  totalReturn
  annualizedReturn
  stakingEfficiency
}

"""
Curator Name Signal for a single Subgraph

"""
type NETWORK__NameSignal {
  """Eth address + subgraph ID"""
  id: ID!
  """Eth address of the curator"""
  curator: NETWORK__Curator!
  """Subgraph being signalled"""
  subgraph: NETWORK__Subgraph!
  """CUMULATIVE number of tokens the curator has signalled"""
  signalledTokens: BigInt!
  """CUMULATIVE number of tokens the curator has unsignalled"""
  unsignalledTokens: BigInt!
  """Tokens the curator has withdrawn from a deprecated name curve"""
  withdrawnTokens: BigInt!
  """
  Shares of the name pool (GNS) that the curator has from signaling their GRT
  """
  nameSignal: BigInt!
  """
  Actual signal shares that the name pool minted with the GRT provided by the curator
  """
  signal: NETWORK__BigDecimal!
  """Block for which the curator last entered or exited the curve"""
  lastNameSignalChange: Int!
  """
  Summation of realized rewards from before the last time the curator entered the curation curve
  """
  realizedRewards: BigInt!
  """
  [DEPRECATED] Curator average cost basis for this name signal on this subgraph. New field for further versions will be nameSignalAverageCostBasis
  """
  averageCostBasis: NETWORK__BigDecimal!
  """
  [DEPRECATED] nameSignalAverageCostBasis / nameSignal. New field for further versions will be nameSignalAverageCostBasisPerSignal
  """
  averageCostBasisPerSignal: NETWORK__BigDecimal!
  """Curator average cost basis for this name signal on this subgraph"""
  nameSignalAverageCostBasis: NETWORK__BigDecimal!
  """nameSignalAverageCostBasis / nameSignal"""
  nameSignalAverageCostBasisPerSignal: NETWORK__BigDecimal!
  """
  Curator average cost basis for the version signal on this subgraph name pool
  """
  signalAverageCostBasis: NETWORK__BigDecimal!
  """signalAverageCostBasis / signal"""
  signalAverageCostBasisPerSignal: NETWORK__BigDecimal!
  entityVersion: Int!
  linkedEntity: NETWORK__NameSignal
}

"""
Auxiliary entity to be able to batch update NameSignal entities

"""
type NETWORK__NameSignalSubgraphRelation {
  """Subgraph ID + index"""
  id: ID!
  nameSignal: NETWORK__NameSignal!
  subgraph: NETWORK__Subgraph!
}

input NETWORK__NameSignalSubgraphRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nameSignal: String
  nameSignal_not: String
  nameSignal_gt: String
  nameSignal_lt: String
  nameSignal_gte: String
  nameSignal_lte: String
  nameSignal_in: [String!]
  nameSignal_not_in: [String!]
  nameSignal_contains: String
  nameSignal_contains_nocase: String
  nameSignal_not_contains: String
  nameSignal_not_contains_nocase: String
  nameSignal_starts_with: String
  nameSignal_starts_with_nocase: String
  nameSignal_not_starts_with: String
  nameSignal_not_starts_with_nocase: String
  nameSignal_ends_with: String
  nameSignal_ends_with_nocase: String
  nameSignal_not_ends_with: String
  nameSignal_not_ends_with_nocase: String
  nameSignal_: NETWORK__NameSignal_filter
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__NameSignalSubgraphRelation_orderBy {
  id
  nameSignal
  subgraph
}

"""
All relevant data for a Name Signal Transaction in The Graph Network

"""
type NETWORK__NameSignalTransaction implements NETWORK__Transaction {
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  signer: NETWORK__GraphAccount!
  type: NETWORK__TransactionType!
  """Amount of name signal updated"""
  nameSignal: BigInt!
  """Amount of version signal updated"""
  versionSignal: BigInt!
  """Tokens used"""
  tokens: BigInt!
  """Subgraph where name signal was updated"""
  subgraph: NETWORK__Subgraph!
}

input NETWORK__NameSignalTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: NETWORK__GraphAccount_filter
  type: NETWORK__TransactionType
  type_not: NETWORK__TransactionType
  type_in: [NETWORK__TransactionType!]
  type_not_in: [NETWORK__TransactionType!]
  nameSignal: BigInt
  nameSignal_not: BigInt
  nameSignal_gt: BigInt
  nameSignal_lt: BigInt
  nameSignal_gte: BigInt
  nameSignal_lte: BigInt
  nameSignal_in: [BigInt!]
  nameSignal_not_in: [BigInt!]
  versionSignal: BigInt
  versionSignal_not: BigInt
  versionSignal_gt: BigInt
  versionSignal_lt: BigInt
  versionSignal_gte: BigInt
  versionSignal_lte: BigInt
  versionSignal_in: [BigInt!]
  versionSignal_not_in: [BigInt!]
  tokens: BigInt
  tokens_not: BigInt
  tokens_gt: BigInt
  tokens_lt: BigInt
  tokens_gte: BigInt
  tokens_lte: BigInt
  tokens_in: [BigInt!]
  tokens_not_in: [BigInt!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__NameSignalTransaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
  nameSignal
  versionSignal
  tokens
  subgraph
}

input NETWORK__NameSignal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: NETWORK__Curator_filter
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  withdrawnTokens: BigInt
  withdrawnTokens_not: BigInt
  withdrawnTokens_gt: BigInt
  withdrawnTokens_lt: BigInt
  withdrawnTokens_gte: BigInt
  withdrawnTokens_lte: BigInt
  withdrawnTokens_in: [BigInt!]
  withdrawnTokens_not_in: [BigInt!]
  nameSignal: BigInt
  nameSignal_not: BigInt
  nameSignal_gt: BigInt
  nameSignal_lt: BigInt
  nameSignal_gte: BigInt
  nameSignal_lte: BigInt
  nameSignal_in: [BigInt!]
  nameSignal_not_in: [BigInt!]
  signal: NETWORK__BigDecimal
  signal_not: NETWORK__BigDecimal
  signal_gt: NETWORK__BigDecimal
  signal_lt: NETWORK__BigDecimal
  signal_gte: NETWORK__BigDecimal
  signal_lte: NETWORK__BigDecimal
  signal_in: [NETWORK__BigDecimal!]
  signal_not_in: [NETWORK__BigDecimal!]
  lastNameSignalChange: Int
  lastNameSignalChange_not: Int
  lastNameSignalChange_gt: Int
  lastNameSignalChange_lt: Int
  lastNameSignalChange_gte: Int
  lastNameSignalChange_lte: Int
  lastNameSignalChange_in: [Int!]
  lastNameSignalChange_not_in: [Int!]
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  averageCostBasis: NETWORK__BigDecimal
  averageCostBasis_not: NETWORK__BigDecimal
  averageCostBasis_gt: NETWORK__BigDecimal
  averageCostBasis_lt: NETWORK__BigDecimal
  averageCostBasis_gte: NETWORK__BigDecimal
  averageCostBasis_lte: NETWORK__BigDecimal
  averageCostBasis_in: [NETWORK__BigDecimal!]
  averageCostBasis_not_in: [NETWORK__BigDecimal!]
  averageCostBasisPerSignal: NETWORK__BigDecimal
  averageCostBasisPerSignal_not: NETWORK__BigDecimal
  averageCostBasisPerSignal_gt: NETWORK__BigDecimal
  averageCostBasisPerSignal_lt: NETWORK__BigDecimal
  averageCostBasisPerSignal_gte: NETWORK__BigDecimal
  averageCostBasisPerSignal_lte: NETWORK__BigDecimal
  averageCostBasisPerSignal_in: [NETWORK__BigDecimal!]
  averageCostBasisPerSignal_not_in: [NETWORK__BigDecimal!]
  nameSignalAverageCostBasis: NETWORK__BigDecimal
  nameSignalAverageCostBasis_not: NETWORK__BigDecimal
  nameSignalAverageCostBasis_gt: NETWORK__BigDecimal
  nameSignalAverageCostBasis_lt: NETWORK__BigDecimal
  nameSignalAverageCostBasis_gte: NETWORK__BigDecimal
  nameSignalAverageCostBasis_lte: NETWORK__BigDecimal
  nameSignalAverageCostBasis_in: [NETWORK__BigDecimal!]
  nameSignalAverageCostBasis_not_in: [NETWORK__BigDecimal!]
  nameSignalAverageCostBasisPerSignal: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_not: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_gt: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_lt: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_gte: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_lte: NETWORK__BigDecimal
  nameSignalAverageCostBasisPerSignal_in: [NETWORK__BigDecimal!]
  nameSignalAverageCostBasisPerSignal_not_in: [NETWORK__BigDecimal!]
  signalAverageCostBasis: NETWORK__BigDecimal
  signalAverageCostBasis_not: NETWORK__BigDecimal
  signalAverageCostBasis_gt: NETWORK__BigDecimal
  signalAverageCostBasis_lt: NETWORK__BigDecimal
  signalAverageCostBasis_gte: NETWORK__BigDecimal
  signalAverageCostBasis_lte: NETWORK__BigDecimal
  signalAverageCostBasis_in: [NETWORK__BigDecimal!]
  signalAverageCostBasis_not_in: [NETWORK__BigDecimal!]
  signalAverageCostBasisPerSignal: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_not: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_gt: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_lt: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_gte: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_lte: NETWORK__BigDecimal
  signalAverageCostBasisPerSignal_in: [NETWORK__BigDecimal!]
  signalAverageCostBasisPerSignal_not_in: [NETWORK__BigDecimal!]
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: NETWORK__NameSignal_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__NameSignal_orderBy {
  id
  curator
  subgraph
  signalledTokens
  unsignalledTokens
  withdrawnTokens
  nameSignal
  signal
  lastNameSignalChange
  realizedRewards
  averageCostBasis
  averageCostBasisPerSignal
  nameSignalAverageCostBasis
  nameSignalAverageCostBasisPerSignal
  signalAverageCostBasis
  signalAverageCostBasisPerSignal
  entityVersion
  linkedEntity
}

enum NETWORK__NameSystem {
  ENS
}

type NETWORK__Network {
  id: ID!
  deployments(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphDeployment_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphDeployment_filter): [NETWORK__SubgraphDeployment!]!
}

input NETWORK__Network_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  deployments_: NETWORK__SubgraphDeployment_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Network_orderBy {
  id
  deployments
}

"""Defines the order direction, either ascending or descending"""
enum NETWORK__OrderDirection {
  asc
  desc
}

"""
Global pool of query fees for closed state channels. Each Epoch has a single pool,
hence why they share the same IDs.

"""
type NETWORK__Pool {
  """Epoch number of the pool"""
  id: ID!
  """
  Total effective allocation tokens from all allocations closed in this epoch
  """
  allocation: BigInt!
  """Total query fees collected in this epoch"""
  totalQueryFees: BigInt!
  """
  Total query fees claimed in this epoch. Can be smaller than totalFees because of cobbs douglas function 
  """
  claimedFees: BigInt!
  """
  Total rewards from query fees deposited to all curator bonding curves during the epoch
  """
  curatorRewards: BigInt!
  """Allocations that were closed during this epoch"""
  closedAllocations(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Allocation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Allocation_filter): [NETWORK__Allocation!]!
}

input NETWORK__Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  allocation: BigInt
  allocation_not: BigInt
  allocation_gt: BigInt
  allocation_lt: BigInt
  allocation_gte: BigInt
  allocation_lte: BigInt
  allocation_in: [BigInt!]
  allocation_not_in: [BigInt!]
  totalQueryFees: BigInt
  totalQueryFees_not: BigInt
  totalQueryFees_gt: BigInt
  totalQueryFees_lt: BigInt
  totalQueryFees_gte: BigInt
  totalQueryFees_lte: BigInt
  totalQueryFees_in: [BigInt!]
  totalQueryFees_not_in: [BigInt!]
  claimedFees: BigInt
  claimedFees_not: BigInt
  claimedFees_gt: BigInt
  claimedFees_lt: BigInt
  claimedFees_gte: BigInt
  claimedFees_lte: BigInt
  claimedFees_in: [BigInt!]
  claimedFees_not_in: [BigInt!]
  curatorRewards: BigInt
  curatorRewards_not: BigInt
  curatorRewards_gt: BigInt
  curatorRewards_lt: BigInt
  curatorRewards_gte: BigInt
  curatorRewards_lte: BigInt
  curatorRewards_in: [BigInt!]
  curatorRewards_not_in: [BigInt!]
  closedAllocations_: NETWORK__Allocation_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Pool_orderBy {
  id
  allocation
  totalQueryFees
  claimedFees
  curatorRewards
  closedAllocations
}

"""
TokenLockWallet Revocability Enum

"""
enum NETWORK__Revocability {
  NotSet
  Enabled
  Disabled
}

"""
Curator Signal for a single SubgraphDeployment

"""
type NETWORK__Signal {
  """Eth address + subgraph deployment ID"""
  id: ID!
  """Eth address of the curator"""
  curator: NETWORK__Curator!
  """Subgraph being signalled"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """CUMULATIVE number of tokens the curator has signalled"""
  signalledTokens: BigInt!
  """CUMULATIVE number of tokens the curator has unsignalled"""
  unsignalledTokens: BigInt!
  """Signal that the curator has from signaling their GRT"""
  signal: BigInt!
  """Curator average cost basis for this signal on this subgraph"""
  averageCostBasis: NETWORK__BigDecimal!
  """averageCostBasis / signal"""
  averageCostBasisPerSignal: NETWORK__BigDecimal!
  """Block for which the curator last entered or exited the curve"""
  lastSignalChange: Int!
  """
  Summation of realized rewards from before the last time the curator entered the curation curve
  """
  realizedRewards: BigInt!
  """Timetamp when this entity was created"""
  createdAt: Int!
  """Timetamp when this entity was last updated"""
  lastUpdatedAt: Int!
  """Block number where this entity was created"""
  createdAtBlock: Int!
  """Block number where this entity was last updated"""
  lastUpdatedAtBlock: Int!
}

"""
All relevant data for a Signal Transaction in The Graph Network

"""
type NETWORK__SignalTransaction implements NETWORK__Transaction {
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  signer: NETWORK__GraphAccount!
  type: NETWORK__TransactionType!
  """Amount of signal updated"""
  signal: BigInt!
  """Tokens used"""
  tokens: BigInt!
  """Subgraph where signal was updated"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """Withdrawal fees. On minting only"""
  withdrawalFees: BigInt!
}

input NETWORK__SignalTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: NETWORK__GraphAccount_filter
  type: NETWORK__TransactionType
  type_not: NETWORK__TransactionType
  type_in: [NETWORK__TransactionType!]
  type_not_in: [NETWORK__TransactionType!]
  signal: BigInt
  signal_not: BigInt
  signal_gt: BigInt
  signal_lt: BigInt
  signal_gte: BigInt
  signal_lte: BigInt
  signal_in: [BigInt!]
  signal_not_in: [BigInt!]
  tokens: BigInt
  tokens_not: BigInt
  tokens_gt: BigInt
  tokens_lt: BigInt
  tokens_gte: BigInt
  tokens_lte: BigInt
  tokens_in: [BigInt!]
  tokens_not_in: [BigInt!]
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  withdrawalFees: BigInt
  withdrawalFees_not: BigInt
  withdrawalFees_gt: BigInt
  withdrawalFees_lt: BigInt
  withdrawalFees_gte: BigInt
  withdrawalFees_lte: BigInt
  withdrawalFees_in: [BigInt!]
  withdrawalFees_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__SignalTransaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
  signal
  tokens
  subgraphDeployment
  withdrawalFees
}

input NETWORK__Signal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  curator: String
  curator_not: String
  curator_gt: String
  curator_lt: String
  curator_gte: String
  curator_lte: String
  curator_in: [String!]
  curator_not_in: [String!]
  curator_contains: String
  curator_contains_nocase: String
  curator_not_contains: String
  curator_not_contains_nocase: String
  curator_starts_with: String
  curator_starts_with_nocase: String
  curator_not_starts_with: String
  curator_not_starts_with_nocase: String
  curator_ends_with: String
  curator_ends_with_nocase: String
  curator_not_ends_with: String
  curator_not_ends_with_nocase: String
  curator_: NETWORK__Curator_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  signal: BigInt
  signal_not: BigInt
  signal_gt: BigInt
  signal_lt: BigInt
  signal_gte: BigInt
  signal_lte: BigInt
  signal_in: [BigInt!]
  signal_not_in: [BigInt!]
  averageCostBasis: NETWORK__BigDecimal
  averageCostBasis_not: NETWORK__BigDecimal
  averageCostBasis_gt: NETWORK__BigDecimal
  averageCostBasis_lt: NETWORK__BigDecimal
  averageCostBasis_gte: NETWORK__BigDecimal
  averageCostBasis_lte: NETWORK__BigDecimal
  averageCostBasis_in: [NETWORK__BigDecimal!]
  averageCostBasis_not_in: [NETWORK__BigDecimal!]
  averageCostBasisPerSignal: NETWORK__BigDecimal
  averageCostBasisPerSignal_not: NETWORK__BigDecimal
  averageCostBasisPerSignal_gt: NETWORK__BigDecimal
  averageCostBasisPerSignal_lt: NETWORK__BigDecimal
  averageCostBasisPerSignal_gte: NETWORK__BigDecimal
  averageCostBasisPerSignal_lte: NETWORK__BigDecimal
  averageCostBasisPerSignal_in: [NETWORK__BigDecimal!]
  averageCostBasisPerSignal_not_in: [NETWORK__BigDecimal!]
  lastSignalChange: Int
  lastSignalChange_not: Int
  lastSignalChange_gt: Int
  lastSignalChange_lt: Int
  lastSignalChange_gte: Int
  lastSignalChange_lte: Int
  lastSignalChange_in: [Int!]
  lastSignalChange_not_in: [Int!]
  realizedRewards: BigInt
  realizedRewards_not: BigInt
  realizedRewards_gt: BigInt
  realizedRewards_lt: BigInt
  realizedRewards_gte: BigInt
  realizedRewards_lte: BigInt
  realizedRewards_in: [BigInt!]
  realizedRewards_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  lastUpdatedAt: Int
  lastUpdatedAt_not: Int
  lastUpdatedAt_gt: Int
  lastUpdatedAt_lt: Int
  lastUpdatedAt_gte: Int
  lastUpdatedAt_lte: Int
  lastUpdatedAt_in: [Int!]
  lastUpdatedAt_not_in: [Int!]
  createdAtBlock: Int
  createdAtBlock_not: Int
  createdAtBlock_gt: Int
  createdAtBlock_lt: Int
  createdAtBlock_gte: Int
  createdAtBlock_lte: Int
  createdAtBlock_in: [Int!]
  createdAtBlock_not_in: [Int!]
  lastUpdatedAtBlock: Int
  lastUpdatedAtBlock_not: Int
  lastUpdatedAtBlock_gt: Int
  lastUpdatedAtBlock_lt: Int
  lastUpdatedAtBlock_gte: Int
  lastUpdatedAtBlock_lte: Int
  lastUpdatedAtBlock_in: [Int!]
  lastUpdatedAtBlock_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Signal_orderBy {
  id
  curator
  subgraphDeployment
  signalledTokens
  unsignalledTokens
  signal
  averageCostBasis
  averageCostBasisPerSignal
  lastSignalChange
  realizedRewards
  createdAt
  lastUpdatedAt
  createdAtBlock
  lastUpdatedAtBlock
}

"""
The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
"Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
subgraph is stored on IPFS.

"""
type NETWORK__Subgraph {
  """
  Subgraph ID - which is derived from the Organization/Individual graph accountID
  """
  id: ID!
  """Graph account that owns this subgraph"""
  owner: NETWORK__GraphAccount!
  """Current version. Null if the subgraph is deprecated"""
  currentVersion: NETWORK__SubgraphVersion
  """
  [DEPRECATED] Past versions. Has the same data as 'versions' but keeps the old naming for backwards compatibility
  """
  pastVersions(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphVersion_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphVersion_filter): [NETWORK__SubgraphVersion!]!
  """List of all the subgraph versions included the current one"""
  versions(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphVersion_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphVersion_filter): [NETWORK__SubgraphVersion!]!
  """Version counter"""
  versionCount: BigInt!
  """Creation timestamp"""
  createdAt: Int!
  """Updated timestamp"""
  updatedAt: Int!
  """Whether the subgraph is active or deprecated"""
  active: Boolean!
  """
  Whether the subgraph has been claimed/migrated. Can only be false for subgraphs created with V1 contracts that have not been claimed/migrated
  """
  migrated: Boolean!
  """
  The actual ID of the subgraph on the contracts subgraph NFT implementation. BigInt represented as a String. It's only actually valid once the subgraph is migrated (migrated == true)
  """
  nftID: String
  """
  ID of the subgraph that was used on the old version of this The Graph Network Subgraph. Null for Subgraphs created with the new GNS implementation or for version 1 entities (since they use the old id)
  """
  oldID: String
  """
  Address used to create the ID. Only available for Subgraphs created pre-migration
  """
  creatorAddress: NETWORK__Bytes
  """
  Subgraph number used to create the ID. Only available for Subgraphs created pre-migration
  """
  subgraphNumber: BigInt
  """
  Auxiliary field to denote whether the subgraph is handling the initialization order on V2 events. Doesn't matter for V1 events.
  """
  initializing: Boolean!
  """
  Version of the entity. Subgraph entities are changing the way their ID is generated when the new GNS v2 rolls out so we need to differnetiate them
  """
  entityVersion: Int!
  """
  Subgraph entities might have 'duplicate' entities so that old IDs can be persisted and still queried properly. If that happens we have to link both duplicate entities to be able to update them properly.
  """
  linkedEntity: NETWORK__Subgraph
  """CUMULATIVE signaled tokens on this subgraph all time"""
  signalledTokens: BigInt!
  """CUMULATIVE unsignalled tokens on this subgraph all time"""
  unsignalledTokens: BigInt!
  """
  CURRENT amount of tokens signalled on this subgraph latest version. Mirrors the total amount signalled towards the current deployment.
  """
  currentSignalledTokens: BigInt!
  """The CURRENT name signal amount for this subgraph"""
  nameSignalAmount: BigInt!
  """Current amount of version signal managed by the name pool"""
  signalAmount: BigInt!
  """Reserve ratio of the name curation curve. In parts per million"""
  reserveRatio: Int!
  """Tokens that can be withdrawn once the Subgraph is deprecated"""
  withdrawableTokens: BigInt!
  """Tokens the curators have withdrawn from the deprecated Subgraph"""
  withdrawnTokens: BigInt!
  """Curators of this subgraph deployment"""
  nameSignals(skip: Int = 0, first: Int = 100, orderBy: NETWORK__NameSignal_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__NameSignal_filter): [NETWORK__NameSignal!]!
  """Total amount of NameSignal entities"""
  nameSignalCount: Int!
  """Subgraph metadata"""
  metadataHash: NETWORK__Bytes!
  """Subgraph metadata ipfs hash"""
  ipfsMetadataHash: String
  """Short description of the subgraph"""
  description: String
  """Image in string format"""
  image: String
  """NFT Image representation"""
  nftImage: String
  """Location of the code for this project"""
  codeRepository: String
  """Projects website"""
  website: String
  """Display name"""
  displayName: String
  """
  Categories that the subgraph belongs to. Modelled with a relation to allow for many-to-many relationship querying
  """
  categories(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphCategoryRelation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphCategoryRelation_filter): [NETWORK__SubgraphCategoryRelation!]!
  currentVersionRelationEntity: NETWORK__CurrentSubgraphDeploymentRelation
}

type NETWORK__SubgraphCategory {
  id: ID!
  subgraphs(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphCategoryRelation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphCategoryRelation_filter): [NETWORK__SubgraphCategoryRelation!]!
}

type NETWORK__SubgraphCategoryRelation {
  id: ID!
  subgraph: NETWORK__Subgraph!
  category: NETWORK__SubgraphCategory!
}

input NETWORK__SubgraphCategoryRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  category: String
  category_not: String
  category_gt: String
  category_lt: String
  category_gte: String
  category_lte: String
  category_in: [String!]
  category_not_in: [String!]
  category_contains: String
  category_contains_nocase: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_: NETWORK__SubgraphCategory_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__SubgraphCategoryRelation_orderBy {
  id
  subgraph
  category
}

input NETWORK__SubgraphCategory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraphs_: NETWORK__SubgraphCategoryRelation_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__SubgraphCategory_orderBy {
  id
  subgraphs
}

"""
The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
related to a SubgraphVersion.

"""
type NETWORK__SubgraphDeployment {
  """
  Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes
  """
  id: ID!
  """IPFS hash of the subgraph manifest"""
  ipfsHash: String!
  """The versions this subgraph deployment relates to"""
  versions(skip: Int = 0, first: Int = 100, orderBy: NETWORK__SubgraphVersion_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__SubgraphVersion_filter): [NETWORK__SubgraphVersion!]!
  """Creation timestamp"""
  createdAt: Int!
  """
  The block at which this deployment was denied for rewards. Null if not denied
  """
  deniedAt: Int!
  """
  The original Subgraph that was deployed through GNS. Can be null if never created through GNS. Used for filtering in the Explorer
  """
  originalName: String
  """CURRENT total stake of all indexers on this Subgraph Deployment"""
  stakedTokens: BigInt!
  """Allocations created by indexers for this Subgraph"""
  indexerAllocations(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Allocation_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Allocation_filter): [NETWORK__Allocation!]!
  """
  Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards
  """
  indexingRewardAmount: BigInt!
  """Total rewards accrued all time by indexers"""
  indexingIndexerRewardAmount: BigInt!
  """Total rewards accrued all time by delegators"""
  indexingDelegatorRewardAmount: BigInt!
  """
  Total query fees earned by this Subgraph Deployment, without curator query fees
  """
  queryFeesAmount: BigInt!
  """
  Total query fee rebates earned from the protocol, through the cobbs douglas formula. Does not include delegation fees
  """
  queryFeeRebates: BigInt!
  """Total curator rewards from fees"""
  curatorFeeRewards: BigInt!
  """CURRENT signalled tokens in the bonding curve"""
  signalledTokens: BigInt!
  """NOT IMPLEMENTED - CURRENT signalled tokens in the bonding curve"""
  unsignalledTokens: BigInt!
  """CURRENT curation signal for this subgraph deployment"""
  signalAmount: BigInt!
  """signalledTokens / signalAmount"""
  pricePerShare: NETWORK__BigDecimal!
  """Curators of this subgraph deployment"""
  curatorSignals(skip: Int = 0, first: Int = 100, orderBy: NETWORK__Signal_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__Signal_filter): [NETWORK__Signal!]!
  """Bonding curve reserve ratio. In parts per million"""
  reserveRatio: Int!
  """Manifest file for this subgraph deployment"""
  manifest: String
  """Network where the contracts that the subgraph indexes are located"""
  network: NETWORK__Network
  """Schema file for this subgraph deployment"""
  schema: String
  """IPFS hash of the schema file"""
  schemaIpfsHash: String
  """
  Total amount of Subgraph entities that used this deployment at some point. subgraphCount >= activeSubgraphCount + deprecatedSubgraphCount
  """
  subgraphCount: Int!
  """
  Amount of active Subgraph entities that are currently using this deployment. Deprecated subgraph entities are not counted
  """
  activeSubgraphCount: Int!
  """
  Amount of Subgraph entities that were currently using this deployment when they got deprecated
  """
  deprecatedSubgraphCount: Int!
}

input NETWORK__SubgraphDeployment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ipfsHash: String
  ipfsHash_not: String
  ipfsHash_gt: String
  ipfsHash_lt: String
  ipfsHash_gte: String
  ipfsHash_lte: String
  ipfsHash_in: [String!]
  ipfsHash_not_in: [String!]
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  versions_: NETWORK__SubgraphVersion_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  deniedAt: Int
  deniedAt_not: Int
  deniedAt_gt: Int
  deniedAt_lt: Int
  deniedAt_gte: Int
  deniedAt_lte: Int
  deniedAt_in: [Int!]
  deniedAt_not_in: [Int!]
  originalName: String
  originalName_not: String
  originalName_gt: String
  originalName_lt: String
  originalName_gte: String
  originalName_lte: String
  originalName_in: [String!]
  originalName_not_in: [String!]
  originalName_contains: String
  originalName_contains_nocase: String
  originalName_not_contains: String
  originalName_not_contains_nocase: String
  originalName_starts_with: String
  originalName_starts_with_nocase: String
  originalName_not_starts_with: String
  originalName_not_starts_with_nocase: String
  originalName_ends_with: String
  originalName_ends_with_nocase: String
  originalName_not_ends_with: String
  originalName_not_ends_with_nocase: String
  stakedTokens: BigInt
  stakedTokens_not: BigInt
  stakedTokens_gt: BigInt
  stakedTokens_lt: BigInt
  stakedTokens_gte: BigInt
  stakedTokens_lte: BigInt
  stakedTokens_in: [BigInt!]
  stakedTokens_not_in: [BigInt!]
  indexerAllocations_: NETWORK__Allocation_filter
  indexingRewardAmount: BigInt
  indexingRewardAmount_not: BigInt
  indexingRewardAmount_gt: BigInt
  indexingRewardAmount_lt: BigInt
  indexingRewardAmount_gte: BigInt
  indexingRewardAmount_lte: BigInt
  indexingRewardAmount_in: [BigInt!]
  indexingRewardAmount_not_in: [BigInt!]
  indexingIndexerRewardAmount: BigInt
  indexingIndexerRewardAmount_not: BigInt
  indexingIndexerRewardAmount_gt: BigInt
  indexingIndexerRewardAmount_lt: BigInt
  indexingIndexerRewardAmount_gte: BigInt
  indexingIndexerRewardAmount_lte: BigInt
  indexingIndexerRewardAmount_in: [BigInt!]
  indexingIndexerRewardAmount_not_in: [BigInt!]
  indexingDelegatorRewardAmount: BigInt
  indexingDelegatorRewardAmount_not: BigInt
  indexingDelegatorRewardAmount_gt: BigInt
  indexingDelegatorRewardAmount_lt: BigInt
  indexingDelegatorRewardAmount_gte: BigInt
  indexingDelegatorRewardAmount_lte: BigInt
  indexingDelegatorRewardAmount_in: [BigInt!]
  indexingDelegatorRewardAmount_not_in: [BigInt!]
  queryFeesAmount: BigInt
  queryFeesAmount_not: BigInt
  queryFeesAmount_gt: BigInt
  queryFeesAmount_lt: BigInt
  queryFeesAmount_gte: BigInt
  queryFeesAmount_lte: BigInt
  queryFeesAmount_in: [BigInt!]
  queryFeesAmount_not_in: [BigInt!]
  queryFeeRebates: BigInt
  queryFeeRebates_not: BigInt
  queryFeeRebates_gt: BigInt
  queryFeeRebates_lt: BigInt
  queryFeeRebates_gte: BigInt
  queryFeeRebates_lte: BigInt
  queryFeeRebates_in: [BigInt!]
  queryFeeRebates_not_in: [BigInt!]
  curatorFeeRewards: BigInt
  curatorFeeRewards_not: BigInt
  curatorFeeRewards_gt: BigInt
  curatorFeeRewards_lt: BigInt
  curatorFeeRewards_gte: BigInt
  curatorFeeRewards_lte: BigInt
  curatorFeeRewards_in: [BigInt!]
  curatorFeeRewards_not_in: [BigInt!]
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  signalAmount: BigInt
  signalAmount_not: BigInt
  signalAmount_gt: BigInt
  signalAmount_lt: BigInt
  signalAmount_gte: BigInt
  signalAmount_lte: BigInt
  signalAmount_in: [BigInt!]
  signalAmount_not_in: [BigInt!]
  pricePerShare: NETWORK__BigDecimal
  pricePerShare_not: NETWORK__BigDecimal
  pricePerShare_gt: NETWORK__BigDecimal
  pricePerShare_lt: NETWORK__BigDecimal
  pricePerShare_gte: NETWORK__BigDecimal
  pricePerShare_lte: NETWORK__BigDecimal
  pricePerShare_in: [NETWORK__BigDecimal!]
  pricePerShare_not_in: [NETWORK__BigDecimal!]
  curatorSignals_: NETWORK__Signal_filter
  reserveRatio: Int
  reserveRatio_not: Int
  reserveRatio_gt: Int
  reserveRatio_lt: Int
  reserveRatio_gte: Int
  reserveRatio_lte: Int
  reserveRatio_in: [Int!]
  reserveRatio_not_in: [Int!]
  manifest: String
  manifest_not: String
  manifest_gt: String
  manifest_lt: String
  manifest_gte: String
  manifest_lte: String
  manifest_in: [String!]
  manifest_not_in: [String!]
  manifest_contains: String
  manifest_contains_nocase: String
  manifest_not_contains: String
  manifest_not_contains_nocase: String
  manifest_starts_with: String
  manifest_starts_with_nocase: String
  manifest_not_starts_with: String
  manifest_not_starts_with_nocase: String
  manifest_ends_with: String
  manifest_ends_with_nocase: String
  manifest_not_ends_with: String
  manifest_not_ends_with_nocase: String
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  network_: NETWORK__Network_filter
  schema: String
  schema_not: String
  schema_gt: String
  schema_lt: String
  schema_gte: String
  schema_lte: String
  schema_in: [String!]
  schema_not_in: [String!]
  schema_contains: String
  schema_contains_nocase: String
  schema_not_contains: String
  schema_not_contains_nocase: String
  schema_starts_with: String
  schema_starts_with_nocase: String
  schema_not_starts_with: String
  schema_not_starts_with_nocase: String
  schema_ends_with: String
  schema_ends_with_nocase: String
  schema_not_ends_with: String
  schema_not_ends_with_nocase: String
  schemaIpfsHash: String
  schemaIpfsHash_not: String
  schemaIpfsHash_gt: String
  schemaIpfsHash_lt: String
  schemaIpfsHash_gte: String
  schemaIpfsHash_lte: String
  schemaIpfsHash_in: [String!]
  schemaIpfsHash_not_in: [String!]
  schemaIpfsHash_contains: String
  schemaIpfsHash_contains_nocase: String
  schemaIpfsHash_not_contains: String
  schemaIpfsHash_not_contains_nocase: String
  schemaIpfsHash_starts_with: String
  schemaIpfsHash_starts_with_nocase: String
  schemaIpfsHash_not_starts_with: String
  schemaIpfsHash_not_starts_with_nocase: String
  schemaIpfsHash_ends_with: String
  schemaIpfsHash_ends_with_nocase: String
  schemaIpfsHash_not_ends_with: String
  schemaIpfsHash_not_ends_with_nocase: String
  subgraphCount: Int
  subgraphCount_not: Int
  subgraphCount_gt: Int
  subgraphCount_lt: Int
  subgraphCount_gte: Int
  subgraphCount_lte: Int
  subgraphCount_in: [Int!]
  subgraphCount_not_in: [Int!]
  activeSubgraphCount: Int
  activeSubgraphCount_not: Int
  activeSubgraphCount_gt: Int
  activeSubgraphCount_lt: Int
  activeSubgraphCount_gte: Int
  activeSubgraphCount_lte: Int
  activeSubgraphCount_in: [Int!]
  activeSubgraphCount_not_in: [Int!]
  deprecatedSubgraphCount: Int
  deprecatedSubgraphCount_not: Int
  deprecatedSubgraphCount_gt: Int
  deprecatedSubgraphCount_lt: Int
  deprecatedSubgraphCount_gte: Int
  deprecatedSubgraphCount_lte: Int
  deprecatedSubgraphCount_in: [Int!]
  deprecatedSubgraphCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__SubgraphDeployment_orderBy {
  id
  ipfsHash
  versions
  createdAt
  deniedAt
  originalName
  stakedTokens
  indexerAllocations
  indexingRewardAmount
  indexingIndexerRewardAmount
  indexingDelegatorRewardAmount
  queryFeesAmount
  queryFeeRebates
  curatorFeeRewards
  signalledTokens
  unsignalledTokens
  signalAmount
  pricePerShare
  curatorSignals
  reserveRatio
  manifest
  network
  schema
  schemaIpfsHash
  subgraphCount
  activeSubgraphCount
  deprecatedSubgraphCount
}

"""
The SubgraphVersion entity represents a version of the Subgraph. A new SubgraphVersion is created
whenever there is an update to the Subgraph triggered by the owner. The new SubgraphVersion can
then point to a new SubgraphDeployment, thus allowing the Subgraph to resolve to a different
deployment, while keeping the same endpoint. The metadata and label are stored on IPFS. The label
is for the developer to provide a semantic version. This is different from the version, which is
just a counter than increases each time a new SubgraphVersion is created for a Subgraph.

"""
type NETWORK__SubgraphVersion {
  """Concatenation of subgraph, subgraph deployment, and version ID"""
  id: ID!
  """Subgraph of this version"""
  subgraph: NETWORK__Subgraph!
  """Subgraph deployment of this version"""
  subgraphDeployment: NETWORK__SubgraphDeployment!
  """Version number"""
  version: Int!
  """Creation timestamp"""
  createdAt: Int!
  """Subgraph version metadata content address"""
  metadataHash: NETWORK__Bytes
  """Short description of the version"""
  description: String
  """Semantic versioning label"""
  label: String
  entityVersion: Int!
  linkedEntity: NETWORK__SubgraphVersion
}

input NETWORK__SubgraphVersion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  subgraph: String
  subgraph_not: String
  subgraph_gt: String
  subgraph_lt: String
  subgraph_gte: String
  subgraph_lte: String
  subgraph_in: [String!]
  subgraph_not_in: [String!]
  subgraph_contains: String
  subgraph_contains_nocase: String
  subgraph_not_contains: String
  subgraph_not_contains_nocase: String
  subgraph_starts_with: String
  subgraph_starts_with_nocase: String
  subgraph_not_starts_with: String
  subgraph_not_starts_with_nocase: String
  subgraph_ends_with: String
  subgraph_ends_with_nocase: String
  subgraph_not_ends_with: String
  subgraph_not_ends_with_nocase: String
  subgraph_: NETWORK__Subgraph_filter
  subgraphDeployment: String
  subgraphDeployment_not: String
  subgraphDeployment_gt: String
  subgraphDeployment_lt: String
  subgraphDeployment_gte: String
  subgraphDeployment_lte: String
  subgraphDeployment_in: [String!]
  subgraphDeployment_not_in: [String!]
  subgraphDeployment_contains: String
  subgraphDeployment_contains_nocase: String
  subgraphDeployment_not_contains: String
  subgraphDeployment_not_contains_nocase: String
  subgraphDeployment_starts_with: String
  subgraphDeployment_starts_with_nocase: String
  subgraphDeployment_not_starts_with: String
  subgraphDeployment_not_starts_with_nocase: String
  subgraphDeployment_ends_with: String
  subgraphDeployment_ends_with_nocase: String
  subgraphDeployment_not_ends_with: String
  subgraphDeployment_not_ends_with_nocase: String
  subgraphDeployment_: NETWORK__SubgraphDeployment_filter
  version: Int
  version_not: Int
  version_gt: Int
  version_lt: Int
  version_gte: Int
  version_lte: Int
  version_in: [Int!]
  version_not_in: [Int!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  metadataHash: NETWORK__Bytes
  metadataHash_not: NETWORK__Bytes
  metadataHash_gt: NETWORK__Bytes
  metadataHash_lt: NETWORK__Bytes
  metadataHash_gte: NETWORK__Bytes
  metadataHash_lte: NETWORK__Bytes
  metadataHash_in: [NETWORK__Bytes!]
  metadataHash_not_in: [NETWORK__Bytes!]
  metadataHash_contains: NETWORK__Bytes
  metadataHash_not_contains: NETWORK__Bytes
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  label: String
  label_not: String
  label_gt: String
  label_lt: String
  label_gte: String
  label_lte: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_contains_nocase: String
  label_not_contains: String
  label_not_contains_nocase: String
  label_starts_with: String
  label_starts_with_nocase: String
  label_not_starts_with: String
  label_not_starts_with_nocase: String
  label_ends_with: String
  label_ends_with_nocase: String
  label_not_ends_with: String
  label_not_ends_with_nocase: String
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: NETWORK__SubgraphVersion_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__SubgraphVersion_orderBy {
  id
  subgraph
  subgraphDeployment
  version
  createdAt
  metadataHash
  description
  label
  entityVersion
  linkedEntity
}

input NETWORK__Subgraph_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: NETWORK__GraphAccount_filter
  currentVersion: String
  currentVersion_not: String
  currentVersion_gt: String
  currentVersion_lt: String
  currentVersion_gte: String
  currentVersion_lte: String
  currentVersion_in: [String!]
  currentVersion_not_in: [String!]
  currentVersion_contains: String
  currentVersion_contains_nocase: String
  currentVersion_not_contains: String
  currentVersion_not_contains_nocase: String
  currentVersion_starts_with: String
  currentVersion_starts_with_nocase: String
  currentVersion_not_starts_with: String
  currentVersion_not_starts_with_nocase: String
  currentVersion_ends_with: String
  currentVersion_ends_with_nocase: String
  currentVersion_not_ends_with: String
  currentVersion_not_ends_with_nocase: String
  currentVersion_: NETWORK__SubgraphVersion_filter
  pastVersions_: NETWORK__SubgraphVersion_filter
  versions_: NETWORK__SubgraphVersion_filter
  versionCount: BigInt
  versionCount_not: BigInt
  versionCount_gt: BigInt
  versionCount_lt: BigInt
  versionCount_gte: BigInt
  versionCount_lte: BigInt
  versionCount_in: [BigInt!]
  versionCount_not_in: [BigInt!]
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_gt: Int
  updatedAt_lt: Int
  updatedAt_gte: Int
  updatedAt_lte: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  migrated: Boolean
  migrated_not: Boolean
  migrated_in: [Boolean!]
  migrated_not_in: [Boolean!]
  nftID: String
  nftID_not: String
  nftID_gt: String
  nftID_lt: String
  nftID_gte: String
  nftID_lte: String
  nftID_in: [String!]
  nftID_not_in: [String!]
  nftID_contains: String
  nftID_contains_nocase: String
  nftID_not_contains: String
  nftID_not_contains_nocase: String
  nftID_starts_with: String
  nftID_starts_with_nocase: String
  nftID_not_starts_with: String
  nftID_not_starts_with_nocase: String
  nftID_ends_with: String
  nftID_ends_with_nocase: String
  nftID_not_ends_with: String
  nftID_not_ends_with_nocase: String
  oldID: String
  oldID_not: String
  oldID_gt: String
  oldID_lt: String
  oldID_gte: String
  oldID_lte: String
  oldID_in: [String!]
  oldID_not_in: [String!]
  oldID_contains: String
  oldID_contains_nocase: String
  oldID_not_contains: String
  oldID_not_contains_nocase: String
  oldID_starts_with: String
  oldID_starts_with_nocase: String
  oldID_not_starts_with: String
  oldID_not_starts_with_nocase: String
  oldID_ends_with: String
  oldID_ends_with_nocase: String
  oldID_not_ends_with: String
  oldID_not_ends_with_nocase: String
  creatorAddress: NETWORK__Bytes
  creatorAddress_not: NETWORK__Bytes
  creatorAddress_gt: NETWORK__Bytes
  creatorAddress_lt: NETWORK__Bytes
  creatorAddress_gte: NETWORK__Bytes
  creatorAddress_lte: NETWORK__Bytes
  creatorAddress_in: [NETWORK__Bytes!]
  creatorAddress_not_in: [NETWORK__Bytes!]
  creatorAddress_contains: NETWORK__Bytes
  creatorAddress_not_contains: NETWORK__Bytes
  subgraphNumber: BigInt
  subgraphNumber_not: BigInt
  subgraphNumber_gt: BigInt
  subgraphNumber_lt: BigInt
  subgraphNumber_gte: BigInt
  subgraphNumber_lte: BigInt
  subgraphNumber_in: [BigInt!]
  subgraphNumber_not_in: [BigInt!]
  initializing: Boolean
  initializing_not: Boolean
  initializing_in: [Boolean!]
  initializing_not_in: [Boolean!]
  entityVersion: Int
  entityVersion_not: Int
  entityVersion_gt: Int
  entityVersion_lt: Int
  entityVersion_gte: Int
  entityVersion_lte: Int
  entityVersion_in: [Int!]
  entityVersion_not_in: [Int!]
  linkedEntity: String
  linkedEntity_not: String
  linkedEntity_gt: String
  linkedEntity_lt: String
  linkedEntity_gte: String
  linkedEntity_lte: String
  linkedEntity_in: [String!]
  linkedEntity_not_in: [String!]
  linkedEntity_contains: String
  linkedEntity_contains_nocase: String
  linkedEntity_not_contains: String
  linkedEntity_not_contains_nocase: String
  linkedEntity_starts_with: String
  linkedEntity_starts_with_nocase: String
  linkedEntity_not_starts_with: String
  linkedEntity_not_starts_with_nocase: String
  linkedEntity_ends_with: String
  linkedEntity_ends_with_nocase: String
  linkedEntity_not_ends_with: String
  linkedEntity_not_ends_with_nocase: String
  linkedEntity_: NETWORK__Subgraph_filter
  signalledTokens: BigInt
  signalledTokens_not: BigInt
  signalledTokens_gt: BigInt
  signalledTokens_lt: BigInt
  signalledTokens_gte: BigInt
  signalledTokens_lte: BigInt
  signalledTokens_in: [BigInt!]
  signalledTokens_not_in: [BigInt!]
  unsignalledTokens: BigInt
  unsignalledTokens_not: BigInt
  unsignalledTokens_gt: BigInt
  unsignalledTokens_lt: BigInt
  unsignalledTokens_gte: BigInt
  unsignalledTokens_lte: BigInt
  unsignalledTokens_in: [BigInt!]
  unsignalledTokens_not_in: [BigInt!]
  currentSignalledTokens: BigInt
  currentSignalledTokens_not: BigInt
  currentSignalledTokens_gt: BigInt
  currentSignalledTokens_lt: BigInt
  currentSignalledTokens_gte: BigInt
  currentSignalledTokens_lte: BigInt
  currentSignalledTokens_in: [BigInt!]
  currentSignalledTokens_not_in: [BigInt!]
  nameSignalAmount: BigInt
  nameSignalAmount_not: BigInt
  nameSignalAmount_gt: BigInt
  nameSignalAmount_lt: BigInt
  nameSignalAmount_gte: BigInt
  nameSignalAmount_lte: BigInt
  nameSignalAmount_in: [BigInt!]
  nameSignalAmount_not_in: [BigInt!]
  signalAmount: BigInt
  signalAmount_not: BigInt
  signalAmount_gt: BigInt
  signalAmount_lt: BigInt
  signalAmount_gte: BigInt
  signalAmount_lte: BigInt
  signalAmount_in: [BigInt!]
  signalAmount_not_in: [BigInt!]
  reserveRatio: Int
  reserveRatio_not: Int
  reserveRatio_gt: Int
  reserveRatio_lt: Int
  reserveRatio_gte: Int
  reserveRatio_lte: Int
  reserveRatio_in: [Int!]
  reserveRatio_not_in: [Int!]
  withdrawableTokens: BigInt
  withdrawableTokens_not: BigInt
  withdrawableTokens_gt: BigInt
  withdrawableTokens_lt: BigInt
  withdrawableTokens_gte: BigInt
  withdrawableTokens_lte: BigInt
  withdrawableTokens_in: [BigInt!]
  withdrawableTokens_not_in: [BigInt!]
  withdrawnTokens: BigInt
  withdrawnTokens_not: BigInt
  withdrawnTokens_gt: BigInt
  withdrawnTokens_lt: BigInt
  withdrawnTokens_gte: BigInt
  withdrawnTokens_lte: BigInt
  withdrawnTokens_in: [BigInt!]
  withdrawnTokens_not_in: [BigInt!]
  nameSignals_: NETWORK__NameSignal_filter
  nameSignalCount: Int
  nameSignalCount_not: Int
  nameSignalCount_gt: Int
  nameSignalCount_lt: Int
  nameSignalCount_gte: Int
  nameSignalCount_lte: Int
  nameSignalCount_in: [Int!]
  nameSignalCount_not_in: [Int!]
  metadataHash: NETWORK__Bytes
  metadataHash_not: NETWORK__Bytes
  metadataHash_gt: NETWORK__Bytes
  metadataHash_lt: NETWORK__Bytes
  metadataHash_gte: NETWORK__Bytes
  metadataHash_lte: NETWORK__Bytes
  metadataHash_in: [NETWORK__Bytes!]
  metadataHash_not_in: [NETWORK__Bytes!]
  metadataHash_contains: NETWORK__Bytes
  metadataHash_not_contains: NETWORK__Bytes
  ipfsMetadataHash: String
  ipfsMetadataHash_not: String
  ipfsMetadataHash_gt: String
  ipfsMetadataHash_lt: String
  ipfsMetadataHash_gte: String
  ipfsMetadataHash_lte: String
  ipfsMetadataHash_in: [String!]
  ipfsMetadataHash_not_in: [String!]
  ipfsMetadataHash_contains: String
  ipfsMetadataHash_contains_nocase: String
  ipfsMetadataHash_not_contains: String
  ipfsMetadataHash_not_contains_nocase: String
  ipfsMetadataHash_starts_with: String
  ipfsMetadataHash_starts_with_nocase: String
  ipfsMetadataHash_not_starts_with: String
  ipfsMetadataHash_not_starts_with_nocase: String
  ipfsMetadataHash_ends_with: String
  ipfsMetadataHash_ends_with_nocase: String
  ipfsMetadataHash_not_ends_with: String
  ipfsMetadataHash_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  nftImage: String
  nftImage_not: String
  nftImage_gt: String
  nftImage_lt: String
  nftImage_gte: String
  nftImage_lte: String
  nftImage_in: [String!]
  nftImage_not_in: [String!]
  nftImage_contains: String
  nftImage_contains_nocase: String
  nftImage_not_contains: String
  nftImage_not_contains_nocase: String
  nftImage_starts_with: String
  nftImage_starts_with_nocase: String
  nftImage_not_starts_with: String
  nftImage_not_starts_with_nocase: String
  nftImage_ends_with: String
  nftImage_ends_with_nocase: String
  nftImage_not_ends_with: String
  nftImage_not_ends_with_nocase: String
  codeRepository: String
  codeRepository_not: String
  codeRepository_gt: String
  codeRepository_lt: String
  codeRepository_gte: String
  codeRepository_lte: String
  codeRepository_in: [String!]
  codeRepository_not_in: [String!]
  codeRepository_contains: String
  codeRepository_contains_nocase: String
  codeRepository_not_contains: String
  codeRepository_not_contains_nocase: String
  codeRepository_starts_with: String
  codeRepository_starts_with_nocase: String
  codeRepository_not_starts_with: String
  codeRepository_not_starts_with_nocase: String
  codeRepository_ends_with: String
  codeRepository_ends_with_nocase: String
  codeRepository_not_ends_with: String
  codeRepository_not_ends_with_nocase: String
  website: String
  website_not: String
  website_gt: String
  website_lt: String
  website_gte: String
  website_lte: String
  website_in: [String!]
  website_not_in: [String!]
  website_contains: String
  website_contains_nocase: String
  website_not_contains: String
  website_not_contains_nocase: String
  website_starts_with: String
  website_starts_with_nocase: String
  website_not_starts_with: String
  website_not_starts_with_nocase: String
  website_ends_with: String
  website_ends_with_nocase: String
  website_not_ends_with: String
  website_not_ends_with_nocase: String
  displayName: String
  displayName_not: String
  displayName_gt: String
  displayName_lt: String
  displayName_gte: String
  displayName_lte: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_contains: String
  displayName_contains_nocase: String
  displayName_not_contains: String
  displayName_not_contains_nocase: String
  displayName_starts_with: String
  displayName_starts_with_nocase: String
  displayName_not_starts_with: String
  displayName_not_starts_with_nocase: String
  displayName_ends_with: String
  displayName_ends_with_nocase: String
  displayName_not_ends_with: String
  displayName_not_ends_with_nocase: String
  categories_: NETWORK__SubgraphCategoryRelation_filter
  currentVersionRelationEntity: String
  currentVersionRelationEntity_not: String
  currentVersionRelationEntity_gt: String
  currentVersionRelationEntity_lt: String
  currentVersionRelationEntity_gte: String
  currentVersionRelationEntity_lte: String
  currentVersionRelationEntity_in: [String!]
  currentVersionRelationEntity_not_in: [String!]
  currentVersionRelationEntity_contains: String
  currentVersionRelationEntity_contains_nocase: String
  currentVersionRelationEntity_not_contains: String
  currentVersionRelationEntity_not_contains_nocase: String
  currentVersionRelationEntity_starts_with: String
  currentVersionRelationEntity_starts_with_nocase: String
  currentVersionRelationEntity_not_starts_with: String
  currentVersionRelationEntity_not_starts_with_nocase: String
  currentVersionRelationEntity_ends_with: String
  currentVersionRelationEntity_ends_with_nocase: String
  currentVersionRelationEntity_not_ends_with: String
  currentVersionRelationEntity_not_ends_with_nocase: String
  currentVersionRelationEntity_: NETWORK__CurrentSubgraphDeploymentRelation_filter
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Subgraph_orderBy {
  id
  owner
  currentVersion
  pastVersions
  versions
  versionCount
  createdAt
  updatedAt
  active
  migrated
  nftID
  oldID
  creatorAddress
  subgraphNumber
  initializing
  entityVersion
  linkedEntity
  signalledTokens
  unsignalledTokens
  currentSignalledTokens
  nameSignalAmount
  signalAmount
  reserveRatio
  withdrawableTokens
  withdrawnTokens
  nameSignals
  nameSignalCount
  metadataHash
  ipfsMetadataHash
  description
  image
  nftImage
  codeRepository
  website
  displayName
  categories
  currentVersionRelationEntity
}

"""
Token Lock Wallets which hold locked GRT

"""
type NETWORK__TokenLockWallet {
  """The address of the token lock wallet"""
  id: ID!
  """The Manager address"""
  manager: NETWORK__Bytes!
  """The hash of the initializer"""
  initHash: NETWORK__Bytes!
  """Address of the beneficiary of locked tokens"""
  beneficiary: NETWORK__Bytes!
  """The token being used (GRT)"""
  token: NETWORK__Bytes!
  """Amount of tokens to be managed by the lock contract"""
  managedAmount: BigInt!
  """Start time of the release schedule"""
  startTime: BigInt!
  """End time of the release schedule"""
  endTime: BigInt!
  """Number of periods between start time and end time"""
  periods: BigInt!
  """Time when the releases start"""
  releaseStartTime: BigInt!
  """Time the cliff vests, 0 if no cliff"""
  vestingCliffTime: BigInt!
  """Whether or not the contract is revocable"""
  revocable: NETWORK__Revocability
  """
  True if the beneficiary has approved addresses that the manager has approved
  """
  tokenDestinationsApproved: Boolean!
  """The amount of tokens that have been resleased"""
  tokensReleased: BigInt!
  """The amount of tokens that have been withdrawn"""
  tokensWithdrawn: BigInt!
  """The amount of tokens that have been revoked"""
  tokensRevoked: BigInt!
  """The block this wlalet was created"""
  blockNumberCreated: BigInt!
  """The creation tx hash of the wallet"""
  txHash: NETWORK__Bytes!
}

input NETWORK__TokenLockWallet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  manager: NETWORK__Bytes
  manager_not: NETWORK__Bytes
  manager_gt: NETWORK__Bytes
  manager_lt: NETWORK__Bytes
  manager_gte: NETWORK__Bytes
  manager_lte: NETWORK__Bytes
  manager_in: [NETWORK__Bytes!]
  manager_not_in: [NETWORK__Bytes!]
  manager_contains: NETWORK__Bytes
  manager_not_contains: NETWORK__Bytes
  initHash: NETWORK__Bytes
  initHash_not: NETWORK__Bytes
  initHash_gt: NETWORK__Bytes
  initHash_lt: NETWORK__Bytes
  initHash_gte: NETWORK__Bytes
  initHash_lte: NETWORK__Bytes
  initHash_in: [NETWORK__Bytes!]
  initHash_not_in: [NETWORK__Bytes!]
  initHash_contains: NETWORK__Bytes
  initHash_not_contains: NETWORK__Bytes
  beneficiary: NETWORK__Bytes
  beneficiary_not: NETWORK__Bytes
  beneficiary_gt: NETWORK__Bytes
  beneficiary_lt: NETWORK__Bytes
  beneficiary_gte: NETWORK__Bytes
  beneficiary_lte: NETWORK__Bytes
  beneficiary_in: [NETWORK__Bytes!]
  beneficiary_not_in: [NETWORK__Bytes!]
  beneficiary_contains: NETWORK__Bytes
  beneficiary_not_contains: NETWORK__Bytes
  token: NETWORK__Bytes
  token_not: NETWORK__Bytes
  token_gt: NETWORK__Bytes
  token_lt: NETWORK__Bytes
  token_gte: NETWORK__Bytes
  token_lte: NETWORK__Bytes
  token_in: [NETWORK__Bytes!]
  token_not_in: [NETWORK__Bytes!]
  token_contains: NETWORK__Bytes
  token_not_contains: NETWORK__Bytes
  managedAmount: BigInt
  managedAmount_not: BigInt
  managedAmount_gt: BigInt
  managedAmount_lt: BigInt
  managedAmount_gte: BigInt
  managedAmount_lte: BigInt
  managedAmount_in: [BigInt!]
  managedAmount_not_in: [BigInt!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  periods: BigInt
  periods_not: BigInt
  periods_gt: BigInt
  periods_lt: BigInt
  periods_gte: BigInt
  periods_lte: BigInt
  periods_in: [BigInt!]
  periods_not_in: [BigInt!]
  releaseStartTime: BigInt
  releaseStartTime_not: BigInt
  releaseStartTime_gt: BigInt
  releaseStartTime_lt: BigInt
  releaseStartTime_gte: BigInt
  releaseStartTime_lte: BigInt
  releaseStartTime_in: [BigInt!]
  releaseStartTime_not_in: [BigInt!]
  vestingCliffTime: BigInt
  vestingCliffTime_not: BigInt
  vestingCliffTime_gt: BigInt
  vestingCliffTime_lt: BigInt
  vestingCliffTime_gte: BigInt
  vestingCliffTime_lte: BigInt
  vestingCliffTime_in: [BigInt!]
  vestingCliffTime_not_in: [BigInt!]
  revocable: NETWORK__Revocability
  revocable_not: NETWORK__Revocability
  revocable_in: [NETWORK__Revocability!]
  revocable_not_in: [NETWORK__Revocability!]
  tokenDestinationsApproved: Boolean
  tokenDestinationsApproved_not: Boolean
  tokenDestinationsApproved_in: [Boolean!]
  tokenDestinationsApproved_not_in: [Boolean!]
  tokensReleased: BigInt
  tokensReleased_not: BigInt
  tokensReleased_gt: BigInt
  tokensReleased_lt: BigInt
  tokensReleased_gte: BigInt
  tokensReleased_lte: BigInt
  tokensReleased_in: [BigInt!]
  tokensReleased_not_in: [BigInt!]
  tokensWithdrawn: BigInt
  tokensWithdrawn_not: BigInt
  tokensWithdrawn_gt: BigInt
  tokensWithdrawn_lt: BigInt
  tokensWithdrawn_gte: BigInt
  tokensWithdrawn_lte: BigInt
  tokensWithdrawn_in: [BigInt!]
  tokensWithdrawn_not_in: [BigInt!]
  tokensRevoked: BigInt
  tokensRevoked_not: BigInt
  tokensRevoked_gt: BigInt
  tokensRevoked_lt: BigInt
  tokensRevoked_gte: BigInt
  tokensRevoked_lte: BigInt
  tokensRevoked_in: [BigInt!]
  tokensRevoked_not_in: [BigInt!]
  blockNumberCreated: BigInt
  blockNumberCreated_not: BigInt
  blockNumberCreated_gt: BigInt
  blockNumberCreated_lt: BigInt
  blockNumberCreated_gte: BigInt
  blockNumberCreated_lte: BigInt
  blockNumberCreated_in: [BigInt!]
  blockNumberCreated_not_in: [BigInt!]
  txHash: NETWORK__Bytes
  txHash_not: NETWORK__Bytes
  txHash_gt: NETWORK__Bytes
  txHash_lt: NETWORK__Bytes
  txHash_gte: NETWORK__Bytes
  txHash_lte: NETWORK__Bytes
  txHash_in: [NETWORK__Bytes!]
  txHash_not_in: [NETWORK__Bytes!]
  txHash_contains: NETWORK__Bytes
  txHash_not_contains: NETWORK__Bytes
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__TokenLockWallet_orderBy {
  id
  manager
  initHash
  beneficiary
  token
  managedAmount
  startTime
  endTime
  periods
  releaseStartTime
  vestingCliffTime
  revocable
  tokenDestinationsApproved
  tokensReleased
  tokensWithdrawn
  tokensRevoked
  blockNumberCreated
  txHash
}

"""
The Token manager data

"""
type NETWORK__TokenManager {
  """Token manager address"""
  id: ID!
  """Master copy address"""
  masterCopy: NETWORK__Bytes!
  """Tokens stored in manger through deposit or withdraw"""
  tokens: BigInt!
  """List of addresses that are allowed to pull funds"""
  tokenDestinations: [NETWORK__Bytes!]
  """List of function call authorizations"""
  authorizedFunctions(skip: Int = 0, first: Int = 100, orderBy: NETWORK__AuthorizedFunction_orderBy, orderDirection: NETWORK__OrderDirection, where: NETWORK__AuthorizedFunction_filter): [NETWORK__AuthorizedFunction!]
  """Token lock count of contracts created"""
  tokenLockCount: BigInt!
}

input NETWORK__TokenManager_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  masterCopy: NETWORK__Bytes
  masterCopy_not: NETWORK__Bytes
  masterCopy_gt: NETWORK__Bytes
  masterCopy_lt: NETWORK__Bytes
  masterCopy_gte: NETWORK__Bytes
  masterCopy_lte: NETWORK__Bytes
  masterCopy_in: [NETWORK__Bytes!]
  masterCopy_not_in: [NETWORK__Bytes!]
  masterCopy_contains: NETWORK__Bytes
  masterCopy_not_contains: NETWORK__Bytes
  tokens: BigInt
  tokens_not: BigInt
  tokens_gt: BigInt
  tokens_lt: BigInt
  tokens_gte: BigInt
  tokens_lte: BigInt
  tokens_in: [BigInt!]
  tokens_not_in: [BigInt!]
  tokenDestinations: [NETWORK__Bytes!]
  tokenDestinations_not: [NETWORK__Bytes!]
  tokenDestinations_contains: [NETWORK__Bytes!]
  tokenDestinations_contains_nocase: [NETWORK__Bytes!]
  tokenDestinations_not_contains: [NETWORK__Bytes!]
  tokenDestinations_not_contains_nocase: [NETWORK__Bytes!]
  authorizedFunctions_: NETWORK__AuthorizedFunction_filter
  tokenLockCount: BigInt
  tokenLockCount_not: BigInt
  tokenLockCount_gt: BigInt
  tokenLockCount_lt: BigInt
  tokenLockCount_gte: BigInt
  tokenLockCount_lte: BigInt
  tokenLockCount_in: [BigInt!]
  tokenLockCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__TokenManager_orderBy {
  id
  masterCopy
  tokens
  tokenDestinations
  authorizedFunctions
  tokenLockCount
}

"""
A generic transaction in The Graph Network

"""
interface NETWORK__Transaction {
  """Transaction hash concatenated with event log index"""
  id: ID!
  """Block number for the transaction"""
  blockNumber: Int!
  """Timestamp for the transaction"""
  timestamp: Int!
  """Signer of the transaction"""
  signer: NETWORK__GraphAccount!
  """Type of Graph Network transaction"""
  type: NETWORK__TransactionType!
}

enum NETWORK__TransactionType {
  Stake
  Unstake
  MintSignal
  BurnSignal
  MintNSignal
  BurnNSignal
}

input NETWORK__Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  signer: String
  signer_not: String
  signer_gt: String
  signer_lt: String
  signer_gte: String
  signer_lte: String
  signer_in: [String!]
  signer_not_in: [String!]
  signer_contains: String
  signer_contains_nocase: String
  signer_not_contains: String
  signer_not_contains_nocase: String
  signer_starts_with: String
  signer_starts_with_nocase: String
  signer_not_starts_with: String
  signer_not_starts_with_nocase: String
  signer_ends_with: String
  signer_ends_with_nocase: String
  signer_not_ends_with: String
  signer_not_ends_with_nocase: String
  signer_: NETWORK__GraphAccount_filter
  type: NETWORK__TransactionType
  type_not: NETWORK__TransactionType
  type_in: [NETWORK__TransactionType!]
  type_not_in: [NETWORK__TransactionType!]
  """Filter for the block changed event."""
  _change_block: NETWORK__BlockChangedFilter
}

enum NETWORK__Transaction_orderBy {
  id
  blockNumber
  timestamp
  signer
  type
}

type NETWORK___Block_ {
  """The hash of the block"""
  hash: NETWORK__Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type NETWORK___Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: NETWORK___Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum NETWORK___SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { PubSub } from '@graphql-mesh/utils';
import { DefaultLogger } from '@graphql-mesh/utils';
import MeshCache from "@graphql-mesh/cache-localforage";
import { fetch as fetchFn } from '@whatwg-node/fetch';

import { MeshResolvedSource } from '@graphql-mesh/runtime';
import { MeshTransform, MeshPlugin } from '@graphql-mesh/types';
import GraphqlHandler from "@graphql-mesh/graphql"
import PrefixTransform from "@graphql-mesh/transform-prefix";
import StitchingMerger from "@graphql-mesh/merger-stitching";
import { createMeshHTTPHandler, MeshHTTPHandler } from '@graphql-mesh/http';
import { getMesh, ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';
import { ImportFn } from '@graphql-mesh/types';
import type { BillingTypes } from './sources/Billing/types';
import type { EnsTypes } from './sources/ENS/types';
import type { AnalyticsTypes } from './sources/Analytics/types';
import type { NetworkTypes } from './sources/Network/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };



/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BILLING__BigDecimal: any;
  BigInt: any;
  BILLING__Bytes: any;
  ENS__BigDecimal: any;
  ENS__Bytes: any;
  ANALYTICS__BigDecimal: any;
  ANALYTICS__Bytes: any;
  NETWORK__BigDecimal: any;
  NETWORK__Bytes: any;
};

export type Query = {
  BILLING__billing?: Maybe<BILLING__Billing>;
  BILLING__billings: Array<BILLING__Billing>;
  BILLING__user?: Maybe<BILLING__User>;
  BILLING__users: Array<BILLING__User>;
  BILLING__tokensAdded?: Maybe<BILLING__TokensAdded>;
  BILLING__tokensAddeds: Array<BILLING__TokensAdded>;
  BILLING__tokensRemoved?: Maybe<BILLING__TokensRemoved>;
  BILLING__tokensRemoveds: Array<BILLING__TokensRemoved>;
  BILLING__tokensPulled?: Maybe<BILLING__TokensPulled>;
  BILLING__tokensPulleds: Array<BILLING__TokensPulled>;
  BILLING__billingDailyData?: Maybe<BILLING__BillingDailyData>;
  BILLING__billingDailyDatas: Array<BILLING__BillingDailyData>;
  BILLING__userDailyData?: Maybe<BILLING__UserDailyData>;
  BILLING__userDailyDatas: Array<BILLING__UserDailyData>;
  BILLING__transaction?: Maybe<BILLING__Transaction>;
  BILLING__transactions: Array<BILLING__Transaction>;
  /** Access to subgraph metadata */
  BILLING___meta?: Maybe<BILLING___Meta_>;
  ENS__domain?: Maybe<ENS__Domain>;
  ENS__domains: Array<ENS__Domain>;
  ENS__transfer?: Maybe<ENS__Transfer>;
  ENS__transfers: Array<ENS__Transfer>;
  ENS__newOwner?: Maybe<ENS__NewOwner>;
  ENS__newOwners: Array<ENS__NewOwner>;
  ENS__newResolver?: Maybe<ENS__NewResolver>;
  ENS__newResolvers: Array<ENS__NewResolver>;
  ENS__newTTL?: Maybe<ENS__NewTTL>;
  ENS__newTTLs: Array<ENS__NewTTL>;
  ENS__account?: Maybe<ENS__Account>;
  ENS__accounts: Array<ENS__Account>;
  ENS__registration?: Maybe<ENS__Registration>;
  ENS__registrations: Array<ENS__Registration>;
  ENS__nameRegistered?: Maybe<ENS__NameRegistered>;
  ENS__nameRegistereds: Array<ENS__NameRegistered>;
  ENS__nameRenewed?: Maybe<ENS__NameRenewed>;
  ENS__nameReneweds: Array<ENS__NameRenewed>;
  ENS__nameTransferred?: Maybe<ENS__NameTransferred>;
  ENS__nameTransferreds: Array<ENS__NameTransferred>;
  ENS__resolver?: Maybe<ENS__Resolver>;
  ENS__resolvers: Array<ENS__Resolver>;
  ENS__addrChanged?: Maybe<ENS__AddrChanged>;
  ENS__addrChangeds: Array<ENS__AddrChanged>;
  ENS__multicoinAddrChanged?: Maybe<ENS__MulticoinAddrChanged>;
  ENS__multicoinAddrChangeds: Array<ENS__MulticoinAddrChanged>;
  ENS__nameChanged?: Maybe<ENS__NameChanged>;
  ENS__nameChangeds: Array<ENS__NameChanged>;
  ENS__abiChanged?: Maybe<ENS__AbiChanged>;
  ENS__abiChangeds: Array<ENS__AbiChanged>;
  ENS__pubkeyChanged?: Maybe<ENS__PubkeyChanged>;
  ENS__pubkeyChangeds: Array<ENS__PubkeyChanged>;
  ENS__textChanged?: Maybe<ENS__TextChanged>;
  ENS__textChangeds: Array<ENS__TextChanged>;
  ENS__contenthashChanged?: Maybe<ENS__ContenthashChanged>;
  ENS__contenthashChangeds: Array<ENS__ContenthashChanged>;
  ENS__interfaceChanged?: Maybe<ENS__InterfaceChanged>;
  ENS__interfaceChangeds: Array<ENS__InterfaceChanged>;
  ENS__authorisationChanged?: Maybe<ENS__AuthorisationChanged>;
  ENS__authorisationChangeds: Array<ENS__AuthorisationChanged>;
  ENS__domainEvent?: Maybe<ENS__DomainEvent>;
  ENS__domainEvents: Array<ENS__DomainEvent>;
  ENS__registrationEvent?: Maybe<ENS__RegistrationEvent>;
  ENS__registrationEvents: Array<ENS__RegistrationEvent>;
  ENS__resolverEvent?: Maybe<ENS__ResolverEvent>;
  ENS__resolverEvents: Array<ENS__ResolverEvent>;
  /** Access to subgraph metadata */
  ENS___meta?: Maybe<ENS___Meta_>;
  ANALYTICS__graphNetwork?: Maybe<ANALYTICS__GraphNetwork>;
  ANALYTICS__graphNetworks: Array<ANALYTICS__GraphNetwork>;
  ANALYTICS__graphAccount?: Maybe<ANALYTICS__GraphAccount>;
  ANALYTICS__graphAccounts: Array<ANALYTICS__GraphAccount>;
  ANALYTICS__graphAccountName?: Maybe<ANALYTICS__GraphAccountName>;
  ANALYTICS__graphAccountNames: Array<ANALYTICS__GraphAccountName>;
  ANALYTICS__subgraph?: Maybe<ANALYTICS__Subgraph>;
  ANALYTICS__subgraphs: Array<ANALYTICS__Subgraph>;
  ANALYTICS__subgraphVersion?: Maybe<ANALYTICS__SubgraphVersion>;
  ANALYTICS__subgraphVersions: Array<ANALYTICS__SubgraphVersion>;
  ANALYTICS__subgraphDeployment?: Maybe<ANALYTICS__SubgraphDeployment>;
  ANALYTICS__subgraphDeployments: Array<ANALYTICS__SubgraphDeployment>;
  ANALYTICS__indexer?: Maybe<ANALYTICS__Indexer>;
  ANALYTICS__indexers: Array<ANALYTICS__Indexer>;
  ANALYTICS__allocation?: Maybe<ANALYTICS__Allocation>;
  ANALYTICS__allocations: Array<ANALYTICS__Allocation>;
  ANALYTICS__pool?: Maybe<ANALYTICS__Pool>;
  ANALYTICS__pools: Array<ANALYTICS__Pool>;
  ANALYTICS__delegator?: Maybe<ANALYTICS__Delegator>;
  ANALYTICS__delegators: Array<ANALYTICS__Delegator>;
  ANALYTICS__delegatedStake?: Maybe<ANALYTICS__DelegatedStake>;
  ANALYTICS__delegatedStakes: Array<ANALYTICS__DelegatedStake>;
  ANALYTICS__curator?: Maybe<ANALYTICS__Curator>;
  ANALYTICS__curators: Array<ANALYTICS__Curator>;
  ANALYTICS__signal?: Maybe<ANALYTICS__Signal>;
  ANALYTICS__signals: Array<ANALYTICS__Signal>;
  ANALYTICS__nameSignal?: Maybe<ANALYTICS__NameSignal>;
  ANALYTICS__nameSignals: Array<ANALYTICS__NameSignal>;
  ANALYTICS__nameSignalTransaction?: Maybe<ANALYTICS__NameSignalTransaction>;
  ANALYTICS__nameSignalTransactions: Array<ANALYTICS__NameSignalTransaction>;
  ANALYTICS__signalTransaction?: Maybe<ANALYTICS__SignalTransaction>;
  ANALYTICS__signalTransactions: Array<ANALYTICS__SignalTransaction>;
  ANALYTICS__indexerDelegatedStakeRelation?: Maybe<ANALYTICS__IndexerDelegatedStakeRelation>;
  ANALYTICS__indexerDelegatedStakeRelations: Array<ANALYTICS__IndexerDelegatedStakeRelation>;
  ANALYTICS__indexerDailyData?: Maybe<ANALYTICS__IndexerDailyData>;
  ANALYTICS__indexerDailyDatas: Array<ANALYTICS__IndexerDailyData>;
  ANALYTICS__delegatorDailyData?: Maybe<ANALYTICS__DelegatorDailyData>;
  ANALYTICS__delegatorDailyDatas: Array<ANALYTICS__DelegatorDailyData>;
  ANALYTICS__delegatedStakeDailyData?: Maybe<ANALYTICS__DelegatedStakeDailyData>;
  ANALYTICS__delegatedStakeDailyDatas: Array<ANALYTICS__DelegatedStakeDailyData>;
  ANALYTICS__delegatorDelegatedStakeDailyRelation?: Maybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation>;
  ANALYTICS__delegatorDelegatedStakeDailyRelations: Array<ANALYTICS__DelegatorDelegatedStakeDailyRelation>;
  ANALYTICS__subgraphDeploymentDailyData?: Maybe<ANALYTICS__SubgraphDeploymentDailyData>;
  ANALYTICS__subgraphDeploymentDailyDatas: Array<ANALYTICS__SubgraphDeploymentDailyData>;
  ANALYTICS__graphNetworkDailyData?: Maybe<ANALYTICS__GraphNetworkDailyData>;
  ANALYTICS__graphNetworkDailyDatas: Array<ANALYTICS__GraphNetworkDailyData>;
  ANALYTICS__transaction?: Maybe<ANALYTICS__Transaction>;
  ANALYTICS__transactions: Array<ANALYTICS__Transaction>;
  ANALYTICS__delegatorSearch: Array<ANALYTICS__Delegator>;
  /** Access to subgraph metadata */
  ANALYTICS___meta?: Maybe<ANALYTICS___Meta_>;
  NETWORK__graphNetwork?: Maybe<NETWORK__GraphNetwork>;
  NETWORK__graphNetworks: Array<NETWORK__GraphNetwork>;
  NETWORK__graphAccount?: Maybe<NETWORK__GraphAccount>;
  NETWORK__graphAccounts: Array<NETWORK__GraphAccount>;
  NETWORK__graphAccountName?: Maybe<NETWORK__GraphAccountName>;
  NETWORK__graphAccountNames: Array<NETWORK__GraphAccountName>;
  NETWORK__subgraph?: Maybe<NETWORK__Subgraph>;
  NETWORK__subgraphs: Array<NETWORK__Subgraph>;
  NETWORK__currentSubgraphDeploymentRelation?: Maybe<NETWORK__CurrentSubgraphDeploymentRelation>;
  NETWORK__currentSubgraphDeploymentRelations: Array<NETWORK__CurrentSubgraphDeploymentRelation>;
  NETWORK__network?: Maybe<NETWORK__Network>;
  NETWORK__networks: Array<NETWORK__Network>;
  NETWORK__subgraphCategoryRelation?: Maybe<NETWORK__SubgraphCategoryRelation>;
  NETWORK__subgraphCategoryRelations: Array<NETWORK__SubgraphCategoryRelation>;
  NETWORK__subgraphCategory?: Maybe<NETWORK__SubgraphCategory>;
  NETWORK__subgraphCategories: Array<NETWORK__SubgraphCategory>;
  NETWORK__subgraphVersion?: Maybe<NETWORK__SubgraphVersion>;
  NETWORK__subgraphVersions: Array<NETWORK__SubgraphVersion>;
  NETWORK__subgraphDeployment?: Maybe<NETWORK__SubgraphDeployment>;
  NETWORK__subgraphDeployments: Array<NETWORK__SubgraphDeployment>;
  NETWORK__indexer?: Maybe<NETWORK__Indexer>;
  NETWORK__indexers: Array<NETWORK__Indexer>;
  NETWORK__allocation?: Maybe<NETWORK__Allocation>;
  NETWORK__allocations: Array<NETWORK__Allocation>;
  NETWORK__pool?: Maybe<NETWORK__Pool>;
  NETWORK__pools: Array<NETWORK__Pool>;
  NETWORK__delegator?: Maybe<NETWORK__Delegator>;
  NETWORK__delegators: Array<NETWORK__Delegator>;
  NETWORK__delegatedStake?: Maybe<NETWORK__DelegatedStake>;
  NETWORK__delegatedStakes: Array<NETWORK__DelegatedStake>;
  NETWORK__curator?: Maybe<NETWORK__Curator>;
  NETWORK__curators: Array<NETWORK__Curator>;
  NETWORK__signal?: Maybe<NETWORK__Signal>;
  NETWORK__signals: Array<NETWORK__Signal>;
  NETWORK__nameSignal?: Maybe<NETWORK__NameSignal>;
  NETWORK__nameSignals: Array<NETWORK__NameSignal>;
  NETWORK__nameSignalSubgraphRelation?: Maybe<NETWORK__NameSignalSubgraphRelation>;
  NETWORK__nameSignalSubgraphRelations: Array<NETWORK__NameSignalSubgraphRelation>;
  NETWORK__dispute?: Maybe<NETWORK__Dispute>;
  NETWORK__disputes: Array<NETWORK__Dispute>;
  NETWORK__attestation?: Maybe<NETWORK__Attestation>;
  NETWORK__attestations: Array<NETWORK__Attestation>;
  NETWORK__epoch?: Maybe<NETWORK__Epoch>;
  NETWORK__epoches: Array<NETWORK__Epoch>;
  NETWORK__nameSignalTransaction?: Maybe<NETWORK__NameSignalTransaction>;
  NETWORK__nameSignalTransactions: Array<NETWORK__NameSignalTransaction>;
  NETWORK__signalTransaction?: Maybe<NETWORK__SignalTransaction>;
  NETWORK__signalTransactions: Array<NETWORK__SignalTransaction>;
  NETWORK__tokenManager?: Maybe<NETWORK__TokenManager>;
  NETWORK__tokenManagers: Array<NETWORK__TokenManager>;
  NETWORK__authorizedFunction?: Maybe<NETWORK__AuthorizedFunction>;
  NETWORK__authorizedFunctions: Array<NETWORK__AuthorizedFunction>;
  NETWORK__tokenLockWallet?: Maybe<NETWORK__TokenLockWallet>;
  NETWORK__tokenLockWallets: Array<NETWORK__TokenLockWallet>;
  NETWORK__transaction?: Maybe<NETWORK__Transaction>;
  NETWORK__transactions: Array<NETWORK__Transaction>;
  NETWORK__subgraphSearch: Array<NETWORK__Subgraph>;
  NETWORK__curatorSearch: Array<NETWORK__Curator>;
  NETWORK__delegatorSearch: Array<NETWORK__Delegator>;
  /** Access to subgraph metadata */
  NETWORK___meta?: Maybe<NETWORK___Meta_>;
};


export type QueryBILLING__billingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__billingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__Billing_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__Billing_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__User_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__User_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensAddedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensAddedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensAdded_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensAdded_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensRemovedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensRemovedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensRemoved_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensRemoved_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensPulledArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__tokensPulledsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensPulled_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensPulled_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__billingDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__billingDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__BillingDailyData_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__BillingDailyData_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__userDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__userDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__UserDailyData_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__UserDailyData_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__Transaction_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__Transaction_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type QueryBILLING___metaArgs = {
  block?: InputMaybe<BILLING__Block_height>;
};


export type QueryENS__domainArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__domainsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Domain_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Domain_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__transferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__transfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Transfer_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Transfer_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newOwnerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newOwnersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewOwner_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewOwner_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newResolverArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newResolversArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewResolver_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewResolver_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newTTLArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__newTTLsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewTTL_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewTTL_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__accountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__accountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Account_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Account_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__registrationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__registrationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Registration_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Registration_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameRegisteredArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameRegisteredsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameRegistered_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameRegistered_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameRenewedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameRenewedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameRenewed_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameRenewed_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameTransferredArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameTransferredsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameTransferred_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameTransferred_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__resolverArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__resolversArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Resolver_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Resolver_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__addrChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__addrChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AddrChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AddrChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__multicoinAddrChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__multicoinAddrChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__MulticoinAddrChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__MulticoinAddrChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__nameChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__abiChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__abiChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AbiChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AbiChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__pubkeyChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__pubkeyChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__PubkeyChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__PubkeyChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__textChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__textChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__TextChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__TextChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__contenthashChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__contenthashChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__ContenthashChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__ContenthashChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__interfaceChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__interfaceChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__InterfaceChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__InterfaceChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__authorisationChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__authorisationChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AuthorisationChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AuthorisationChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__domainEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__domainEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__DomainEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__DomainEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__registrationEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__registrationEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__RegistrationEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__RegistrationEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__resolverEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS__resolverEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__ResolverEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__ResolverEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type QueryENS___metaArgs = {
  block?: InputMaybe<ENS__Block_height>;
};


export type QueryANALYTICS__graphNetworkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphNetworksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphNetwork_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphNetwork_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphAccountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphAccountNameArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphAccountNamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccountName_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Subgraph_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Subgraph_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphVersionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphDeploymentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphDeploymentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphDeployment_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Indexer_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Indexer_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__allocationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__allocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__poolArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__poolsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Pool_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Pool_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Delegator_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Delegator_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatedStakeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatedStakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__curatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__curatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Curator_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Curator_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__signalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__signalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Signal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Signal_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__nameSignalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__nameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignal_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__nameSignalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__nameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignalTransaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__signalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__signalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SignalTransaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SignalTransaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexerDelegatedStakeRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexerDelegatedStakeRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__IndexerDelegatedStakeRelation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__IndexerDelegatedStakeRelation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexerDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__indexerDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__IndexerDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__IndexerDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatorDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatorDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatedStakeDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatedStakeDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStakeDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStakeDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorDelegatedStakeDailyRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorDelegatedStakeDailyRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphDeploymentDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__subgraphDeploymentDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphNetworkDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__graphNetworkDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphNetworkDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphNetworkDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Transaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Transaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS__delegatorSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type QueryANALYTICS___metaArgs = {
  block?: InputMaybe<ANALYTICS__Block_height>;
};


export type QueryNETWORK__graphNetworkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__graphNetworksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphNetwork_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphNetwork_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__graphAccountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__graphAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccount_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__graphAccountNameArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__graphAccountNamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccountName_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Subgraph_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Subgraph_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__currentSubgraphDeploymentRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__currentSubgraphDeploymentRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__CurrentSubgraphDeploymentRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__CurrentSubgraphDeploymentRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__networkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__networksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Network_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Network_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphCategoryRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphCategoryRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategoryRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphCategoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphCategoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategory_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategory_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphVersionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphDeploymentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphDeploymentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphDeployment_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__indexerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__indexersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Indexer_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Indexer_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__allocationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__allocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__poolArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__poolsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Pool_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Pool_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__delegatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__delegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Delegator_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Delegator_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__delegatedStakeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__delegatedStakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__DelegatedStake_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__curatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__curatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Curator_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Curator_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__signalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__signalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Signal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Signal_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignal_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalSubgraphRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalSubgraphRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignalSubgraphRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignalSubgraphRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__disputeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__disputesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Dispute_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Dispute_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__attestationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__attestationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Attestation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Attestation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__epochArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__epochesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Epoch_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Epoch_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__nameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignalTransaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__signalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__signalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SignalTransaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SignalTransaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__tokenManagerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__tokenManagersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__TokenManager_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__TokenManager_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__authorizedFunctionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__authorizedFunctionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__AuthorizedFunction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__AuthorizedFunction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__tokenLockWalletArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__tokenLockWalletsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__TokenLockWallet_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__TokenLockWallet_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Transaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Transaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__subgraphSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__curatorSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK__delegatorSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type QueryNETWORK___metaArgs = {
  block?: InputMaybe<NETWORK__Block_height>;
};

export type Subscription = {
  BILLING__billing?: Maybe<BILLING__Billing>;
  BILLING__billings: Array<BILLING__Billing>;
  BILLING__user?: Maybe<BILLING__User>;
  BILLING__users: Array<BILLING__User>;
  BILLING__tokensAdded?: Maybe<BILLING__TokensAdded>;
  BILLING__tokensAddeds: Array<BILLING__TokensAdded>;
  BILLING__tokensRemoved?: Maybe<BILLING__TokensRemoved>;
  BILLING__tokensRemoveds: Array<BILLING__TokensRemoved>;
  BILLING__tokensPulled?: Maybe<BILLING__TokensPulled>;
  BILLING__tokensPulleds: Array<BILLING__TokensPulled>;
  BILLING__billingDailyData?: Maybe<BILLING__BillingDailyData>;
  BILLING__billingDailyDatas: Array<BILLING__BillingDailyData>;
  BILLING__userDailyData?: Maybe<BILLING__UserDailyData>;
  BILLING__userDailyDatas: Array<BILLING__UserDailyData>;
  BILLING__transaction?: Maybe<BILLING__Transaction>;
  BILLING__transactions: Array<BILLING__Transaction>;
  /** Access to subgraph metadata */
  BILLING___meta?: Maybe<BILLING___Meta_>;
  ENS__domain?: Maybe<ENS__Domain>;
  ENS__domains: Array<ENS__Domain>;
  ENS__transfer?: Maybe<ENS__Transfer>;
  ENS__transfers: Array<ENS__Transfer>;
  ENS__newOwner?: Maybe<ENS__NewOwner>;
  ENS__newOwners: Array<ENS__NewOwner>;
  ENS__newResolver?: Maybe<ENS__NewResolver>;
  ENS__newResolvers: Array<ENS__NewResolver>;
  ENS__newTTL?: Maybe<ENS__NewTTL>;
  ENS__newTTLs: Array<ENS__NewTTL>;
  ENS__account?: Maybe<ENS__Account>;
  ENS__accounts: Array<ENS__Account>;
  ENS__registration?: Maybe<ENS__Registration>;
  ENS__registrations: Array<ENS__Registration>;
  ENS__nameRegistered?: Maybe<ENS__NameRegistered>;
  ENS__nameRegistereds: Array<ENS__NameRegistered>;
  ENS__nameRenewed?: Maybe<ENS__NameRenewed>;
  ENS__nameReneweds: Array<ENS__NameRenewed>;
  ENS__nameTransferred?: Maybe<ENS__NameTransferred>;
  ENS__nameTransferreds: Array<ENS__NameTransferred>;
  ENS__resolver?: Maybe<ENS__Resolver>;
  ENS__resolvers: Array<ENS__Resolver>;
  ENS__addrChanged?: Maybe<ENS__AddrChanged>;
  ENS__addrChangeds: Array<ENS__AddrChanged>;
  ENS__multicoinAddrChanged?: Maybe<ENS__MulticoinAddrChanged>;
  ENS__multicoinAddrChangeds: Array<ENS__MulticoinAddrChanged>;
  ENS__nameChanged?: Maybe<ENS__NameChanged>;
  ENS__nameChangeds: Array<ENS__NameChanged>;
  ENS__abiChanged?: Maybe<ENS__AbiChanged>;
  ENS__abiChangeds: Array<ENS__AbiChanged>;
  ENS__pubkeyChanged?: Maybe<ENS__PubkeyChanged>;
  ENS__pubkeyChangeds: Array<ENS__PubkeyChanged>;
  ENS__textChanged?: Maybe<ENS__TextChanged>;
  ENS__textChangeds: Array<ENS__TextChanged>;
  ENS__contenthashChanged?: Maybe<ENS__ContenthashChanged>;
  ENS__contenthashChangeds: Array<ENS__ContenthashChanged>;
  ENS__interfaceChanged?: Maybe<ENS__InterfaceChanged>;
  ENS__interfaceChangeds: Array<ENS__InterfaceChanged>;
  ENS__authorisationChanged?: Maybe<ENS__AuthorisationChanged>;
  ENS__authorisationChangeds: Array<ENS__AuthorisationChanged>;
  ENS__domainEvent?: Maybe<ENS__DomainEvent>;
  ENS__domainEvents: Array<ENS__DomainEvent>;
  ENS__registrationEvent?: Maybe<ENS__RegistrationEvent>;
  ENS__registrationEvents: Array<ENS__RegistrationEvent>;
  ENS__resolverEvent?: Maybe<ENS__ResolverEvent>;
  ENS__resolverEvents: Array<ENS__ResolverEvent>;
  /** Access to subgraph metadata */
  ENS___meta?: Maybe<ENS___Meta_>;
  ANALYTICS__graphNetwork?: Maybe<ANALYTICS__GraphNetwork>;
  ANALYTICS__graphNetworks: Array<ANALYTICS__GraphNetwork>;
  ANALYTICS__graphAccount?: Maybe<ANALYTICS__GraphAccount>;
  ANALYTICS__graphAccounts: Array<ANALYTICS__GraphAccount>;
  ANALYTICS__graphAccountName?: Maybe<ANALYTICS__GraphAccountName>;
  ANALYTICS__graphAccountNames: Array<ANALYTICS__GraphAccountName>;
  ANALYTICS__subgraph?: Maybe<ANALYTICS__Subgraph>;
  ANALYTICS__subgraphs: Array<ANALYTICS__Subgraph>;
  ANALYTICS__subgraphVersion?: Maybe<ANALYTICS__SubgraphVersion>;
  ANALYTICS__subgraphVersions: Array<ANALYTICS__SubgraphVersion>;
  ANALYTICS__subgraphDeployment?: Maybe<ANALYTICS__SubgraphDeployment>;
  ANALYTICS__subgraphDeployments: Array<ANALYTICS__SubgraphDeployment>;
  ANALYTICS__indexer?: Maybe<ANALYTICS__Indexer>;
  ANALYTICS__indexers: Array<ANALYTICS__Indexer>;
  ANALYTICS__allocation?: Maybe<ANALYTICS__Allocation>;
  ANALYTICS__allocations: Array<ANALYTICS__Allocation>;
  ANALYTICS__pool?: Maybe<ANALYTICS__Pool>;
  ANALYTICS__pools: Array<ANALYTICS__Pool>;
  ANALYTICS__delegator?: Maybe<ANALYTICS__Delegator>;
  ANALYTICS__delegators: Array<ANALYTICS__Delegator>;
  ANALYTICS__delegatedStake?: Maybe<ANALYTICS__DelegatedStake>;
  ANALYTICS__delegatedStakes: Array<ANALYTICS__DelegatedStake>;
  ANALYTICS__curator?: Maybe<ANALYTICS__Curator>;
  ANALYTICS__curators: Array<ANALYTICS__Curator>;
  ANALYTICS__signal?: Maybe<ANALYTICS__Signal>;
  ANALYTICS__signals: Array<ANALYTICS__Signal>;
  ANALYTICS__nameSignal?: Maybe<ANALYTICS__NameSignal>;
  ANALYTICS__nameSignals: Array<ANALYTICS__NameSignal>;
  ANALYTICS__nameSignalTransaction?: Maybe<ANALYTICS__NameSignalTransaction>;
  ANALYTICS__nameSignalTransactions: Array<ANALYTICS__NameSignalTransaction>;
  ANALYTICS__signalTransaction?: Maybe<ANALYTICS__SignalTransaction>;
  ANALYTICS__signalTransactions: Array<ANALYTICS__SignalTransaction>;
  ANALYTICS__indexerDelegatedStakeRelation?: Maybe<ANALYTICS__IndexerDelegatedStakeRelation>;
  ANALYTICS__indexerDelegatedStakeRelations: Array<ANALYTICS__IndexerDelegatedStakeRelation>;
  ANALYTICS__indexerDailyData?: Maybe<ANALYTICS__IndexerDailyData>;
  ANALYTICS__indexerDailyDatas: Array<ANALYTICS__IndexerDailyData>;
  ANALYTICS__delegatorDailyData?: Maybe<ANALYTICS__DelegatorDailyData>;
  ANALYTICS__delegatorDailyDatas: Array<ANALYTICS__DelegatorDailyData>;
  ANALYTICS__delegatedStakeDailyData?: Maybe<ANALYTICS__DelegatedStakeDailyData>;
  ANALYTICS__delegatedStakeDailyDatas: Array<ANALYTICS__DelegatedStakeDailyData>;
  ANALYTICS__delegatorDelegatedStakeDailyRelation?: Maybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation>;
  ANALYTICS__delegatorDelegatedStakeDailyRelations: Array<ANALYTICS__DelegatorDelegatedStakeDailyRelation>;
  ANALYTICS__subgraphDeploymentDailyData?: Maybe<ANALYTICS__SubgraphDeploymentDailyData>;
  ANALYTICS__subgraphDeploymentDailyDatas: Array<ANALYTICS__SubgraphDeploymentDailyData>;
  ANALYTICS__graphNetworkDailyData?: Maybe<ANALYTICS__GraphNetworkDailyData>;
  ANALYTICS__graphNetworkDailyDatas: Array<ANALYTICS__GraphNetworkDailyData>;
  ANALYTICS__transaction?: Maybe<ANALYTICS__Transaction>;
  ANALYTICS__transactions: Array<ANALYTICS__Transaction>;
  /** Access to subgraph metadata */
  ANALYTICS___meta?: Maybe<ANALYTICS___Meta_>;
  NETWORK__graphNetwork?: Maybe<NETWORK__GraphNetwork>;
  NETWORK__graphNetworks: Array<NETWORK__GraphNetwork>;
  NETWORK__graphAccount?: Maybe<NETWORK__GraphAccount>;
  NETWORK__graphAccounts: Array<NETWORK__GraphAccount>;
  NETWORK__graphAccountName?: Maybe<NETWORK__GraphAccountName>;
  NETWORK__graphAccountNames: Array<NETWORK__GraphAccountName>;
  NETWORK__subgraph?: Maybe<NETWORK__Subgraph>;
  NETWORK__subgraphs: Array<NETWORK__Subgraph>;
  NETWORK__currentSubgraphDeploymentRelation?: Maybe<NETWORK__CurrentSubgraphDeploymentRelation>;
  NETWORK__currentSubgraphDeploymentRelations: Array<NETWORK__CurrentSubgraphDeploymentRelation>;
  NETWORK__network?: Maybe<NETWORK__Network>;
  NETWORK__networks: Array<NETWORK__Network>;
  NETWORK__subgraphCategoryRelation?: Maybe<NETWORK__SubgraphCategoryRelation>;
  NETWORK__subgraphCategoryRelations: Array<NETWORK__SubgraphCategoryRelation>;
  NETWORK__subgraphCategory?: Maybe<NETWORK__SubgraphCategory>;
  NETWORK__subgraphCategories: Array<NETWORK__SubgraphCategory>;
  NETWORK__subgraphVersion?: Maybe<NETWORK__SubgraphVersion>;
  NETWORK__subgraphVersions: Array<NETWORK__SubgraphVersion>;
  NETWORK__subgraphDeployment?: Maybe<NETWORK__SubgraphDeployment>;
  NETWORK__subgraphDeployments: Array<NETWORK__SubgraphDeployment>;
  NETWORK__indexer?: Maybe<NETWORK__Indexer>;
  NETWORK__indexers: Array<NETWORK__Indexer>;
  NETWORK__allocation?: Maybe<NETWORK__Allocation>;
  NETWORK__allocations: Array<NETWORK__Allocation>;
  NETWORK__pool?: Maybe<NETWORK__Pool>;
  NETWORK__pools: Array<NETWORK__Pool>;
  NETWORK__delegator?: Maybe<NETWORK__Delegator>;
  NETWORK__delegators: Array<NETWORK__Delegator>;
  NETWORK__delegatedStake?: Maybe<NETWORK__DelegatedStake>;
  NETWORK__delegatedStakes: Array<NETWORK__DelegatedStake>;
  NETWORK__curator?: Maybe<NETWORK__Curator>;
  NETWORK__curators: Array<NETWORK__Curator>;
  NETWORK__signal?: Maybe<NETWORK__Signal>;
  NETWORK__signals: Array<NETWORK__Signal>;
  NETWORK__nameSignal?: Maybe<NETWORK__NameSignal>;
  NETWORK__nameSignals: Array<NETWORK__NameSignal>;
  NETWORK__nameSignalSubgraphRelation?: Maybe<NETWORK__NameSignalSubgraphRelation>;
  NETWORK__nameSignalSubgraphRelations: Array<NETWORK__NameSignalSubgraphRelation>;
  NETWORK__dispute?: Maybe<NETWORK__Dispute>;
  NETWORK__disputes: Array<NETWORK__Dispute>;
  NETWORK__attestation?: Maybe<NETWORK__Attestation>;
  NETWORK__attestations: Array<NETWORK__Attestation>;
  NETWORK__epoch?: Maybe<NETWORK__Epoch>;
  NETWORK__epoches: Array<NETWORK__Epoch>;
  NETWORK__nameSignalTransaction?: Maybe<NETWORK__NameSignalTransaction>;
  NETWORK__nameSignalTransactions: Array<NETWORK__NameSignalTransaction>;
  NETWORK__signalTransaction?: Maybe<NETWORK__SignalTransaction>;
  NETWORK__signalTransactions: Array<NETWORK__SignalTransaction>;
  NETWORK__tokenManager?: Maybe<NETWORK__TokenManager>;
  NETWORK__tokenManagers: Array<NETWORK__TokenManager>;
  NETWORK__authorizedFunction?: Maybe<NETWORK__AuthorizedFunction>;
  NETWORK__authorizedFunctions: Array<NETWORK__AuthorizedFunction>;
  NETWORK__tokenLockWallet?: Maybe<NETWORK__TokenLockWallet>;
  NETWORK__tokenLockWallets: Array<NETWORK__TokenLockWallet>;
  NETWORK__transaction?: Maybe<NETWORK__Transaction>;
  NETWORK__transactions: Array<NETWORK__Transaction>;
  /** Access to subgraph metadata */
  NETWORK___meta?: Maybe<NETWORK___Meta_>;
};


export type SubscriptionBILLING__billingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__billingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__Billing_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__Billing_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__User_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__User_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensAddedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensAddedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensAdded_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensAdded_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensRemovedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensRemovedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensRemoved_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensRemoved_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensPulledArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__tokensPulledsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__TokensPulled_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__TokensPulled_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__billingDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__billingDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__BillingDailyData_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__BillingDailyData_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__userDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__userDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__UserDailyData_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__UserDailyData_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__Transaction_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__Transaction_filter>;
  block?: InputMaybe<BILLING__Block_height>;
  subgraphError?: BILLING___SubgraphErrorPolicy_;
};


export type SubscriptionBILLING___metaArgs = {
  block?: InputMaybe<BILLING__Block_height>;
};


export type SubscriptionENS__domainArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__domainsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Domain_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Domain_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__transferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__transfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Transfer_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Transfer_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newOwnerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newOwnersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewOwner_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewOwner_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newResolverArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newResolversArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewResolver_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewResolver_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newTTLArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__newTTLsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NewTTL_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NewTTL_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__accountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__accountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Account_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Account_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__registrationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__registrationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Registration_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Registration_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameRegisteredArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameRegisteredsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameRegistered_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameRegistered_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameRenewedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameRenewedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameRenewed_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameRenewed_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameTransferredArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameTransferredsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameTransferred_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameTransferred_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__resolverArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__resolversArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Resolver_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Resolver_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__addrChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__addrChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AddrChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AddrChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__multicoinAddrChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__multicoinAddrChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__MulticoinAddrChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__MulticoinAddrChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__nameChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__NameChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__NameChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__abiChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__abiChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AbiChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AbiChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__pubkeyChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__pubkeyChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__PubkeyChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__PubkeyChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__textChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__textChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__TextChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__TextChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__contenthashChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__contenthashChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__ContenthashChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__ContenthashChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__interfaceChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__interfaceChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__InterfaceChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__InterfaceChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__authorisationChangedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__authorisationChangedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__AuthorisationChanged_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__AuthorisationChanged_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__domainEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__domainEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__DomainEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__DomainEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__registrationEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__registrationEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__RegistrationEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__RegistrationEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__resolverEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS__resolverEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__ResolverEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__ResolverEvent_filter>;
  block?: InputMaybe<ENS__Block_height>;
  subgraphError?: ENS___SubgraphErrorPolicy_;
};


export type SubscriptionENS___metaArgs = {
  block?: InputMaybe<ENS__Block_height>;
};


export type SubscriptionANALYTICS__graphNetworkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphNetworksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphNetwork_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphNetwork_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphAccountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphAccountNameArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphAccountNamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccountName_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Subgraph_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Subgraph_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphVersionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphDeploymentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphDeploymentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphDeployment_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Indexer_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Indexer_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__allocationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__allocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__poolArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__poolsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Pool_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Pool_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Delegator_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Delegator_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatedStakeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatedStakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__curatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__curatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Curator_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Curator_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__signalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__signalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Signal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Signal_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__nameSignalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__nameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignal_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__nameSignalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__nameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignalTransaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__signalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__signalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SignalTransaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SignalTransaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexerDelegatedStakeRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexerDelegatedStakeRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__IndexerDelegatedStakeRelation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__IndexerDelegatedStakeRelation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexerDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__indexerDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__IndexerDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__IndexerDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatorDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatorDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatedStakeDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatedStakeDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStakeDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStakeDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorDelegatedStakeDailyRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__delegatorDelegatedStakeDailyRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphDeploymentDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__subgraphDeploymentDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphNetworkDailyDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__graphNetworkDailyDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphNetworkDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphNetworkDailyData_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Transaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Transaction_filter>;
  block?: InputMaybe<ANALYTICS__Block_height>;
  subgraphError?: ANALYTICS___SubgraphErrorPolicy_;
};


export type SubscriptionANALYTICS___metaArgs = {
  block?: InputMaybe<ANALYTICS__Block_height>;
};


export type SubscriptionNETWORK__graphNetworkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__graphNetworksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphNetwork_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphNetwork_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__graphAccountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__graphAccountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccount_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__graphAccountNameArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__graphAccountNamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccountName_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Subgraph_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Subgraph_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__currentSubgraphDeploymentRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__currentSubgraphDeploymentRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__CurrentSubgraphDeploymentRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__CurrentSubgraphDeploymentRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__networkArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__networksArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Network_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Network_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphCategoryRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphCategoryRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategoryRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphCategoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphCategoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategory_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategory_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphVersionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphDeploymentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__subgraphDeploymentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphDeployment_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__indexerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__indexersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Indexer_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Indexer_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__allocationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__allocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__poolArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__poolsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Pool_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Pool_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__delegatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__delegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Delegator_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Delegator_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__delegatedStakeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__delegatedStakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__DelegatedStake_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__curatorArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__curatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Curator_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Curator_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__signalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__signalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Signal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Signal_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignal_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalSubgraphRelationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalSubgraphRelationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignalSubgraphRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignalSubgraphRelation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__disputeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__disputesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Dispute_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Dispute_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__attestationArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__attestationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Attestation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Attestation_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__epochArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__epochesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Epoch_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Epoch_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__nameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignalTransaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__signalTransactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__signalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SignalTransaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SignalTransaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__tokenManagerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__tokenManagersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__TokenManager_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__TokenManager_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__authorizedFunctionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__authorizedFunctionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__AuthorizedFunction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__AuthorizedFunction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__tokenLockWalletArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__tokenLockWalletsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__TokenLockWallet_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__TokenLockWallet_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK__transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Transaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Transaction_filter>;
  block?: InputMaybe<NETWORK__Block_height>;
  subgraphError?: NETWORK___SubgraphErrorPolicy_;
};


export type SubscriptionNETWORK___metaArgs = {
  block?: InputMaybe<NETWORK__Block_height>;
};

/**
 * Billing holds global variables
 *
 */
export type BILLING__Billing = {
  /** Set to 1 */
  id: Scalars['ID'];
  /** Address of the gateway */
  gateway: Scalars['BILLING__Bytes'];
  /** Address of the governor */
  governor: Scalars['BILLING__Bytes'];
  /** [CUMULATIVE] Total amount of tokens added */
  totalTokensAdded: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens pulled */
  totalTokensPulled: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens removed/withdrawn */
  totalTokensRemoved: Scalars['BigInt'];
  /** [CURRENT] Total amount of currently available balance (totalTokensAdded - totalTokensPulled - totalTokensRemoved) */
  totalCurrentBalance: Scalars['BigInt'];
  /** Current BillingDailyData entity created */
  currentDailyDataEntity?: Maybe<BILLING__BillingDailyData>;
  /** Previous BillingDailyData entity created */
  previousDailyDataEntity?: Maybe<BILLING__BillingDailyData>;
};

export type BILLING__BillingDailyData = {
  /** <SUBGRAPH ID>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that the daily data entity tracks */
  entity: BILLING__Billing;
  /** [CUMULATIVE] Total amount of tokens added */
  totalTokensAdded: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens pulled */
  totalTokensPulled: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens removed/withdrawn */
  totalTokensRemoved: Scalars['BigInt'];
  /** [CURRENT] Total amount of currently available balance (totalTokensAdded - totalTokensPulled - totalTokensRemoved) */
  totalCurrentBalance: Scalars['BigInt'];
  /** Address of the gateway */
  gateway: Scalars['BILLING__Bytes'];
  /** Address of the governor */
  governor: Scalars['BILLING__Bytes'];
  /** [DELTA] Chage in total tokens added since the last DailyData point */
  totalTokensAddedDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total tokens pulled since the last DailyData point */
  totalTokensPulledDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total tokens removed/withdrawn since the last DailyData point */
  totalTokensRemovedDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total currently available balance since the last DailyData point */
  totalCurrentBalanceDelta: Scalars['BigInt'];
};

export type BILLING__BillingDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  entity?: InputMaybe<Scalars['String']>;
  entity_not?: InputMaybe<Scalars['String']>;
  entity_gt?: InputMaybe<Scalars['String']>;
  entity_lt?: InputMaybe<Scalars['String']>;
  entity_gte?: InputMaybe<Scalars['String']>;
  entity_lte?: InputMaybe<Scalars['String']>;
  entity_in?: InputMaybe<Array<Scalars['String']>>;
  entity_not_in?: InputMaybe<Array<Scalars['String']>>;
  entity_contains?: InputMaybe<Scalars['String']>;
  entity_contains_nocase?: InputMaybe<Scalars['String']>;
  entity_not_contains?: InputMaybe<Scalars['String']>;
  entity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  entity_starts_with?: InputMaybe<Scalars['String']>;
  entity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  entity_not_starts_with?: InputMaybe<Scalars['String']>;
  entity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  entity_ends_with?: InputMaybe<Scalars['String']>;
  entity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  entity_not_ends_with?: InputMaybe<Scalars['String']>;
  entity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  entity_?: InputMaybe<BILLING__Billing_filter>;
  totalTokensAdded?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAdded_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalance?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_not?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_gt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_lt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_gte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_lte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gateway?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  gateway_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  gateway_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  governor_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  governor_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  totalTokensAddedDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAddedDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulledDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulledDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemovedDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemovedDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalanceDelta?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalanceDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalanceDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__BillingDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'entity'
  | 'totalTokensAdded'
  | 'totalTokensPulled'
  | 'totalTokensRemoved'
  | 'totalCurrentBalance'
  | 'gateway'
  | 'governor'
  | 'totalTokensAddedDelta'
  | 'totalTokensPulledDelta'
  | 'totalTokensRemovedDelta'
  | 'totalCurrentBalanceDelta';

export type BILLING__Billing_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  gateway?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  gateway_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  gateway_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  gateway_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  governor_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  governor_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  governor_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  totalTokensAdded?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAdded_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalance?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_not?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_gt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_lt?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_gte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_lte?: InputMaybe<Scalars['BigInt']>;
  totalCurrentBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCurrentBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  currentDailyDataEntity?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_gt?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_lt?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_gte?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_lte?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_in?: InputMaybe<Array<Scalars['String']>>;
  currentDailyDataEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentDailyDataEntity_contains?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_contains?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_starts_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_ends_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_?: InputMaybe<BILLING__BillingDailyData_filter>;
  previousDailyDataEntity?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_gt?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_lt?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_gte?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_lte?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_in?: InputMaybe<Array<Scalars['String']>>;
  previousDailyDataEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  previousDailyDataEntity_contains?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_contains?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_starts_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_ends_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_?: InputMaybe<BILLING__BillingDailyData_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__Billing_orderBy =
  | 'id'
  | 'gateway'
  | 'governor'
  | 'totalTokensAdded'
  | 'totalTokensPulled'
  | 'totalTokensRemoved'
  | 'totalCurrentBalance'
  | 'currentDailyDataEntity'
  | 'previousDailyDataEntity';

export type BILLING__BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type BILLING__Block_height = {
  hash?: InputMaybe<Scalars['BILLING__Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type BILLING__OrderDirection =
  | 'asc'
  | 'desc';

/**
 * TokensAdded Transaction
 *
 */
export type BILLING__TokensAdded = BILLING__Transaction & {
  id: Scalars['ID'];
  hash: Scalars['BILLING__Bytes'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  user: BILLING__User;
  amount: Scalars['BigInt'];
  type: BILLING__TransactionType;
};

export type BILLING__TokensAdded_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  hash?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<BILLING__User_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  type?: InputMaybe<BILLING__TransactionType>;
  type_not?: InputMaybe<BILLING__TransactionType>;
  type_in?: InputMaybe<Array<BILLING__TransactionType>>;
  type_not_in?: InputMaybe<Array<BILLING__TransactionType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__TokensAdded_orderBy =
  | 'id'
  | 'hash'
  | 'blockNumber'
  | 'timestamp'
  | 'user'
  | 'amount'
  | 'type';

/**
 * TokensPulled Transaction. Where the gateway pulls tokens from the user
 *
 */
export type BILLING__TokensPulled = BILLING__Transaction & {
  id: Scalars['ID'];
  hash: Scalars['BILLING__Bytes'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  user: BILLING__User;
  amount: Scalars['BigInt'];
  type: BILLING__TransactionType;
};

export type BILLING__TokensPulled_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  hash?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<BILLING__User_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  type?: InputMaybe<BILLING__TransactionType>;
  type_not?: InputMaybe<BILLING__TransactionType>;
  type_in?: InputMaybe<Array<BILLING__TransactionType>>;
  type_not_in?: InputMaybe<Array<BILLING__TransactionType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__TokensPulled_orderBy =
  | 'id'
  | 'hash'
  | 'blockNumber'
  | 'timestamp'
  | 'user'
  | 'amount'
  | 'type';

/**
 * TokensRemoved Transaction
 *
 */
export type BILLING__TokensRemoved = BILLING__Transaction & {
  id: Scalars['ID'];
  hash: Scalars['BILLING__Bytes'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  user: BILLING__User;
  amount: Scalars['BigInt'];
  type: BILLING__TransactionType;
  /** User that the tokens are withdrawn to */
  to: Scalars['BILLING__Bytes'];
};

export type BILLING__TokensRemoved_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  hash?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<BILLING__User_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  type?: InputMaybe<BILLING__TransactionType>;
  type_not?: InputMaybe<BILLING__TransactionType>;
  type_in?: InputMaybe<Array<BILLING__TransactionType>>;
  type_not_in?: InputMaybe<Array<BILLING__TransactionType>>;
  to?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  to_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__TokensRemoved_orderBy =
  | 'id'
  | 'hash'
  | 'blockNumber'
  | 'timestamp'
  | 'user'
  | 'amount'
  | 'type'
  | 'to';

/**
 * A generic transaction
 *
 */
export type BILLING__Transaction = {
  /** Transaction hash concatenated with event log index */
  id: Scalars['ID'];
  /** Transaction hash */
  hash: Scalars['BILLING__Bytes'];
  /** Block number for the transaction */
  blockNumber: Scalars['Int'];
  /** Timestamp for the transaction */
  timestamp: Scalars['Int'];
  /** User of the transaction */
  user: BILLING__User;
  /** Amount of tokens used in the transaction */
  amount: Scalars['BigInt'];
  /** Type of Graph Network transaction */
  type: BILLING__TransactionType;
};

export type BILLING__TransactionType =
  | 'TokensAdded'
  | 'TokensRemoved'
  | 'TokensPulled';

export type BILLING__Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  hash?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lt?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_gte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_lte?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_not_in?: InputMaybe<Array<Scalars['BILLING__Bytes']>>;
  hash_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  hash_not_contains?: InputMaybe<Scalars['BILLING__Bytes']>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<BILLING__User_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  type?: InputMaybe<BILLING__TransactionType>;
  type_not?: InputMaybe<BILLING__TransactionType>;
  type_in?: InputMaybe<Array<BILLING__TransactionType>>;
  type_not_in?: InputMaybe<Array<BILLING__TransactionType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__Transaction_orderBy =
  | 'id'
  | 'hash'
  | 'blockNumber'
  | 'timestamp'
  | 'user'
  | 'amount'
  | 'type';

/**
 * Curator Name Signal for a single Subgraph
 *
 */
export type BILLING__User = {
  /** Polygon address */
  id: Scalars['ID'];
  /** Balance of the user in the Billing contract */
  billingBalance: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens added */
  totalTokensAdded: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens pulled */
  totalTokensPulled: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens removed/withdrawn */
  totalTokensRemoved: Scalars['BigInt'];
  /** All transactions of this user */
  transactions: Array<BILLING__Transaction>;
  /** Current UserDailyData entity created */
  currentDailyDataEntity?: Maybe<BILLING__UserDailyData>;
  /** Previous UserDailyData entity created */
  previousDailyDataEntity?: Maybe<BILLING__UserDailyData>;
  /** [DEPRECATED] Total polygonGRT balance */
  polygonGRTBalance: Scalars['BigInt'];
};


/**
 * Curator Name Signal for a single Subgraph
 *
 */
export type BILLING__UsertransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BILLING__Transaction_orderBy>;
  orderDirection?: InputMaybe<BILLING__OrderDirection>;
  where?: InputMaybe<BILLING__Transaction_filter>;
};

export type BILLING__UserDailyData = {
  /** <SUBGRAPH ID>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that the daily data entity tracks */
  entity: BILLING__User;
  /** [CUMULATIVE] Total amount of tokens added */
  totalTokensAdded: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens pulled */
  totalTokensPulled: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of tokens removed/withdrawn */
  totalTokensRemoved: Scalars['BigInt'];
  /** [CURRENT] Amount of currently available balance */
  billingBalance: Scalars['BigInt'];
  /** [DELTA] Chage in total tokens added since the last DailyData point */
  totalTokensAddedDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total tokens pulled since the last DailyData point */
  totalTokensPulledDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total tokens removed/withdrawn since the last DailyData point */
  totalTokensRemovedDelta: Scalars['BigInt'];
  /** [DELTA] Chage in total currently available balance since the last DailyData point */
  billingBalanceDelta: Scalars['BigInt'];
};

export type BILLING__UserDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  entity?: InputMaybe<Scalars['String']>;
  entity_not?: InputMaybe<Scalars['String']>;
  entity_gt?: InputMaybe<Scalars['String']>;
  entity_lt?: InputMaybe<Scalars['String']>;
  entity_gte?: InputMaybe<Scalars['String']>;
  entity_lte?: InputMaybe<Scalars['String']>;
  entity_in?: InputMaybe<Array<Scalars['String']>>;
  entity_not_in?: InputMaybe<Array<Scalars['String']>>;
  entity_contains?: InputMaybe<Scalars['String']>;
  entity_contains_nocase?: InputMaybe<Scalars['String']>;
  entity_not_contains?: InputMaybe<Scalars['String']>;
  entity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  entity_starts_with?: InputMaybe<Scalars['String']>;
  entity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  entity_not_starts_with?: InputMaybe<Scalars['String']>;
  entity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  entity_ends_with?: InputMaybe<Scalars['String']>;
  entity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  entity_not_ends_with?: InputMaybe<Scalars['String']>;
  entity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  entity_?: InputMaybe<BILLING__User_filter>;
  totalTokensAdded?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAdded_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  billingBalance?: InputMaybe<Scalars['BigInt']>;
  billingBalance_not?: InputMaybe<Scalars['BigInt']>;
  billingBalance_gt?: InputMaybe<Scalars['BigInt']>;
  billingBalance_lt?: InputMaybe<Scalars['BigInt']>;
  billingBalance_gte?: InputMaybe<Scalars['BigInt']>;
  billingBalance_lte?: InputMaybe<Scalars['BigInt']>;
  billingBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  billingBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAddedDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAddedDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAddedDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulledDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulledDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulledDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemovedDelta?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemovedDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemovedDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  billingBalanceDelta?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_not?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_gt?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_lt?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_gte?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_lte?: InputMaybe<Scalars['BigInt']>;
  billingBalanceDelta_in?: InputMaybe<Array<Scalars['BigInt']>>;
  billingBalanceDelta_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__UserDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'entity'
  | 'totalTokensAdded'
  | 'totalTokensPulled'
  | 'totalTokensRemoved'
  | 'billingBalance'
  | 'totalTokensAddedDelta'
  | 'totalTokensPulledDelta'
  | 'totalTokensRemovedDelta'
  | 'billingBalanceDelta';

export type BILLING__User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  billingBalance?: InputMaybe<Scalars['BigInt']>;
  billingBalance_not?: InputMaybe<Scalars['BigInt']>;
  billingBalance_gt?: InputMaybe<Scalars['BigInt']>;
  billingBalance_lt?: InputMaybe<Scalars['BigInt']>;
  billingBalance_gte?: InputMaybe<Scalars['BigInt']>;
  billingBalance_lte?: InputMaybe<Scalars['BigInt']>;
  billingBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  billingBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAdded?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAdded_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAdded_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensPulled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensPulled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensRemoved_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensRemoved_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactions_?: InputMaybe<BILLING__Transaction_filter>;
  currentDailyDataEntity?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_gt?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_lt?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_gte?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_lte?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_in?: InputMaybe<Array<Scalars['String']>>;
  currentDailyDataEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentDailyDataEntity_contains?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_contains?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_starts_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_ends_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentDailyDataEntity_?: InputMaybe<BILLING__UserDailyData_filter>;
  previousDailyDataEntity?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_gt?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_lt?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_gte?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_lte?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_in?: InputMaybe<Array<Scalars['String']>>;
  previousDailyDataEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  previousDailyDataEntity_contains?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_contains?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_starts_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_ends_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  previousDailyDataEntity_?: InputMaybe<BILLING__UserDailyData_filter>;
  polygonGRTBalance?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_not?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_gt?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_lt?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_gte?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_lte?: InputMaybe<Scalars['BigInt']>;
  polygonGRTBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  polygonGRTBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BILLING__BlockChangedFilter>;
};

export type BILLING__User_orderBy =
  | 'id'
  | 'billingBalance'
  | 'totalTokensAdded'
  | 'totalTokensPulled'
  | 'totalTokensRemoved'
  | 'transactions'
  | 'currentDailyDataEntity'
  | 'previousDailyDataEntity'
  | 'polygonGRTBalance';

export type BILLING___Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['BILLING__Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type BILLING___Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: BILLING___Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type BILLING___SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

export type ENS__AbiChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  contentType: Scalars['BigInt'];
};

export type ENS__AbiChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  contentType?: InputMaybe<Scalars['BigInt']>;
  contentType_not?: InputMaybe<Scalars['BigInt']>;
  contentType_gt?: InputMaybe<Scalars['BigInt']>;
  contentType_lt?: InputMaybe<Scalars['BigInt']>;
  contentType_gte?: InputMaybe<Scalars['BigInt']>;
  contentType_lte?: InputMaybe<Scalars['BigInt']>;
  contentType_in?: InputMaybe<Array<Scalars['BigInt']>>;
  contentType_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__AbiChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'contentType';

export type ENS__Account = {
  id: Scalars['ID'];
  domains: Array<ENS__Domain>;
  registrations?: Maybe<Array<ENS__Registration>>;
};


export type ENS__AccountdomainsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Domain_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Domain_filter>;
};


export type ENS__AccountregistrationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Registration_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Registration_filter>;
};

export type ENS__Account_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domains_?: InputMaybe<ENS__Domain_filter>;
  registrations_?: InputMaybe<ENS__Registration_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__Account_orderBy =
  | 'id'
  | 'domains'
  | 'registrations';

export type ENS__AddrChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  addr: ENS__Account;
};

export type ENS__AddrChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  addr?: InputMaybe<Scalars['String']>;
  addr_not?: InputMaybe<Scalars['String']>;
  addr_gt?: InputMaybe<Scalars['String']>;
  addr_lt?: InputMaybe<Scalars['String']>;
  addr_gte?: InputMaybe<Scalars['String']>;
  addr_lte?: InputMaybe<Scalars['String']>;
  addr_in?: InputMaybe<Array<Scalars['String']>>;
  addr_not_in?: InputMaybe<Array<Scalars['String']>>;
  addr_contains?: InputMaybe<Scalars['String']>;
  addr_contains_nocase?: InputMaybe<Scalars['String']>;
  addr_not_contains?: InputMaybe<Scalars['String']>;
  addr_not_contains_nocase?: InputMaybe<Scalars['String']>;
  addr_starts_with?: InputMaybe<Scalars['String']>;
  addr_starts_with_nocase?: InputMaybe<Scalars['String']>;
  addr_not_starts_with?: InputMaybe<Scalars['String']>;
  addr_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  addr_ends_with?: InputMaybe<Scalars['String']>;
  addr_ends_with_nocase?: InputMaybe<Scalars['String']>;
  addr_not_ends_with?: InputMaybe<Scalars['String']>;
  addr_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  addr_?: InputMaybe<ENS__Account_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__AddrChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'addr';

export type ENS__AuthorisationChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  owner: Scalars['ENS__Bytes'];
  target: Scalars['ENS__Bytes'];
  isAuthorized: Scalars['Boolean'];
};

export type ENS__AuthorisationChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  owner?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_not?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  owner_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  target?: InputMaybe<Scalars['ENS__Bytes']>;
  target_not?: InputMaybe<Scalars['ENS__Bytes']>;
  target_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  target_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  target_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  target_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  target_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  target_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  target_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  target_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  isAuthorized?: InputMaybe<Scalars['Boolean']>;
  isAuthorized_not?: InputMaybe<Scalars['Boolean']>;
  isAuthorized_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isAuthorized_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__AuthorisationChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'owner'
  | 'target'
  | 'isAuthorized';

export type ENS__BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type ENS__Block_height = {
  hash?: InputMaybe<Scalars['ENS__Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type ENS__ContenthashChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  hash: Scalars['ENS__Bytes'];
};

export type ENS__ContenthashChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  hash?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_not?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  hash_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  hash_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  hash_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__ContenthashChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'hash';

export type ENS__Domain = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  labelName?: Maybe<Scalars['String']>;
  labelhash?: Maybe<Scalars['ENS__Bytes']>;
  parent?: Maybe<ENS__Domain>;
  subdomains: Array<ENS__Domain>;
  subdomainCount: Scalars['Int'];
  resolvedAddress?: Maybe<ENS__Account>;
  owner: ENS__Account;
  resolver?: Maybe<ENS__Resolver>;
  ttl?: Maybe<Scalars['BigInt']>;
  isMigrated: Scalars['Boolean'];
  createdAt: Scalars['BigInt'];
  events: Array<ENS__DomainEvent>;
};


export type ENS__DomainsubdomainsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__Domain_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__Domain_filter>;
};


export type ENS__DomaineventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__DomainEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__DomainEvent_filter>;
};

export type ENS__DomainEvent = {
  id: Scalars['ID'];
  domain: ENS__Domain;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
};

export type ENS__DomainEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__DomainEvent_orderBy =
  | 'id'
  | 'domain'
  | 'blockNumber'
  | 'transactionID';

export type ENS__Domain_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  labelName?: InputMaybe<Scalars['String']>;
  labelName_not?: InputMaybe<Scalars['String']>;
  labelName_gt?: InputMaybe<Scalars['String']>;
  labelName_lt?: InputMaybe<Scalars['String']>;
  labelName_gte?: InputMaybe<Scalars['String']>;
  labelName_lte?: InputMaybe<Scalars['String']>;
  labelName_in?: InputMaybe<Array<Scalars['String']>>;
  labelName_not_in?: InputMaybe<Array<Scalars['String']>>;
  labelName_contains?: InputMaybe<Scalars['String']>;
  labelName_contains_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_contains?: InputMaybe<Scalars['String']>;
  labelName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  labelName_starts_with?: InputMaybe<Scalars['String']>;
  labelName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_starts_with?: InputMaybe<Scalars['String']>;
  labelName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_ends_with?: InputMaybe<Scalars['String']>;
  labelName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_ends_with?: InputMaybe<Scalars['String']>;
  labelName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  labelhash?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_not?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  labelhash_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  labelhash_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  labelhash_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  parent?: InputMaybe<Scalars['String']>;
  parent_not?: InputMaybe<Scalars['String']>;
  parent_gt?: InputMaybe<Scalars['String']>;
  parent_lt?: InputMaybe<Scalars['String']>;
  parent_gte?: InputMaybe<Scalars['String']>;
  parent_lte?: InputMaybe<Scalars['String']>;
  parent_in?: InputMaybe<Array<Scalars['String']>>;
  parent_not_in?: InputMaybe<Array<Scalars['String']>>;
  parent_contains?: InputMaybe<Scalars['String']>;
  parent_contains_nocase?: InputMaybe<Scalars['String']>;
  parent_not_contains?: InputMaybe<Scalars['String']>;
  parent_not_contains_nocase?: InputMaybe<Scalars['String']>;
  parent_starts_with?: InputMaybe<Scalars['String']>;
  parent_starts_with_nocase?: InputMaybe<Scalars['String']>;
  parent_not_starts_with?: InputMaybe<Scalars['String']>;
  parent_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  parent_ends_with?: InputMaybe<Scalars['String']>;
  parent_ends_with_nocase?: InputMaybe<Scalars['String']>;
  parent_not_ends_with?: InputMaybe<Scalars['String']>;
  parent_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  parent_?: InputMaybe<ENS__Domain_filter>;
  subdomains_?: InputMaybe<ENS__Domain_filter>;
  subdomainCount?: InputMaybe<Scalars['Int']>;
  subdomainCount_not?: InputMaybe<Scalars['Int']>;
  subdomainCount_gt?: InputMaybe<Scalars['Int']>;
  subdomainCount_lt?: InputMaybe<Scalars['Int']>;
  subdomainCount_gte?: InputMaybe<Scalars['Int']>;
  subdomainCount_lte?: InputMaybe<Scalars['Int']>;
  subdomainCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subdomainCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  resolvedAddress?: InputMaybe<Scalars['String']>;
  resolvedAddress_not?: InputMaybe<Scalars['String']>;
  resolvedAddress_gt?: InputMaybe<Scalars['String']>;
  resolvedAddress_lt?: InputMaybe<Scalars['String']>;
  resolvedAddress_gte?: InputMaybe<Scalars['String']>;
  resolvedAddress_lte?: InputMaybe<Scalars['String']>;
  resolvedAddress_in?: InputMaybe<Array<Scalars['String']>>;
  resolvedAddress_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolvedAddress_contains?: InputMaybe<Scalars['String']>;
  resolvedAddress_contains_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_contains?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_starts_with?: InputMaybe<Scalars['String']>;
  resolvedAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_starts_with?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_ends_with?: InputMaybe<Scalars['String']>;
  resolvedAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_ends_with?: InputMaybe<Scalars['String']>;
  resolvedAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolvedAddress_?: InputMaybe<ENS__Account_filter>;
  owner?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<ENS__Account_filter>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  ttl?: InputMaybe<Scalars['BigInt']>;
  ttl_not?: InputMaybe<Scalars['BigInt']>;
  ttl_gt?: InputMaybe<Scalars['BigInt']>;
  ttl_lt?: InputMaybe<Scalars['BigInt']>;
  ttl_gte?: InputMaybe<Scalars['BigInt']>;
  ttl_lte?: InputMaybe<Scalars['BigInt']>;
  ttl_in?: InputMaybe<Array<Scalars['BigInt']>>;
  ttl_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  isMigrated?: InputMaybe<Scalars['Boolean']>;
  isMigrated_not?: InputMaybe<Scalars['Boolean']>;
  isMigrated_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isMigrated_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  createdAt?: InputMaybe<Scalars['BigInt']>;
  createdAt_not?: InputMaybe<Scalars['BigInt']>;
  createdAt_gt?: InputMaybe<Scalars['BigInt']>;
  createdAt_lt?: InputMaybe<Scalars['BigInt']>;
  createdAt_gte?: InputMaybe<Scalars['BigInt']>;
  createdAt_lte?: InputMaybe<Scalars['BigInt']>;
  createdAt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<ENS__DomainEvent_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__Domain_orderBy =
  | 'id'
  | 'name'
  | 'labelName'
  | 'labelhash'
  | 'parent'
  | 'subdomains'
  | 'subdomainCount'
  | 'resolvedAddress'
  | 'owner'
  | 'resolver'
  | 'ttl'
  | 'isMigrated'
  | 'createdAt'
  | 'events';

export type ENS__InterfaceChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  interfaceID: Scalars['ENS__Bytes'];
  implementer: Scalars['ENS__Bytes'];
};

export type ENS__InterfaceChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  interfaceID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  interfaceID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  interfaceID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_not?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  implementer_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  implementer_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  implementer_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__InterfaceChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'interfaceID'
  | 'implementer';

export type ENS__MulticoinAddrChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  coinType: Scalars['BigInt'];
  addr: Scalars['ENS__Bytes'];
};

export type ENS__MulticoinAddrChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  coinType?: InputMaybe<Scalars['BigInt']>;
  coinType_not?: InputMaybe<Scalars['BigInt']>;
  coinType_gt?: InputMaybe<Scalars['BigInt']>;
  coinType_lt?: InputMaybe<Scalars['BigInt']>;
  coinType_gte?: InputMaybe<Scalars['BigInt']>;
  coinType_lte?: InputMaybe<Scalars['BigInt']>;
  coinType_in?: InputMaybe<Array<Scalars['BigInt']>>;
  coinType_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  addr?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_not?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  addr_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  addr_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  addr_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__MulticoinAddrChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'coinType'
  | 'addr';

export type ENS__NameChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  name: Scalars['String'];
};

export type ENS__NameChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NameChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'name';

export type ENS__NameRegistered = ENS__RegistrationEvent & {
  id: Scalars['ID'];
  registration: ENS__Registration;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  registrant: ENS__Account;
  expiryDate: Scalars['BigInt'];
};

export type ENS__NameRegistered_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  registration?: InputMaybe<Scalars['String']>;
  registration_not?: InputMaybe<Scalars['String']>;
  registration_gt?: InputMaybe<Scalars['String']>;
  registration_lt?: InputMaybe<Scalars['String']>;
  registration_gte?: InputMaybe<Scalars['String']>;
  registration_lte?: InputMaybe<Scalars['String']>;
  registration_in?: InputMaybe<Array<Scalars['String']>>;
  registration_not_in?: InputMaybe<Array<Scalars['String']>>;
  registration_contains?: InputMaybe<Scalars['String']>;
  registration_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_not_contains?: InputMaybe<Scalars['String']>;
  registration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_starts_with?: InputMaybe<Scalars['String']>;
  registration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_starts_with?: InputMaybe<Scalars['String']>;
  registration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_ends_with?: InputMaybe<Scalars['String']>;
  registration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_ends_with?: InputMaybe<Scalars['String']>;
  registration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_?: InputMaybe<ENS__Registration_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  registrant?: InputMaybe<Scalars['String']>;
  registrant_not?: InputMaybe<Scalars['String']>;
  registrant_gt?: InputMaybe<Scalars['String']>;
  registrant_lt?: InputMaybe<Scalars['String']>;
  registrant_gte?: InputMaybe<Scalars['String']>;
  registrant_lte?: InputMaybe<Scalars['String']>;
  registrant_in?: InputMaybe<Array<Scalars['String']>>;
  registrant_not_in?: InputMaybe<Array<Scalars['String']>>;
  registrant_contains?: InputMaybe<Scalars['String']>;
  registrant_contains_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_contains?: InputMaybe<Scalars['String']>;
  registrant_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registrant_starts_with?: InputMaybe<Scalars['String']>;
  registrant_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_starts_with?: InputMaybe<Scalars['String']>;
  registrant_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_ends_with?: InputMaybe<Scalars['String']>;
  registrant_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_ends_with?: InputMaybe<Scalars['String']>;
  registrant_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_?: InputMaybe<ENS__Account_filter>;
  expiryDate?: InputMaybe<Scalars['BigInt']>;
  expiryDate_not?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_in?: InputMaybe<Array<Scalars['BigInt']>>;
  expiryDate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NameRegistered_orderBy =
  | 'id'
  | 'registration'
  | 'blockNumber'
  | 'transactionID'
  | 'registrant'
  | 'expiryDate';

export type ENS__NameRenewed = ENS__RegistrationEvent & {
  id: Scalars['ID'];
  registration: ENS__Registration;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  expiryDate: Scalars['BigInt'];
};

export type ENS__NameRenewed_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  registration?: InputMaybe<Scalars['String']>;
  registration_not?: InputMaybe<Scalars['String']>;
  registration_gt?: InputMaybe<Scalars['String']>;
  registration_lt?: InputMaybe<Scalars['String']>;
  registration_gte?: InputMaybe<Scalars['String']>;
  registration_lte?: InputMaybe<Scalars['String']>;
  registration_in?: InputMaybe<Array<Scalars['String']>>;
  registration_not_in?: InputMaybe<Array<Scalars['String']>>;
  registration_contains?: InputMaybe<Scalars['String']>;
  registration_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_not_contains?: InputMaybe<Scalars['String']>;
  registration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_starts_with?: InputMaybe<Scalars['String']>;
  registration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_starts_with?: InputMaybe<Scalars['String']>;
  registration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_ends_with?: InputMaybe<Scalars['String']>;
  registration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_ends_with?: InputMaybe<Scalars['String']>;
  registration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_?: InputMaybe<ENS__Registration_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  expiryDate?: InputMaybe<Scalars['BigInt']>;
  expiryDate_not?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_in?: InputMaybe<Array<Scalars['BigInt']>>;
  expiryDate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NameRenewed_orderBy =
  | 'id'
  | 'registration'
  | 'blockNumber'
  | 'transactionID'
  | 'expiryDate';

export type ENS__NameTransferred = ENS__RegistrationEvent & {
  id: Scalars['ID'];
  registration: ENS__Registration;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  newOwner: ENS__Account;
};

export type ENS__NameTransferred_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  registration?: InputMaybe<Scalars['String']>;
  registration_not?: InputMaybe<Scalars['String']>;
  registration_gt?: InputMaybe<Scalars['String']>;
  registration_lt?: InputMaybe<Scalars['String']>;
  registration_gte?: InputMaybe<Scalars['String']>;
  registration_lte?: InputMaybe<Scalars['String']>;
  registration_in?: InputMaybe<Array<Scalars['String']>>;
  registration_not_in?: InputMaybe<Array<Scalars['String']>>;
  registration_contains?: InputMaybe<Scalars['String']>;
  registration_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_not_contains?: InputMaybe<Scalars['String']>;
  registration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_starts_with?: InputMaybe<Scalars['String']>;
  registration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_starts_with?: InputMaybe<Scalars['String']>;
  registration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_ends_with?: InputMaybe<Scalars['String']>;
  registration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_ends_with?: InputMaybe<Scalars['String']>;
  registration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_?: InputMaybe<ENS__Registration_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  newOwner?: InputMaybe<Scalars['String']>;
  newOwner_not?: InputMaybe<Scalars['String']>;
  newOwner_gt?: InputMaybe<Scalars['String']>;
  newOwner_lt?: InputMaybe<Scalars['String']>;
  newOwner_gte?: InputMaybe<Scalars['String']>;
  newOwner_lte?: InputMaybe<Scalars['String']>;
  newOwner_in?: InputMaybe<Array<Scalars['String']>>;
  newOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  newOwner_contains?: InputMaybe<Scalars['String']>;
  newOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  newOwner_not_contains?: InputMaybe<Scalars['String']>;
  newOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  newOwner_starts_with?: InputMaybe<Scalars['String']>;
  newOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  newOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  newOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  newOwner_ends_with?: InputMaybe<Scalars['String']>;
  newOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  newOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  newOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  newOwner_?: InputMaybe<ENS__Account_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NameTransferred_orderBy =
  | 'id'
  | 'registration'
  | 'blockNumber'
  | 'transactionID'
  | 'newOwner';

export type ENS__NewOwner = ENS__DomainEvent & {
  id: Scalars['ID'];
  parentDomain: ENS__Domain;
  domain: ENS__Domain;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  owner: ENS__Account;
};

export type ENS__NewOwner_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  parentDomain?: InputMaybe<Scalars['String']>;
  parentDomain_not?: InputMaybe<Scalars['String']>;
  parentDomain_gt?: InputMaybe<Scalars['String']>;
  parentDomain_lt?: InputMaybe<Scalars['String']>;
  parentDomain_gte?: InputMaybe<Scalars['String']>;
  parentDomain_lte?: InputMaybe<Scalars['String']>;
  parentDomain_in?: InputMaybe<Array<Scalars['String']>>;
  parentDomain_not_in?: InputMaybe<Array<Scalars['String']>>;
  parentDomain_contains?: InputMaybe<Scalars['String']>;
  parentDomain_contains_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_not_contains?: InputMaybe<Scalars['String']>;
  parentDomain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_starts_with?: InputMaybe<Scalars['String']>;
  parentDomain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_not_starts_with?: InputMaybe<Scalars['String']>;
  parentDomain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_ends_with?: InputMaybe<Scalars['String']>;
  parentDomain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_not_ends_with?: InputMaybe<Scalars['String']>;
  parentDomain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  parentDomain_?: InputMaybe<ENS__Domain_filter>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  owner?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<ENS__Account_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NewOwner_orderBy =
  | 'id'
  | 'parentDomain'
  | 'domain'
  | 'blockNumber'
  | 'transactionID'
  | 'owner';

export type ENS__NewResolver = ENS__DomainEvent & {
  id: Scalars['ID'];
  domain: ENS__Domain;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  resolver: ENS__Resolver;
};

export type ENS__NewResolver_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NewResolver_orderBy =
  | 'id'
  | 'domain'
  | 'blockNumber'
  | 'transactionID'
  | 'resolver';

export type ENS__NewTTL = ENS__DomainEvent & {
  id: Scalars['ID'];
  domain: ENS__Domain;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  ttl: Scalars['BigInt'];
};

export type ENS__NewTTL_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  ttl?: InputMaybe<Scalars['BigInt']>;
  ttl_not?: InputMaybe<Scalars['BigInt']>;
  ttl_gt?: InputMaybe<Scalars['BigInt']>;
  ttl_lt?: InputMaybe<Scalars['BigInt']>;
  ttl_gte?: InputMaybe<Scalars['BigInt']>;
  ttl_lte?: InputMaybe<Scalars['BigInt']>;
  ttl_in?: InputMaybe<Array<Scalars['BigInt']>>;
  ttl_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__NewTTL_orderBy =
  | 'id'
  | 'domain'
  | 'blockNumber'
  | 'transactionID'
  | 'ttl';

/** Defines the order direction, either ascending or descending */
export type ENS__OrderDirection =
  | 'asc'
  | 'desc';

export type ENS__PubkeyChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  x: Scalars['ENS__Bytes'];
  y: Scalars['ENS__Bytes'];
};

export type ENS__PubkeyChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  x?: InputMaybe<Scalars['ENS__Bytes']>;
  x_not?: InputMaybe<Scalars['ENS__Bytes']>;
  x_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  x_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  x_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  x_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  x_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  x_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  x_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  x_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  y?: InputMaybe<Scalars['ENS__Bytes']>;
  y_not?: InputMaybe<Scalars['ENS__Bytes']>;
  y_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  y_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  y_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  y_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  y_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  y_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  y_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  y_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__PubkeyChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'x'
  | 'y';

export type ENS__Registration = {
  id: Scalars['ID'];
  domain?: Maybe<ENS__Domain>;
  registrationDate: Scalars['BigInt'];
  expiryDate: Scalars['BigInt'];
  cost?: Maybe<Scalars['BigInt']>;
  registrant: ENS__Account;
  labelName?: Maybe<Scalars['String']>;
  events: Array<ENS__RegistrationEvent>;
};


export type ENS__RegistrationeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__RegistrationEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__RegistrationEvent_filter>;
};

export type ENS__RegistrationEvent = {
  id: Scalars['ID'];
  registration: ENS__Registration;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
};

export type ENS__RegistrationEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  registration?: InputMaybe<Scalars['String']>;
  registration_not?: InputMaybe<Scalars['String']>;
  registration_gt?: InputMaybe<Scalars['String']>;
  registration_lt?: InputMaybe<Scalars['String']>;
  registration_gte?: InputMaybe<Scalars['String']>;
  registration_lte?: InputMaybe<Scalars['String']>;
  registration_in?: InputMaybe<Array<Scalars['String']>>;
  registration_not_in?: InputMaybe<Array<Scalars['String']>>;
  registration_contains?: InputMaybe<Scalars['String']>;
  registration_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_not_contains?: InputMaybe<Scalars['String']>;
  registration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registration_starts_with?: InputMaybe<Scalars['String']>;
  registration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_starts_with?: InputMaybe<Scalars['String']>;
  registration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registration_ends_with?: InputMaybe<Scalars['String']>;
  registration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_not_ends_with?: InputMaybe<Scalars['String']>;
  registration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registration_?: InputMaybe<ENS__Registration_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__RegistrationEvent_orderBy =
  | 'id'
  | 'registration'
  | 'blockNumber'
  | 'transactionID';

export type ENS__Registration_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  registrationDate?: InputMaybe<Scalars['BigInt']>;
  registrationDate_not?: InputMaybe<Scalars['BigInt']>;
  registrationDate_gt?: InputMaybe<Scalars['BigInt']>;
  registrationDate_lt?: InputMaybe<Scalars['BigInt']>;
  registrationDate_gte?: InputMaybe<Scalars['BigInt']>;
  registrationDate_lte?: InputMaybe<Scalars['BigInt']>;
  registrationDate_in?: InputMaybe<Array<Scalars['BigInt']>>;
  registrationDate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  expiryDate?: InputMaybe<Scalars['BigInt']>;
  expiryDate_not?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lt?: InputMaybe<Scalars['BigInt']>;
  expiryDate_gte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_lte?: InputMaybe<Scalars['BigInt']>;
  expiryDate_in?: InputMaybe<Array<Scalars['BigInt']>>;
  expiryDate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  cost?: InputMaybe<Scalars['BigInt']>;
  cost_not?: InputMaybe<Scalars['BigInt']>;
  cost_gt?: InputMaybe<Scalars['BigInt']>;
  cost_lt?: InputMaybe<Scalars['BigInt']>;
  cost_gte?: InputMaybe<Scalars['BigInt']>;
  cost_lte?: InputMaybe<Scalars['BigInt']>;
  cost_in?: InputMaybe<Array<Scalars['BigInt']>>;
  cost_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  registrant?: InputMaybe<Scalars['String']>;
  registrant_not?: InputMaybe<Scalars['String']>;
  registrant_gt?: InputMaybe<Scalars['String']>;
  registrant_lt?: InputMaybe<Scalars['String']>;
  registrant_gte?: InputMaybe<Scalars['String']>;
  registrant_lte?: InputMaybe<Scalars['String']>;
  registrant_in?: InputMaybe<Array<Scalars['String']>>;
  registrant_not_in?: InputMaybe<Array<Scalars['String']>>;
  registrant_contains?: InputMaybe<Scalars['String']>;
  registrant_contains_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_contains?: InputMaybe<Scalars['String']>;
  registrant_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registrant_starts_with?: InputMaybe<Scalars['String']>;
  registrant_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_starts_with?: InputMaybe<Scalars['String']>;
  registrant_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_ends_with?: InputMaybe<Scalars['String']>;
  registrant_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_not_ends_with?: InputMaybe<Scalars['String']>;
  registrant_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registrant_?: InputMaybe<ENS__Account_filter>;
  labelName?: InputMaybe<Scalars['String']>;
  labelName_not?: InputMaybe<Scalars['String']>;
  labelName_gt?: InputMaybe<Scalars['String']>;
  labelName_lt?: InputMaybe<Scalars['String']>;
  labelName_gte?: InputMaybe<Scalars['String']>;
  labelName_lte?: InputMaybe<Scalars['String']>;
  labelName_in?: InputMaybe<Array<Scalars['String']>>;
  labelName_not_in?: InputMaybe<Array<Scalars['String']>>;
  labelName_contains?: InputMaybe<Scalars['String']>;
  labelName_contains_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_contains?: InputMaybe<Scalars['String']>;
  labelName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  labelName_starts_with?: InputMaybe<Scalars['String']>;
  labelName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_starts_with?: InputMaybe<Scalars['String']>;
  labelName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_ends_with?: InputMaybe<Scalars['String']>;
  labelName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  labelName_not_ends_with?: InputMaybe<Scalars['String']>;
  labelName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  events_?: InputMaybe<ENS__RegistrationEvent_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__Registration_orderBy =
  | 'id'
  | 'domain'
  | 'registrationDate'
  | 'expiryDate'
  | 'cost'
  | 'registrant'
  | 'labelName'
  | 'events';

export type ENS__Resolver = {
  id: Scalars['ID'];
  domain?: Maybe<ENS__Domain>;
  address: Scalars['ENS__Bytes'];
  addr?: Maybe<ENS__Account>;
  contentHash?: Maybe<Scalars['ENS__Bytes']>;
  texts?: Maybe<Array<Scalars['String']>>;
  coinTypes?: Maybe<Array<Scalars['BigInt']>>;
  events: Array<ENS__ResolverEvent>;
};


export type ENS__ResolvereventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ENS__ResolverEvent_orderBy>;
  orderDirection?: InputMaybe<ENS__OrderDirection>;
  where?: InputMaybe<ENS__ResolverEvent_filter>;
};

export type ENS__ResolverEvent = {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
};

export type ENS__ResolverEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__ResolverEvent_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID';

export type ENS__Resolver_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  address?: InputMaybe<Scalars['ENS__Bytes']>;
  address_not?: InputMaybe<Scalars['ENS__Bytes']>;
  address_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  address_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  address_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  address_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  address_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  address_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  address_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  address_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  addr?: InputMaybe<Scalars['String']>;
  addr_not?: InputMaybe<Scalars['String']>;
  addr_gt?: InputMaybe<Scalars['String']>;
  addr_lt?: InputMaybe<Scalars['String']>;
  addr_gte?: InputMaybe<Scalars['String']>;
  addr_lte?: InputMaybe<Scalars['String']>;
  addr_in?: InputMaybe<Array<Scalars['String']>>;
  addr_not_in?: InputMaybe<Array<Scalars['String']>>;
  addr_contains?: InputMaybe<Scalars['String']>;
  addr_contains_nocase?: InputMaybe<Scalars['String']>;
  addr_not_contains?: InputMaybe<Scalars['String']>;
  addr_not_contains_nocase?: InputMaybe<Scalars['String']>;
  addr_starts_with?: InputMaybe<Scalars['String']>;
  addr_starts_with_nocase?: InputMaybe<Scalars['String']>;
  addr_not_starts_with?: InputMaybe<Scalars['String']>;
  addr_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  addr_ends_with?: InputMaybe<Scalars['String']>;
  addr_ends_with_nocase?: InputMaybe<Scalars['String']>;
  addr_not_ends_with?: InputMaybe<Scalars['String']>;
  addr_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  addr_?: InputMaybe<ENS__Account_filter>;
  contentHash?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_not?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  contentHash_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  contentHash_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  contentHash_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  texts?: InputMaybe<Array<Scalars['String']>>;
  texts_not?: InputMaybe<Array<Scalars['String']>>;
  texts_contains?: InputMaybe<Array<Scalars['String']>>;
  texts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  texts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  texts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  coinTypes?: InputMaybe<Array<Scalars['BigInt']>>;
  coinTypes_not?: InputMaybe<Array<Scalars['BigInt']>>;
  coinTypes_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  coinTypes_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  coinTypes_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  coinTypes_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<ENS__ResolverEvent_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__Resolver_orderBy =
  | 'id'
  | 'domain'
  | 'address'
  | 'addr'
  | 'contentHash'
  | 'texts'
  | 'coinTypes'
  | 'events';

export type ENS__TextChanged = ENS__ResolverEvent & {
  id: Scalars['ID'];
  resolver: ENS__Resolver;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  key: Scalars['String'];
};

export type ENS__TextChanged_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  resolver?: InputMaybe<Scalars['String']>;
  resolver_not?: InputMaybe<Scalars['String']>;
  resolver_gt?: InputMaybe<Scalars['String']>;
  resolver_lt?: InputMaybe<Scalars['String']>;
  resolver_gte?: InputMaybe<Scalars['String']>;
  resolver_lte?: InputMaybe<Scalars['String']>;
  resolver_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_not_in?: InputMaybe<Array<Scalars['String']>>;
  resolver_contains?: InputMaybe<Scalars['String']>;
  resolver_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_contains?: InputMaybe<Scalars['String']>;
  resolver_not_contains_nocase?: InputMaybe<Scalars['String']>;
  resolver_starts_with?: InputMaybe<Scalars['String']>;
  resolver_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with?: InputMaybe<Scalars['String']>;
  resolver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_ends_with?: InputMaybe<Scalars['String']>;
  resolver_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with?: InputMaybe<Scalars['String']>;
  resolver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  resolver_?: InputMaybe<ENS__Resolver_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  key?: InputMaybe<Scalars['String']>;
  key_not?: InputMaybe<Scalars['String']>;
  key_gt?: InputMaybe<Scalars['String']>;
  key_lt?: InputMaybe<Scalars['String']>;
  key_gte?: InputMaybe<Scalars['String']>;
  key_lte?: InputMaybe<Scalars['String']>;
  key_in?: InputMaybe<Array<Scalars['String']>>;
  key_not_in?: InputMaybe<Array<Scalars['String']>>;
  key_contains?: InputMaybe<Scalars['String']>;
  key_contains_nocase?: InputMaybe<Scalars['String']>;
  key_not_contains?: InputMaybe<Scalars['String']>;
  key_not_contains_nocase?: InputMaybe<Scalars['String']>;
  key_starts_with?: InputMaybe<Scalars['String']>;
  key_starts_with_nocase?: InputMaybe<Scalars['String']>;
  key_not_starts_with?: InputMaybe<Scalars['String']>;
  key_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  key_ends_with?: InputMaybe<Scalars['String']>;
  key_ends_with_nocase?: InputMaybe<Scalars['String']>;
  key_not_ends_with?: InputMaybe<Scalars['String']>;
  key_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__TextChanged_orderBy =
  | 'id'
  | 'resolver'
  | 'blockNumber'
  | 'transactionID'
  | 'key';

export type ENS__Transfer = ENS__DomainEvent & {
  id: Scalars['ID'];
  domain: ENS__Domain;
  blockNumber: Scalars['Int'];
  transactionID: Scalars['ENS__Bytes'];
  owner: ENS__Account;
};

export type ENS__Transfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['String']>;
  domain_not?: InputMaybe<Scalars['String']>;
  domain_gt?: InputMaybe<Scalars['String']>;
  domain_lt?: InputMaybe<Scalars['String']>;
  domain_gte?: InputMaybe<Scalars['String']>;
  domain_lte?: InputMaybe<Scalars['String']>;
  domain_in?: InputMaybe<Array<Scalars['String']>>;
  domain_not_in?: InputMaybe<Array<Scalars['String']>>;
  domain_contains?: InputMaybe<Scalars['String']>;
  domain_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_not_contains?: InputMaybe<Scalars['String']>;
  domain_not_contains_nocase?: InputMaybe<Scalars['String']>;
  domain_starts_with?: InputMaybe<Scalars['String']>;
  domain_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_starts_with?: InputMaybe<Scalars['String']>;
  domain_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  domain_ends_with?: InputMaybe<Scalars['String']>;
  domain_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_not_ends_with?: InputMaybe<Scalars['String']>;
  domain_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  domain_?: InputMaybe<ENS__Domain_filter>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  transactionID?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lt?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_gte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_lte?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_not_in?: InputMaybe<Array<Scalars['ENS__Bytes']>>;
  transactionID_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  transactionID_not_contains?: InputMaybe<Scalars['ENS__Bytes']>;
  owner?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<ENS__Account_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ENS__BlockChangedFilter>;
};

export type ENS__Transfer_orderBy =
  | 'id'
  | 'domain'
  | 'blockNumber'
  | 'transactionID'
  | 'owner';

export type ENS___Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ENS__Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type ENS___Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ENS___Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type ENS___SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**
 * A state channel Allocation representing a single Indexer-SubgraphDeployment stake
 *
 */
export type ANALYTICS__Allocation = {
  /** Channel Address */
  id: Scalars['ID'];
  /** Indexer of this allocation */
  indexer: ANALYTICS__Indexer;
  /** Creator of the allocation - can be the operator or the indexer */
  creator: Scalars['ANALYTICS__Bytes'];
  /** If the Allocation is active it shows the indexer. If closed, it is null */
  activeForIndexer?: Maybe<ANALYTICS__Indexer>;
  /** Subgraph deployment that is being allocated to */
  subgraphDeployment: ANALYTICS__SubgraphDeployment;
  /** Tokens allocation in this allocation */
  allocatedTokens: Scalars['BigInt'];
  /** Effective allocation that is realized upon closing */
  effectiveAllocation: Scalars['BigInt'];
  /** Epoch this allocation was created */
  createdAtEpoch: Scalars['Int'];
  /** Block at which this allocation was created */
  createdAtBlockHash: Scalars['ANALYTICS__Bytes'];
  /** Epoch this allocation was closed in */
  closedAtEpoch: Scalars['Int'];
  /** Block hash at which this allocation was closed */
  closedAtBlockHash?: Maybe<Scalars['ANALYTICS__Bytes']>;
  /** Block number at which this allocation was closed */
  closedAtBlockNumber?: Maybe<Scalars['Int']>;
  /** Fees this allocation collected from query fees upon closing. Excludes curator reward and protocol tax */
  queryFeesCollected: Scalars['BigInt'];
  /** Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators */
  queryFeeRebates: Scalars['BigInt'];
  /** Curator rewards deposited to the curating bonding curve */
  curatorRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation. Includes delegator and indexer rewards */
  indexingRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation by indexers */
  indexingIndexerRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation by delegators */
  indexingDelegatorRewards: Scalars['BigInt'];
  /** Pool in which this allocation was closed */
  poolClosedIn?: Maybe<ANALYTICS__Pool>;
  /** Fees paid out to delegators */
  delegationFees: Scalars['BigInt'];
  /** Status of the allocation */
  status: ANALYTICS__AllocationStatus;
  /** Timestamp this allocation was created at */
  createdAt: Scalars['Int'];
  /** POI submitted with a closed allocation */
  poi?: Maybe<Scalars['ANALYTICS__Bytes']>;
  /** NOT IMPLEMENTED - Return for this allocation */
  totalReturn: Scalars['ANALYTICS__BigDecimal'];
  /** NOT IMPLEMENTED - Yearly annualzied return */
  annualizedReturn: Scalars['ANALYTICS__BigDecimal'];
};

export type ANALYTICS__AllocationStatus =
  | 'Null'
  | 'Active'
  | 'Closed'
  | 'Finalized'
  | 'Claimed';

export type ANALYTICS__Allocation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  creator?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  creator_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  creator_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creator_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  activeForIndexer?: InputMaybe<Scalars['String']>;
  activeForIndexer_not?: InputMaybe<Scalars['String']>;
  activeForIndexer_gt?: InputMaybe<Scalars['String']>;
  activeForIndexer_lt?: InputMaybe<Scalars['String']>;
  activeForIndexer_gte?: InputMaybe<Scalars['String']>;
  activeForIndexer_lte?: InputMaybe<Scalars['String']>;
  activeForIndexer_in?: InputMaybe<Array<Scalars['String']>>;
  activeForIndexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  activeForIndexer_contains?: InputMaybe<Scalars['String']>;
  activeForIndexer_contains_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_contains?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_starts_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_starts_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_ends_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_ends_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  allocatedTokens?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  effectiveAllocation?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_not?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_gt?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_lt?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_gte?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_lte?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_in?: InputMaybe<Array<Scalars['BigInt']>>;
  effectiveAllocation_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAtEpoch?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_not?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_gt?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_lt?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_gte?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_lte?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtBlockHash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  createdAtBlockHash_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  createdAtBlockHash_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  createdAtBlockHash_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtEpoch?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_not?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_gt?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_lt?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_gte?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_lte?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtBlockHash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  closedAtBlockHash_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  closedAtBlockHash_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockHash_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  closedAtBlockNumber?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_not?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_gt?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_lt?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_gte?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_lte?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtBlockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewards?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  poolClosedIn?: InputMaybe<Scalars['String']>;
  poolClosedIn_not?: InputMaybe<Scalars['String']>;
  poolClosedIn_gt?: InputMaybe<Scalars['String']>;
  poolClosedIn_lt?: InputMaybe<Scalars['String']>;
  poolClosedIn_gte?: InputMaybe<Scalars['String']>;
  poolClosedIn_lte?: InputMaybe<Scalars['String']>;
  poolClosedIn_in?: InputMaybe<Array<Scalars['String']>>;
  poolClosedIn_not_in?: InputMaybe<Array<Scalars['String']>>;
  poolClosedIn_contains?: InputMaybe<Scalars['String']>;
  poolClosedIn_contains_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_contains?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_contains_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_starts_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_starts_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_ends_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_ends_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_?: InputMaybe<ANALYTICS__Pool_filter>;
  delegationFees?: InputMaybe<Scalars['BigInt']>;
  delegationFees_not?: InputMaybe<Scalars['BigInt']>;
  delegationFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegationFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegationFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegationFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegationFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegationFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<ANALYTICS__AllocationStatus>;
  status_not?: InputMaybe<ANALYTICS__AllocationStatus>;
  status_in?: InputMaybe<Array<ANALYTICS__AllocationStatus>>;
  status_not_in?: InputMaybe<Array<ANALYTICS__AllocationStatus>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  poi?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  poi_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  poi_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  poi_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  totalReturn?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalReturn_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  annualizedReturn?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  annualizedReturn_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Allocation_orderBy =
  | 'id'
  | 'indexer'
  | 'creator'
  | 'activeForIndexer'
  | 'subgraphDeployment'
  | 'allocatedTokens'
  | 'effectiveAllocation'
  | 'createdAtEpoch'
  | 'createdAtBlockHash'
  | 'closedAtEpoch'
  | 'closedAtBlockHash'
  | 'closedAtBlockNumber'
  | 'queryFeesCollected'
  | 'queryFeeRebates'
  | 'curatorRewards'
  | 'indexingRewards'
  | 'indexingIndexerRewards'
  | 'indexingDelegatorRewards'
  | 'poolClosedIn'
  | 'delegationFees'
  | 'status'
  | 'createdAt'
  | 'poi'
  | 'totalReturn'
  | 'annualizedReturn';

export type ANALYTICS__BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type ANALYTICS__Block_height = {
  hash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/**
 * Curator with all Signals and metrics
 *
 */
export type ANALYTICS__Curator = {
  /** Eth address of the Curator */
  id: Scalars['ID'];
  /** Time this curator was created */
  createdAt: Scalars['Int'];
  /** CUMULATIVE tokens signalled on all the subgraphs */
  totalSignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens unsignalled on all the subgraphs */
  totalUnsignalledTokens: Scalars['BigInt'];
  /** Subgraphs the curator is curating */
  signals: Array<ANALYTICS__Signal>;
  /** CUMULATIVE tokens signalled on all names */
  totalNameSignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens unsignalled on all names */
  totalNameUnsignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE withdrawn tokens from deprecated subgraphs */
  totalWithdrawnTokens: Scalars['BigInt'];
  /** Subgraphs the curator is curating */
  nameSignals: Array<ANALYTICS__NameSignal>;
  /** NOT IMPLEMENTED - Summation of realized rewards from all Signals */
  realizedRewards: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Annualized rate of return on curator signal */
  annualizedReturn: Scalars['ANALYTICS__BigDecimal'];
  /** NOT IMPLEMENTED - Total return of the curator */
  totalReturn: Scalars['ANALYTICS__BigDecimal'];
  /** NOT IMPLEMENTED - Signaling efficiency of the curator */
  signalingEfficiency: Scalars['ANALYTICS__BigDecimal'];
  /** CURRENT summed name signal for all bonding curves */
  totalNameSignal: Scalars['ANALYTICS__BigDecimal'];
  /** Total curator cost basis of all shares purchased on all bonding curves */
  totalNameSignalAverageCostBasis: Scalars['ANALYTICS__BigDecimal'];
  /** totalNameSignalCostBasis / totalNameSignal */
  totalAverageCostBasisPerNameSignal: Scalars['ANALYTICS__BigDecimal'];
};


/**
 * Curator with all Signals and metrics
 *
 */
export type ANALYTICS__CuratorsignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Signal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Signal_filter>;
};


/**
 * Curator with all Signals and metrics
 *
 */
export type ANALYTICS__CuratornameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignal_filter>;
};

export type ANALYTICS__Curator_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalSignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signals_?: InputMaybe<ANALYTICS__Signal_filter>;
  totalNameSignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameSignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameUnsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameUnsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalWithdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalWithdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignals_?: InputMaybe<ANALYTICS__NameSignal_filter>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  annualizedReturn?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  annualizedReturn_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  annualizedReturn_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalReturn?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalReturn_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalReturn_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  signalingEfficiency?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  signalingEfficiency_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  signalingEfficiency_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalNameSignal?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignal_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalNameSignal_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalNameSignalAverageCostBasis?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalNameSignalAverageCostBasis_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalNameSignalAverageCostBasis_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalAverageCostBasisPerNameSignal?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalAverageCostBasisPerNameSignal_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Curator_orderBy =
  | 'id'
  | 'createdAt'
  | 'totalSignalledTokens'
  | 'totalUnsignalledTokens'
  | 'signals'
  | 'totalNameSignalledTokens'
  | 'totalNameUnsignalledTokens'
  | 'totalWithdrawnTokens'
  | 'nameSignals'
  | 'realizedRewards'
  | 'annualizedReturn'
  | 'totalReturn'
  | 'signalingEfficiency'
  | 'totalNameSignal'
  | 'totalNameSignalAverageCostBasis'
  | 'totalAverageCostBasisPerNameSignal';

/**
 * Delegator stake for a single Indexer
 *
 */
export type ANALYTICS__DelegatedStake = {
  /** Concatenation of Delegator address and Indexer address */
  id: Scalars['ID'];
  /** Index the stake is delegated to */
  indexer: ANALYTICS__Indexer;
  /** Delegator */
  delegator: ANALYTICS__Delegator;
  /** [POSSIBLE DEPRECATION] CURRENT tokens staked. Old stakedTokens implementation renamed to totalStakedTokens (19/03/21) */
  stakedTokens: Scalars['BigInt'];
  /** CURRENT tokens locked */
  lockedTokens: Scalars['BigInt'];
  /** Epoch the locked tokens get unlocked */
  lockedUntil: Scalars['Int'];
  /** Shares owned in the delegator pool. Used to calculate total amount delegated */
  shareAmount: Scalars['BigInt'];
  /** The rate this delegator paid for their shares (calculated using average cost basis). Used for rewards calculations */
  personalExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  /** Realized rewards from undelegating and realizing a reward */
  realizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Latest known value for share exchange rate. Should reflect the same value as 'delegationExchangeRate' on the related Indexer */
  latestIndexerExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Rewards not yet withdrawn, but already distributed. */
  unrealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Original value of the delegation shares. Should be sharesAmount * personalExchangeRate */
  originalDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Current value of the delegation shares. Should be sharesAmount * latestIndexerExchangeRate */
  currentDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** CUMULATIVE tokens delegated */
  totalStakedTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens undelegated */
  totalUnstakedTokens: Scalars['BigInt'];
  /** Time this delegator first delegated to an indexer */
  createdAt: Scalars['Int'];
  /** Last time this delegator delegated towards this indexer */
  lastDelegatedAt?: Maybe<Scalars['Int']>;
  /** Last time this delegator undelegated from this indexer */
  lastUndelegatedAt?: Maybe<Scalars['Int']>;
  /** Auxiliary entity used for batch updates */
  relation: ANALYTICS__IndexerDelegatedStakeRelation;
};

export type ANALYTICS__DelegatedStakeDailyData = {
  /** <DELEGATOR ADDRESS>-<INDEXER ADDRESS>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that this daily data tracks */
  stake: ANALYTICS__DelegatedStake;
  /** Delegator entity that owns the original entity */
  delegator: ANALYTICS__Delegator;
  /** Indexer entity where the delegation resides */
  indexer: ANALYTICS__Indexer;
  /** [CURRENT] Amount of staked tokens for this day and this indexer */
  stakedTokens: Scalars['BigInt'];
  /** [CURRENT] Amount of locked tokens (undelegating) for this day and this indexer */
  lockedTokens: Scalars['BigInt'];
  /** [CURRENT] Amount of shares for this day and this indexer */
  shareAmount: Scalars['BigInt'];
  /** [CURRENT] Initial exchange rate for this delegator in this indexer at this day. It will increase as an average cost basis if the delegator adds more delegation. */
  personalExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Latest delegationExchangeRate value for the indexer */
  latestIndexerExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Unrealized rewards for the delegator on this particular stake */
  unrealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Realized rewards for the delegator on this particular stake */
  realizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Original delegation for the delegator on this particular stake */
  originalDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Current delegation for the delegator on this particular stake */
  currentDelegation: Scalars['ANALYTICS__BigDecimal'];
};

export type ANALYTICS__DelegatedStakeDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stake?: InputMaybe<Scalars['String']>;
  stake_not?: InputMaybe<Scalars['String']>;
  stake_gt?: InputMaybe<Scalars['String']>;
  stake_lt?: InputMaybe<Scalars['String']>;
  stake_gte?: InputMaybe<Scalars['String']>;
  stake_lte?: InputMaybe<Scalars['String']>;
  stake_in?: InputMaybe<Array<Scalars['String']>>;
  stake_not_in?: InputMaybe<Array<Scalars['String']>>;
  stake_contains?: InputMaybe<Scalars['String']>;
  stake_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_not_contains?: InputMaybe<Scalars['String']>;
  stake_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_starts_with?: InputMaybe<Scalars['String']>;
  stake_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_starts_with?: InputMaybe<Scalars['String']>;
  stake_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_ends_with?: InputMaybe<Scalars['String']>;
  stake_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_ends_with?: InputMaybe<Scalars['String']>;
  stake_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  shareAmount?: InputMaybe<Scalars['BigInt']>;
  shareAmount_not?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  shareAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  personalExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  personalExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  latestIndexerExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  latestIndexerExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  unrealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  unrealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  realizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__DelegatedStakeDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'stake'
  | 'delegator'
  | 'indexer'
  | 'stakedTokens'
  | 'lockedTokens'
  | 'shareAmount'
  | 'personalExchangeRate'
  | 'latestIndexerExchangeRate'
  | 'unrealizedRewards'
  | 'realizedRewards'
  | 'originalDelegation'
  | 'currentDelegation';

export type ANALYTICS__DelegatedStake_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedUntil?: InputMaybe<Scalars['Int']>;
  lockedUntil_not?: InputMaybe<Scalars['Int']>;
  lockedUntil_gt?: InputMaybe<Scalars['Int']>;
  lockedUntil_lt?: InputMaybe<Scalars['Int']>;
  lockedUntil_gte?: InputMaybe<Scalars['Int']>;
  lockedUntil_lte?: InputMaybe<Scalars['Int']>;
  lockedUntil_in?: InputMaybe<Array<Scalars['Int']>>;
  lockedUntil_not_in?: InputMaybe<Array<Scalars['Int']>>;
  shareAmount?: InputMaybe<Scalars['BigInt']>;
  shareAmount_not?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  shareAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  personalExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  personalExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  personalExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  realizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  latestIndexerExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  latestIndexerExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  latestIndexerExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  unrealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  unrealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  unrealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalStakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalStakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  relation?: InputMaybe<Scalars['String']>;
  relation_not?: InputMaybe<Scalars['String']>;
  relation_gt?: InputMaybe<Scalars['String']>;
  relation_lt?: InputMaybe<Scalars['String']>;
  relation_gte?: InputMaybe<Scalars['String']>;
  relation_lte?: InputMaybe<Scalars['String']>;
  relation_in?: InputMaybe<Array<Scalars['String']>>;
  relation_not_in?: InputMaybe<Array<Scalars['String']>>;
  relation_contains?: InputMaybe<Scalars['String']>;
  relation_contains_nocase?: InputMaybe<Scalars['String']>;
  relation_not_contains?: InputMaybe<Scalars['String']>;
  relation_not_contains_nocase?: InputMaybe<Scalars['String']>;
  relation_starts_with?: InputMaybe<Scalars['String']>;
  relation_starts_with_nocase?: InputMaybe<Scalars['String']>;
  relation_not_starts_with?: InputMaybe<Scalars['String']>;
  relation_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  relation_ends_with?: InputMaybe<Scalars['String']>;
  relation_ends_with_nocase?: InputMaybe<Scalars['String']>;
  relation_not_ends_with?: InputMaybe<Scalars['String']>;
  relation_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  relation_?: InputMaybe<ANALYTICS__IndexerDelegatedStakeRelation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__DelegatedStake_orderBy =
  | 'id'
  | 'indexer'
  | 'delegator'
  | 'stakedTokens'
  | 'lockedTokens'
  | 'lockedUntil'
  | 'shareAmount'
  | 'personalExchangeRate'
  | 'realizedRewards'
  | 'latestIndexerExchangeRate'
  | 'unrealizedRewards'
  | 'originalDelegation'
  | 'currentDelegation'
  | 'totalStakedTokens'
  | 'totalUnstakedTokens'
  | 'createdAt'
  | 'lastDelegatedAt'
  | 'lastUndelegatedAt'
  | 'relation';

/**
 * Delegator with all their delegated stakes towards Indexers
 *
 */
export type ANALYTICS__Delegator = {
  /** Delegator address */
  id: Scalars['ID'];
  account: ANALYTICS__GraphAccount;
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** Stakes of this delegator */
  stakes: Array<ANALYTICS__DelegatedStake>;
  /** Time created at */
  createdAt: Scalars['Int'];
  /** [POSSIBLE DEPRECATION] Current amount of staked tokens across all DelegatedStakes */
  stakedTokens: Scalars['BigInt'];
  /** Current amount of locked tokens (undelegating) across all DelegatedStakes */
  lockedTokens: Scalars['BigInt'];
  /** [CURRENT] Total realized rewards across all delegated stakes. Realized rewards are added when undelegating and realizing a profit */
  totalRealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Total unrealized rewards across all delegated stakes. */
  totalUnrealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Original amount delegated across all delegated stakes. */
  originalDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Current delegation amount across all delegated stakes. This is updated based on the continuous restake from delegation */
  currentDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** List of all the daily data entities that exists for this delegator */
  dailyData: Array<ANALYTICS__DelegatorDailyData>;
  /** CUMULATIVE staked tokens in DelegatorStakes of this Delegator */
  totalStakedTokens: Scalars['BigInt'];
  /** CUMULATIVE unstaked tokens in DelegatorStakes of this Delegator */
  totalUnstakedTokens: Scalars['BigInt'];
  /** Total DelegatedStake entity count (Active and inactive) */
  stakesCount: Scalars['Int'];
  /** Active DelegatedStake entity count. Active means it still has GRT delegated */
  activeStakesCount: Scalars['Int'];
  /** Last time this delegator delegated towards any indexer */
  lastDelegatedAt?: Maybe<Scalars['Int']>;
  /** Last time this delegator undelegated from any indexer */
  lastUndelegatedAt?: Maybe<Scalars['Int']>;
  /** DelegatedStake entity related to the lastDelegatedAt field */
  lastDelegation?: Maybe<ANALYTICS__DelegatedStake>;
  /** DelegatedStake entity related to the lastUndelegatedAt field */
  lastUndelegation?: Maybe<ANALYTICS__DelegatedStake>;
};


/**
 * Delegator with all their delegated stakes towards Indexers
 *
 */
export type ANALYTICS__DelegatorstakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
};


/**
 * Delegator with all their delegated stakes towards Indexers
 *
 */
export type ANALYTICS__DelegatordailyDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatorDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatorDailyData_filter>;
};

export type ANALYTICS__DelegatorDailyData = {
  /** <DELEGATOR ADDRESS>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that this daily data tracks */
  delegator: ANALYTICS__Delegator;
  /** [CURRENT] Amount of staked tokens for this day across all stakes */
  stakedTokens: Scalars['BigInt'];
  /** [CURRENT] Amount of locked (undelegating) tokens for this day across all stakes */
  lockedTokens: Scalars['BigInt'];
  /** [CURRENT] Aggregation of unrealized rewards across all stakes */
  totalUnrealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Aggregation of realized rewards across all stakes */
  totalRealizedRewards: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Current delegation for the delegator across all stakes */
  currentDelegation: Scalars['ANALYTICS__BigDecimal'];
  /** [CURRENT] Total amount of DelegatedStake entities this Delegator historically had at this point in time */
  stakesCount: Scalars['Int'];
  /** [CURRENT] Amount of active DelegatedStake entities this Delegator had at this point in time */
  activeStakesCount: Scalars['Int'];
};

export type ANALYTICS__DelegatorDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnrealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalUnrealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalRealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalRealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  stakesCount?: InputMaybe<Scalars['Int']>;
  stakesCount_not?: InputMaybe<Scalars['Int']>;
  stakesCount_gt?: InputMaybe<Scalars['Int']>;
  stakesCount_lt?: InputMaybe<Scalars['Int']>;
  stakesCount_gte?: InputMaybe<Scalars['Int']>;
  stakesCount_lte?: InputMaybe<Scalars['Int']>;
  stakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount?: InputMaybe<Scalars['Int']>;
  activeStakesCount_not?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__DelegatorDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'delegator'
  | 'stakedTokens'
  | 'lockedTokens'
  | 'totalUnrealizedRewards'
  | 'totalRealizedRewards'
  | 'currentDelegation'
  | 'stakesCount'
  | 'activeStakesCount';

export type ANALYTICS__DelegatorDelegatedStakeDailyRelation = {
  /** Auxiliary entity to avoid using arrays for many-to-many relation tracking. Compounds the delegator id with an autoincremental number. */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Delegator entity that forms the relation. */
  delegator: ANALYTICS__Delegator;
  /** DelegatedStake entity that forms the relation */
  stake: ANALYTICS__DelegatedStake;
  /** DailyData entity that tracks the Delegator for this specific day */
  delegatorDailyData: ANALYTICS__DelegatorDailyData;
  /** DailyData entity that tracks the DelegatedStake for this specific day */
  delegatedStakeDailyData: ANALYTICS__DelegatedStakeDailyData;
};

export type ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  stake?: InputMaybe<Scalars['String']>;
  stake_not?: InputMaybe<Scalars['String']>;
  stake_gt?: InputMaybe<Scalars['String']>;
  stake_lt?: InputMaybe<Scalars['String']>;
  stake_gte?: InputMaybe<Scalars['String']>;
  stake_lte?: InputMaybe<Scalars['String']>;
  stake_in?: InputMaybe<Array<Scalars['String']>>;
  stake_not_in?: InputMaybe<Array<Scalars['String']>>;
  stake_contains?: InputMaybe<Scalars['String']>;
  stake_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_not_contains?: InputMaybe<Scalars['String']>;
  stake_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_starts_with?: InputMaybe<Scalars['String']>;
  stake_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_starts_with?: InputMaybe<Scalars['String']>;
  stake_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_ends_with?: InputMaybe<Scalars['String']>;
  stake_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_ends_with?: InputMaybe<Scalars['String']>;
  stake_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  delegatorDailyData?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not?: InputMaybe<Scalars['String']>;
  delegatorDailyData_gt?: InputMaybe<Scalars['String']>;
  delegatorDailyData_lt?: InputMaybe<Scalars['String']>;
  delegatorDailyData_gte?: InputMaybe<Scalars['String']>;
  delegatorDailyData_lte?: InputMaybe<Scalars['String']>;
  delegatorDailyData_in?: InputMaybe<Array<Scalars['String']>>;
  delegatorDailyData_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegatorDailyData_contains?: InputMaybe<Scalars['String']>;
  delegatorDailyData_contains_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_contains?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_starts_with?: InputMaybe<Scalars['String']>;
  delegatorDailyData_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_starts_with?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_ends_with?: InputMaybe<Scalars['String']>;
  delegatorDailyData_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_ends_with?: InputMaybe<Scalars['String']>;
  delegatorDailyData_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegatorDailyData_?: InputMaybe<ANALYTICS__DelegatorDailyData_filter>;
  delegatedStakeDailyData?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_gt?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_lt?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_gte?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_lte?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_in?: InputMaybe<Array<Scalars['String']>>;
  delegatedStakeDailyData_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegatedStakeDailyData_contains?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_contains_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_contains?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_starts_with?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_starts_with?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_ends_with?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_ends_with?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegatedStakeDailyData_?: InputMaybe<ANALYTICS__DelegatedStakeDailyData_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'delegator'
  | 'stake'
  | 'delegatorDailyData'
  | 'delegatedStakeDailyData';

export type ANALYTICS__Delegator_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  account?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stakes_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalRealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalRealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalRealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalUnrealizedRewards?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  totalUnrealizedRewards_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  totalUnrealizedRewards_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  originalDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  originalDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  currentDelegation_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  currentDelegation_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  dailyData_?: InputMaybe<ANALYTICS__DelegatorDailyData_filter>;
  totalStakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalStakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakesCount?: InputMaybe<Scalars['Int']>;
  stakesCount_not?: InputMaybe<Scalars['Int']>;
  stakesCount_gt?: InputMaybe<Scalars['Int']>;
  stakesCount_lt?: InputMaybe<Scalars['Int']>;
  stakesCount_gte?: InputMaybe<Scalars['Int']>;
  stakesCount_lte?: InputMaybe<Scalars['Int']>;
  stakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount?: InputMaybe<Scalars['Int']>;
  activeStakesCount_not?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegation?: InputMaybe<Scalars['String']>;
  lastDelegation_not?: InputMaybe<Scalars['String']>;
  lastDelegation_gt?: InputMaybe<Scalars['String']>;
  lastDelegation_lt?: InputMaybe<Scalars['String']>;
  lastDelegation_gte?: InputMaybe<Scalars['String']>;
  lastDelegation_lte?: InputMaybe<Scalars['String']>;
  lastDelegation_in?: InputMaybe<Array<Scalars['String']>>;
  lastDelegation_not_in?: InputMaybe<Array<Scalars['String']>>;
  lastDelegation_contains?: InputMaybe<Scalars['String']>;
  lastDelegation_contains_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_not_contains?: InputMaybe<Scalars['String']>;
  lastDelegation_not_contains_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_starts_with?: InputMaybe<Scalars['String']>;
  lastDelegation_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_not_starts_with?: InputMaybe<Scalars['String']>;
  lastDelegation_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_ends_with?: InputMaybe<Scalars['String']>;
  lastDelegation_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_not_ends_with?: InputMaybe<Scalars['String']>;
  lastDelegation_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lastDelegation_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  lastUndelegation?: InputMaybe<Scalars['String']>;
  lastUndelegation_not?: InputMaybe<Scalars['String']>;
  lastUndelegation_gt?: InputMaybe<Scalars['String']>;
  lastUndelegation_lt?: InputMaybe<Scalars['String']>;
  lastUndelegation_gte?: InputMaybe<Scalars['String']>;
  lastUndelegation_lte?: InputMaybe<Scalars['String']>;
  lastUndelegation_in?: InputMaybe<Array<Scalars['String']>>;
  lastUndelegation_not_in?: InputMaybe<Array<Scalars['String']>>;
  lastUndelegation_contains?: InputMaybe<Scalars['String']>;
  lastUndelegation_contains_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_contains?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_contains_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_starts_with?: InputMaybe<Scalars['String']>;
  lastUndelegation_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_starts_with?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_ends_with?: InputMaybe<Scalars['String']>;
  lastUndelegation_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_ends_with?: InputMaybe<Scalars['String']>;
  lastUndelegation_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lastUndelegation_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Delegator_orderBy =
  | 'id'
  | 'account'
  | 'defaultDisplayName'
  | 'stakes'
  | 'createdAt'
  | 'stakedTokens'
  | 'lockedTokens'
  | 'totalRealizedRewards'
  | 'totalUnrealizedRewards'
  | 'originalDelegation'
  | 'currentDelegation'
  | 'dailyData'
  | 'totalStakedTokens'
  | 'totalUnstakedTokens'
  | 'stakesCount'
  | 'activeStakesCount'
  | 'lastDelegatedAt'
  | 'lastUndelegatedAt'
  | 'lastDelegation'
  | 'lastUndelegation';

/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccount = {
  /** Graph account ID */
  id: Scalars['ID'];
  /** All names this graph account has claimed from all name systems */
  names: Array<ANALYTICS__GraphAccountName>;
  /** Default name the graph account has chosen */
  defaultName?: Maybe<ANALYTICS__GraphAccountName>;
  /** Time the account was created */
  createdAt: Scalars['Int'];
  /** Default display name is the current default name. Used for filtered queries in the explorer */
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** True if it is an organization. False if it is an individual */
  isOrganization?: Maybe<Scalars['Boolean']>;
  /** IPFS hash with account metadata details */
  metadataHash?: Maybe<Scalars['ANALYTICS__Bytes']>;
  /** Main repository of code for the graph account */
  codeRepository?: Maybe<Scalars['String']>;
  /** Description of the graph account */
  description?: Maybe<Scalars['String']>;
  /** Image URL */
  image?: Maybe<Scalars['String']>;
  /** Website URL */
  website?: Maybe<Scalars['String']>;
  /** Display name. Not unique */
  displayName?: Maybe<Scalars['String']>;
  /** Operator of other Graph Accounts */
  operatorOf: Array<ANALYTICS__GraphAccount>;
  /** Operators of this Graph Accounts */
  operators: Array<ANALYTICS__GraphAccount>;
  /** Graph token balance */
  balance: Scalars['BigInt'];
  /** Amount this account has approved staking to transfer their GRT */
  curationApproval: Scalars['BigInt'];
  /** Amount this account has approved curation to transfer their GRT */
  stakingApproval: Scalars['BigInt'];
  /** Amount this account has approved the GNS to transfer their GRT */
  gnsApproval: Scalars['BigInt'];
  /** Subgraphs the graph account owns */
  subgraphs: Array<ANALYTICS__Subgraph>;
  /** Time that this graph account became a developer */
  developerCreatedAt?: Maybe<Scalars['Int']>;
  /** Curator fields for this GraphAccount. Null if never curated */
  curator?: Maybe<ANALYTICS__Curator>;
  /** Indexer fields for this GraphAccount. Null if never indexed */
  indexer?: Maybe<ANALYTICS__Indexer>;
  /** Delegator fields for this GraphAccount. Null if never delegated */
  delegator?: Maybe<ANALYTICS__Delegator>;
  /** Name signal transactions created by this GraphAccount */
  nameSignalTransactions: Array<ANALYTICS__NameSignalTransaction>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccountnamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccountName_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccountoperatorOfArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccount_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccountoperatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__GraphAccount_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccountsubgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Subgraph_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Subgraph_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type ANALYTICS__GraphAccountnameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignalTransaction_filter>;
};

/**
 * A name chosen by a Graph Account from a Name System such as ENS. This allows Graph Accounts to be
 * recognized by name, rather than just an Ethereum address
 *
 */
export type ANALYTICS__GraphAccountName = {
  /** Name system concatenated with the unique ID of the name system */
  id: Scalars['ID'];
  /** Name system for this name */
  nameSystem: ANALYTICS__NameSystem;
  /** Name from the system */
  name: Scalars['String'];
  /** The graph account that owned the name when it was linked in the graph network */
  graphAccount?: Maybe<ANALYTICS__GraphAccount>;
};

export type ANALYTICS__GraphAccountName_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nameSystem?: InputMaybe<ANALYTICS__NameSystem>;
  nameSystem_not?: InputMaybe<ANALYTICS__NameSystem>;
  nameSystem_in?: InputMaybe<Array<ANALYTICS__NameSystem>>;
  nameSystem_not_in?: InputMaybe<Array<ANALYTICS__NameSystem>>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount?: InputMaybe<Scalars['String']>;
  graphAccount_not?: InputMaybe<Scalars['String']>;
  graphAccount_gt?: InputMaybe<Scalars['String']>;
  graphAccount_lt?: InputMaybe<Scalars['String']>;
  graphAccount_gte?: InputMaybe<Scalars['String']>;
  graphAccount_lte?: InputMaybe<Scalars['String']>;
  graphAccount_in?: InputMaybe<Array<Scalars['String']>>;
  graphAccount_not_in?: InputMaybe<Array<Scalars['String']>>;
  graphAccount_contains?: InputMaybe<Scalars['String']>;
  graphAccount_contains_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_contains?: InputMaybe<Scalars['String']>;
  graphAccount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_starts_with?: InputMaybe<Scalars['String']>;
  graphAccount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_starts_with?: InputMaybe<Scalars['String']>;
  graphAccount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_ends_with?: InputMaybe<Scalars['String']>;
  graphAccount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_ends_with?: InputMaybe<Scalars['String']>;
  graphAccount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__GraphAccountName_orderBy =
  | 'id'
  | 'nameSystem'
  | 'name'
  | 'graphAccount';

export type ANALYTICS__GraphAccount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  names_?: InputMaybe<ANALYTICS__GraphAccountName_filter>;
  defaultName?: InputMaybe<Scalars['String']>;
  defaultName_not?: InputMaybe<Scalars['String']>;
  defaultName_gt?: InputMaybe<Scalars['String']>;
  defaultName_lt?: InputMaybe<Scalars['String']>;
  defaultName_gte?: InputMaybe<Scalars['String']>;
  defaultName_lte?: InputMaybe<Scalars['String']>;
  defaultName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultName_contains?: InputMaybe<Scalars['String']>;
  defaultName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_contains?: InputMaybe<Scalars['String']>;
  defaultName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultName_starts_with?: InputMaybe<Scalars['String']>;
  defaultName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_ends_with?: InputMaybe<Scalars['String']>;
  defaultName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_?: InputMaybe<ANALYTICS__GraphAccountName_filter>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  isOrganization?: InputMaybe<Scalars['Boolean']>;
  isOrganization_not?: InputMaybe<Scalars['Boolean']>;
  isOrganization_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isOrganization_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  metadataHash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  codeRepository?: InputMaybe<Scalars['String']>;
  codeRepository_not?: InputMaybe<Scalars['String']>;
  codeRepository_gt?: InputMaybe<Scalars['String']>;
  codeRepository_lt?: InputMaybe<Scalars['String']>;
  codeRepository_gte?: InputMaybe<Scalars['String']>;
  codeRepository_lte?: InputMaybe<Scalars['String']>;
  codeRepository_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_not_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_contains?: InputMaybe<Scalars['String']>;
  codeRepository_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  image_not?: InputMaybe<Scalars['String']>;
  image_gt?: InputMaybe<Scalars['String']>;
  image_lt?: InputMaybe<Scalars['String']>;
  image_gte?: InputMaybe<Scalars['String']>;
  image_lte?: InputMaybe<Scalars['String']>;
  image_in?: InputMaybe<Array<Scalars['String']>>;
  image_not_in?: InputMaybe<Array<Scalars['String']>>;
  image_contains?: InputMaybe<Scalars['String']>;
  image_contains_nocase?: InputMaybe<Scalars['String']>;
  image_not_contains?: InputMaybe<Scalars['String']>;
  image_not_contains_nocase?: InputMaybe<Scalars['String']>;
  image_starts_with?: InputMaybe<Scalars['String']>;
  image_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_starts_with?: InputMaybe<Scalars['String']>;
  image_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_ends_with?: InputMaybe<Scalars['String']>;
  image_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_ends_with?: InputMaybe<Scalars['String']>;
  image_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
  website_not?: InputMaybe<Scalars['String']>;
  website_gt?: InputMaybe<Scalars['String']>;
  website_lt?: InputMaybe<Scalars['String']>;
  website_gte?: InputMaybe<Scalars['String']>;
  website_lte?: InputMaybe<Scalars['String']>;
  website_in?: InputMaybe<Array<Scalars['String']>>;
  website_not_in?: InputMaybe<Array<Scalars['String']>>;
  website_contains?: InputMaybe<Scalars['String']>;
  website_contains_nocase?: InputMaybe<Scalars['String']>;
  website_not_contains?: InputMaybe<Scalars['String']>;
  website_not_contains_nocase?: InputMaybe<Scalars['String']>;
  website_starts_with?: InputMaybe<Scalars['String']>;
  website_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_starts_with?: InputMaybe<Scalars['String']>;
  website_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_ends_with?: InputMaybe<Scalars['String']>;
  website_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_ends_with?: InputMaybe<Scalars['String']>;
  website_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  displayName_not?: InputMaybe<Scalars['String']>;
  displayName_gt?: InputMaybe<Scalars['String']>;
  displayName_lt?: InputMaybe<Scalars['String']>;
  displayName_gte?: InputMaybe<Scalars['String']>;
  displayName_lte?: InputMaybe<Scalars['String']>;
  displayName_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_contains?: InputMaybe<Scalars['String']>;
  displayName_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  displayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  displayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  displayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  operatorOf_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  operators?: InputMaybe<Array<Scalars['String']>>;
  operators_not?: InputMaybe<Array<Scalars['String']>>;
  operators_contains?: InputMaybe<Array<Scalars['String']>>;
  operators_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  operators_not_contains?: InputMaybe<Array<Scalars['String']>>;
  operators_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  operators_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  balance?: InputMaybe<Scalars['BigInt']>;
  balance_not?: InputMaybe<Scalars['BigInt']>;
  balance_gt?: InputMaybe<Scalars['BigInt']>;
  balance_lt?: InputMaybe<Scalars['BigInt']>;
  balance_gte?: InputMaybe<Scalars['BigInt']>;
  balance_lte?: InputMaybe<Scalars['BigInt']>;
  balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curationApproval?: InputMaybe<Scalars['BigInt']>;
  curationApproval_not?: InputMaybe<Scalars['BigInt']>;
  curationApproval_gt?: InputMaybe<Scalars['BigInt']>;
  curationApproval_lt?: InputMaybe<Scalars['BigInt']>;
  curationApproval_gte?: InputMaybe<Scalars['BigInt']>;
  curationApproval_lte?: InputMaybe<Scalars['BigInt']>;
  curationApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curationApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakingApproval?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_not?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_gt?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_lt?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_gte?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_lte?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakingApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gnsApproval?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_not?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_gt?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_lt?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_gte?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_lte?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gnsApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphs_?: InputMaybe<ANALYTICS__Subgraph_filter>;
  developerCreatedAt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_not?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_gt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_lt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_gte?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_lte?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  developerCreatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<ANALYTICS__Curator_filter>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  nameSignalTransactions_?: InputMaybe<ANALYTICS__NameSignalTransaction_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__GraphAccount_orderBy =
  | 'id'
  | 'names'
  | 'defaultName'
  | 'createdAt'
  | 'defaultDisplayName'
  | 'isOrganization'
  | 'metadataHash'
  | 'codeRepository'
  | 'description'
  | 'image'
  | 'website'
  | 'displayName'
  | 'operatorOf'
  | 'operators'
  | 'balance'
  | 'curationApproval'
  | 'stakingApproval'
  | 'gnsApproval'
  | 'subgraphs'
  | 'developerCreatedAt'
  | 'curator'
  | 'indexer'
  | 'delegator'
  | 'nameSignalTransactions';

/**
 * Graph Network global parameters and contract addresses
 *
 */
export type ANALYTICS__GraphNetwork = {
  /** ID is set to 1 */
  id: Scalars['ID'];
  /** Ratio of max staked delegation tokens to indexers stake that earns rewards */
  delegationRatio: Scalars['Int'];
  /** The total amount of GRT staked in the staking contract */
  totalTokensStaked: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Total tokens that are settled and waiting to be claimed */
  totalTokensClaimable: Scalars['BigInt'];
  /** Total tokens that are currently locked or withdrawable in the network from unstaking */
  totalUnstakedTokensLocked: Scalars['BigInt'];
  /** Total GRT currently in allocation */
  totalTokensAllocated: Scalars['BigInt'];
  /** Total delegated tokens in the protocol */
  totalDelegatedTokens: Scalars['BigInt'];
  /** Total query fees generated in the network */
  totalQueryFees: Scalars['BigInt'];
  /** Total query fees collected by indexers */
  totalIndexerQueryFeesCollected: Scalars['BigInt'];
  /** Total query fees rebates claimed by indexers */
  totalIndexerQueryFeeRebates: Scalars['BigInt'];
  /** Total query fees rebates claimed by delegators */
  totalDelegatorQueryFeeRebates: Scalars['BigInt'];
  /** Total query fees payed to curators */
  totalCuratorQueryFees: Scalars['BigInt'];
  /** Total protocol taxes applied to the query fees */
  totalTaxedQueryFees: Scalars['BigInt'];
  /** Total unclaimed rebates. Includes unclaimed rebates and rebates lost in cobbs douglas  */
  totalUnclaimedQueryFeeRebates: Scalars['BigInt'];
  /** Total indexing rewards minted */
  totalIndexingRewards: Scalars['BigInt'];
  /** Total indexing rewards minted to Delegators */
  totalIndexingDelegatorRewards: Scalars['BigInt'];
  /** Total indexing rewards minted to Indexers */
  totalIndexingIndexerRewards: Scalars['BigInt'];
  /** The total amount of GRT signalled in the Curation contract */
  totalTokensSignalled: Scalars['BigInt'];
  /** Default reserve ratio for all subgraphs. In parts per million */
  defaultReserveRatio: Scalars['Int'];
  /** Total indexers */
  indexerCount: Scalars['Int'];
  /** Number of indexers that currently have some stake in the protocol */
  stakedIndexersCount: Scalars['Int'];
  /** Total delegators */
  delegatorCount: Scalars['Int'];
  /** Total curators */
  curatorCount: Scalars['Int'];
  /** Total subgraphs */
  subgraphCount: Scalars['Int'];
  /** Total subgraphs */
  subgraphDeploymentCount: Scalars['Int'];
};

export type ANALYTICS__GraphNetworkDailyData = {
  /** <SUBGRAPH ID>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that the daily data entity tracks */
  network: ANALYTICS__GraphNetwork;
  /** [CUMULATIVE] Ratio of max staked delegation tokens to indexers stake that earns rewards */
  delegationRatio: Scalars['Int'];
  /** [CUMULATIVE] The total amount of GRT staked in the staking contract */
  totalTokensStaked: Scalars['BigInt'];
  /** [CUMULATIVE] Total tokens that are currently locked or withdrawable in the network from unstaking */
  totalUnstakedTokensLocked: Scalars['BigInt'];
  /** [CUMULATIVE] Total GRT currently in allocation */
  totalTokensAllocated: Scalars['BigInt'];
  /** [CUMULATIVE] Total delegated tokens in the protocol */
  totalDelegatedTokens: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees generated in the network */
  totalQueryFees: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees collected by indexers */
  totalIndexerQueryFeesCollected: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees rebates claimed by indexers */
  totalIndexerQueryFeeRebates: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees rebates claimed by delegators */
  totalDelegatorQueryFeeRebates: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees payed to curators */
  totalCuratorQueryFees: Scalars['BigInt'];
  /** [CUMULATIVE] Total protocol taxes applied to the query fees */
  totalTaxedQueryFees: Scalars['BigInt'];
  /** [CUMULATIVE] Total unclaimed rebates. Includes unclaimed rebates and rebates lost in cobbs douglas  */
  totalUnclaimedQueryFeeRebates: Scalars['BigInt'];
  /** [CUMULATIVE] Total indexing rewards minted */
  totalIndexingRewards: Scalars['BigInt'];
  /** [CUMULATIVE] Total indexing rewards minted to Delegators */
  totalIndexingDelegatorRewards: Scalars['BigInt'];
  /** [CUMULATIVE] Total indexing rewards minted to Indexers */
  totalIndexingIndexerRewards: Scalars['BigInt'];
  /** [CUMULATIVE] The total amount of GRT signalled in the Curation contract */
  totalTokensSignalled: Scalars['BigInt'];
  /** [CUMULATIVE] Default reserve ratio for all subgraphs. In parts per million */
  defaultReserveRatio: Scalars['Int'];
  /** [CUMULATIVE] Total indexers */
  indexerCount: Scalars['Int'];
  /** [CUMULATIVE] Number of indexers that currently have some stake in the protocol */
  stakedIndexersCount: Scalars['Int'];
  /** [CUMULATIVE] Total delegators */
  delegatorCount: Scalars['Int'];
  /** [CUMULATIVE] Total curators */
  curatorCount: Scalars['Int'];
  /** [CUMULATIVE] Total subgraphs */
  subgraphCount: Scalars['Int'];
  /** [CUMULATIVE] Total subgraphs */
  subgraphDeploymentCount: Scalars['Int'];
};

export type ANALYTICS__GraphNetworkDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  network?: InputMaybe<Scalars['String']>;
  network_not?: InputMaybe<Scalars['String']>;
  network_gt?: InputMaybe<Scalars['String']>;
  network_lt?: InputMaybe<Scalars['String']>;
  network_gte?: InputMaybe<Scalars['String']>;
  network_lte?: InputMaybe<Scalars['String']>;
  network_in?: InputMaybe<Array<Scalars['String']>>;
  network_not_in?: InputMaybe<Array<Scalars['String']>>;
  network_contains?: InputMaybe<Scalars['String']>;
  network_contains_nocase?: InputMaybe<Scalars['String']>;
  network_not_contains?: InputMaybe<Scalars['String']>;
  network_not_contains_nocase?: InputMaybe<Scalars['String']>;
  network_starts_with?: InputMaybe<Scalars['String']>;
  network_starts_with_nocase?: InputMaybe<Scalars['String']>;
  network_not_starts_with?: InputMaybe<Scalars['String']>;
  network_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  network_ends_with?: InputMaybe<Scalars['String']>;
  network_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_not_ends_with?: InputMaybe<Scalars['String']>;
  network_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_?: InputMaybe<ANALYTICS__GraphNetwork_filter>;
  delegationRatio?: InputMaybe<Scalars['Int']>;
  delegationRatio_not?: InputMaybe<Scalars['Int']>;
  delegationRatio_gt?: InputMaybe<Scalars['Int']>;
  delegationRatio_lt?: InputMaybe<Scalars['Int']>;
  delegationRatio_gte?: InputMaybe<Scalars['Int']>;
  delegationRatio_lte?: InputMaybe<Scalars['Int']>;
  delegationRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalTokensStaked?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensStaked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  defaultReserveRatio?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_not?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultReserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount?: InputMaybe<Scalars['Int']>;
  indexerCount_not?: InputMaybe<Scalars['Int']>;
  indexerCount_gt?: InputMaybe<Scalars['Int']>;
  indexerCount_lt?: InputMaybe<Scalars['Int']>;
  indexerCount_gte?: InputMaybe<Scalars['Int']>;
  indexerCount_lte?: InputMaybe<Scalars['Int']>;
  indexerCount_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_not?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount?: InputMaybe<Scalars['Int']>;
  delegatorCount_not?: InputMaybe<Scalars['Int']>;
  delegatorCount_gt?: InputMaybe<Scalars['Int']>;
  delegatorCount_lt?: InputMaybe<Scalars['Int']>;
  delegatorCount_gte?: InputMaybe<Scalars['Int']>;
  delegatorCount_lte?: InputMaybe<Scalars['Int']>;
  delegatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount?: InputMaybe<Scalars['Int']>;
  curatorCount_not?: InputMaybe<Scalars['Int']>;
  curatorCount_gt?: InputMaybe<Scalars['Int']>;
  curatorCount_lt?: InputMaybe<Scalars['Int']>;
  curatorCount_gte?: InputMaybe<Scalars['Int']>;
  curatorCount_lte?: InputMaybe<Scalars['Int']>;
  curatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount?: InputMaybe<Scalars['Int']>;
  subgraphCount_not?: InputMaybe<Scalars['Int']>;
  subgraphCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_not?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__GraphNetworkDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'network'
  | 'delegationRatio'
  | 'totalTokensStaked'
  | 'totalUnstakedTokensLocked'
  | 'totalTokensAllocated'
  | 'totalDelegatedTokens'
  | 'totalQueryFees'
  | 'totalIndexerQueryFeesCollected'
  | 'totalIndexerQueryFeeRebates'
  | 'totalDelegatorQueryFeeRebates'
  | 'totalCuratorQueryFees'
  | 'totalTaxedQueryFees'
  | 'totalUnclaimedQueryFeeRebates'
  | 'totalIndexingRewards'
  | 'totalIndexingDelegatorRewards'
  | 'totalIndexingIndexerRewards'
  | 'totalTokensSignalled'
  | 'defaultReserveRatio'
  | 'indexerCount'
  | 'stakedIndexersCount'
  | 'delegatorCount'
  | 'curatorCount'
  | 'subgraphCount'
  | 'subgraphDeploymentCount';

export type ANALYTICS__GraphNetwork_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  delegationRatio?: InputMaybe<Scalars['Int']>;
  delegationRatio_not?: InputMaybe<Scalars['Int']>;
  delegationRatio_gt?: InputMaybe<Scalars['Int']>;
  delegationRatio_lt?: InputMaybe<Scalars['Int']>;
  delegationRatio_gte?: InputMaybe<Scalars['Int']>;
  delegationRatio_lte?: InputMaybe<Scalars['Int']>;
  delegationRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalTokensStaked?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensStaked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensClaimable?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensClaimable_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  defaultReserveRatio?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_not?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultReserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount?: InputMaybe<Scalars['Int']>;
  indexerCount_not?: InputMaybe<Scalars['Int']>;
  indexerCount_gt?: InputMaybe<Scalars['Int']>;
  indexerCount_lt?: InputMaybe<Scalars['Int']>;
  indexerCount_gte?: InputMaybe<Scalars['Int']>;
  indexerCount_lte?: InputMaybe<Scalars['Int']>;
  indexerCount_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_not?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount?: InputMaybe<Scalars['Int']>;
  delegatorCount_not?: InputMaybe<Scalars['Int']>;
  delegatorCount_gt?: InputMaybe<Scalars['Int']>;
  delegatorCount_lt?: InputMaybe<Scalars['Int']>;
  delegatorCount_gte?: InputMaybe<Scalars['Int']>;
  delegatorCount_lte?: InputMaybe<Scalars['Int']>;
  delegatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount?: InputMaybe<Scalars['Int']>;
  curatorCount_not?: InputMaybe<Scalars['Int']>;
  curatorCount_gt?: InputMaybe<Scalars['Int']>;
  curatorCount_lt?: InputMaybe<Scalars['Int']>;
  curatorCount_gte?: InputMaybe<Scalars['Int']>;
  curatorCount_lte?: InputMaybe<Scalars['Int']>;
  curatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount?: InputMaybe<Scalars['Int']>;
  subgraphCount_not?: InputMaybe<Scalars['Int']>;
  subgraphCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_not?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__GraphNetwork_orderBy =
  | 'id'
  | 'delegationRatio'
  | 'totalTokensStaked'
  | 'totalTokensClaimable'
  | 'totalUnstakedTokensLocked'
  | 'totalTokensAllocated'
  | 'totalDelegatedTokens'
  | 'totalQueryFees'
  | 'totalIndexerQueryFeesCollected'
  | 'totalIndexerQueryFeeRebates'
  | 'totalDelegatorQueryFeeRebates'
  | 'totalCuratorQueryFees'
  | 'totalTaxedQueryFees'
  | 'totalUnclaimedQueryFeeRebates'
  | 'totalIndexingRewards'
  | 'totalIndexingDelegatorRewards'
  | 'totalIndexingIndexerRewards'
  | 'totalTokensSignalled'
  | 'defaultReserveRatio'
  | 'indexerCount'
  | 'stakedIndexersCount'
  | 'delegatorCount'
  | 'curatorCount'
  | 'subgraphCount'
  | 'subgraphDeploymentCount';

/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type ANALYTICS__Indexer = {
  /** Eth address of Indexer */
  id: Scalars['ID'];
  /** Time this indexer was created */
  createdAt: Scalars['Int'];
  /** Service registry URL for the indexer */
  url?: Maybe<Scalars['String']>;
  /** Geohash of the indexer. Shows where their indexer is located in the world */
  geoHash?: Maybe<Scalars['String']>;
  account: ANALYTICS__GraphAccount;
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** CURRENT tokens staked in the protocol. Decreases on withdraw, not on lock */
  stakedTokens: Scalars['BigInt'];
  /** CURRENT  tokens allocated on all subgraphs */
  allocatedTokens: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Tokens that have been unstaked and withdrawn */
  unstakedTokens: Scalars['BigInt'];
  /** CURRENT tokens locked */
  lockedTokens: Scalars['BigInt'];
  /** The block when the Indexers tokens unlock */
  tokensLockedUntil: Scalars['Int'];
  /** Active allocations of stake for this Indexer */
  allocations: Array<ANALYTICS__Allocation>;
  /** All allocations of stake for this Indexer (i.e. closed and active) */
  totalAllocations: Array<ANALYTICS__Allocation>;
  /** Number of active allocations of stake for this Indexer */
  allocationCount: Scalars['Int'];
  /** All allocations for this Indexer (i.e. closed and active) */
  totalAllocationCount: Scalars['BigInt'];
  /** Total query fees collected. Includes the portion given to delegators */
  queryFeesCollected: Scalars['BigInt'];
  /** Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators */
  queryFeeRebates: Scalars['BigInt'];
  /** Total indexing rewards earned by this indexer from inflation. Including delegation rewards */
  rewardsEarned: Scalars['BigInt'];
  /** The total amount of indexing rewards the indexer kept */
  indexerIndexingRewards: Scalars['BigInt'];
  /** The total amount of indexing rewards given to delegators */
  delegatorIndexingRewards: Scalars['BigInt'];
  /** Percentage of indexers' own rewards received in relation to its own stake. 1 (100%) means that the indexer is receiving the exact amount that is generated by his own stake */
  indexerRewardsOwnGenerationRatio: Scalars['ANALYTICS__BigDecimal'];
  /** Amount of delegated tokens that can be eligible for rewards */
  delegatedCapacity: Scalars['BigInt'];
  /** Total token capacity = delegatedCapacity + stakedTokens */
  tokenCapacity: Scalars['BigInt'];
  /** Stake available to earn rewards. tokenCapacity - allocationTokens - lockedTokens */
  availableStake: Scalars['BigInt'];
  /** Delegators to this Indexer */
  delegators: Array<ANALYTICS__DelegatedStake>;
  /** CURRENT tokens delegated to the indexer */
  delegatedTokens: Scalars['BigInt'];
  /** Ratio between the amount of the indexers own stake over the total usable stake. */
  ownStakeRatio: Scalars['ANALYTICS__BigDecimal'];
  /** Ratio between the amount of delegated stake over the total usable stake. */
  delegatedStakeRatio: Scalars['ANALYTICS__BigDecimal'];
  /** Total shares of the delegator pool */
  delegatorShares: Scalars['BigInt'];
  /** Exchange rate of of tokens received for each share */
  delegationExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  /** The percent of indexing rewards generated by the total stake that the Indexer keeps for itself. In parts per million */
  indexingRewardCut: Scalars['Int'];
  /** The percent of indexing rewards generated by the delegated stake that the Indexer keeps for itself */
  indexingRewardEffectiveCut: Scalars['ANALYTICS__BigDecimal'];
  /** The percent of reward dilution delegators experience because of overdelegation. Overdelegated stake can't be used to generate rewards but still gets accounted while distributing the generated rewards. This causes dilution of the rewards for the rest of the pool. */
  overDelegationDilution: Scalars['ANALYTICS__BigDecimal'];
  /** The total amount of query fees given to delegators */
  delegatorQueryFees: Scalars['BigInt'];
  /** The percent of query rebate rewards the Indexer keeps for itself. In parts per million */
  queryFeeCut: Scalars['Int'];
  /** The percent of query rebate rewards generated by the delegated stake that the Indexer keeps for itself */
  queryFeeEffectiveCut: Scalars['ANALYTICS__BigDecimal'];
  /** Amount of blocks a delegator chooses for the waiting period for changing their params */
  delegatorParameterCooldown: Scalars['Int'];
  /** Block number for the last time the delegator updated their parameters */
  lastDelegationParameterUpdate: Scalars['Int'];
  /** Count of how many times this indexer has been forced to close an allocation */
  forcedClosures: Scalars['Int'];
  delegatorsCount: Scalars['BigInt'];
  dailyData: Array<ANALYTICS__IndexerDailyData>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type ANALYTICS__IndexerallocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type ANALYTICS__IndexertotalAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type ANALYTICS__IndexerdelegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type ANALYTICS__IndexerdailyDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__IndexerDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__IndexerDailyData_filter>;
};

export type ANALYTICS__IndexerDailyData = {
  /** <INDEXER ADDRESS>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that this daily data tracks */
  indexer: ANALYTICS__Indexer;
  /** [CURRENT] Value of stakedTokens for that day */
  stakedTokens: Scalars['BigInt'];
  /** [CURRENT] Value of delegatedTokens for that day */
  delegatedTokens: Scalars['BigInt'];
  /** [CURRENT] Value of allocatedTokens for that day */
  allocatedTokens: Scalars['BigInt'];
  /** [CURRENT] Value of availableStake for that day */
  availableStake: Scalars['BigInt'];
  /** [CURRENT] Amount of delegated tokens moved that day. Negative means more tokens were undelegated than delegated */
  netDailyDelegatedTokens: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of query fees collected by the indexer and sent to the rebate pool */
  queryFeesCollected: Scalars['BigInt'];
  /** [CUMULATIVE]Total amount of query fees that the indexer got from rebates */
  queryFeeRebates: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of query fees that the delegation pool received */
  delegatorQueryFees: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of indexing rewards generated on this indexer */
  totalIndexingRewards: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of indexing rewards that the indexer kept */
  indexerIndexingRewards: Scalars['BigInt'];
  /** [CUMULATIVE] Total amount of indexing rewards sent to the delegation pool */
  delegatorIndexingRewards: Scalars['BigInt'];
  /** [CURRENT] Exchange rate for shares of the delegation pool for this specific day */
  delegationExchangeRate: Scalars['ANALYTICS__BigDecimal'];
  delegatorsCount: Scalars['BigInt'];
};

export type ANALYTICS__IndexerDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedTokens?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake?: InputMaybe<Scalars['BigInt']>;
  availableStake_not?: InputMaybe<Scalars['BigInt']>;
  availableStake_gt?: InputMaybe<Scalars['BigInt']>;
  availableStake_lt?: InputMaybe<Scalars['BigInt']>;
  availableStake_gte?: InputMaybe<Scalars['BigInt']>;
  availableStake_lte?: InputMaybe<Scalars['BigInt']>;
  availableStake_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  netDailyDelegatedTokens?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  netDailyDelegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  netDailyDelegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegationExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegationExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatorsCount?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_not?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__IndexerDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'indexer'
  | 'stakedTokens'
  | 'delegatedTokens'
  | 'allocatedTokens'
  | 'availableStake'
  | 'netDailyDelegatedTokens'
  | 'queryFeesCollected'
  | 'queryFeeRebates'
  | 'delegatorQueryFees'
  | 'totalIndexingRewards'
  | 'indexerIndexingRewards'
  | 'delegatorIndexingRewards'
  | 'delegationExchangeRate'
  | 'delegatorsCount';

/**
 * Analytics
 *
 */
export type ANALYTICS__IndexerDelegatedStakeRelation = {
  /** Auxiliary entity to DelegatedStake to make it easier to batch update those delegations */
  id: Scalars['ID'];
  /** Indexer entity where the delegation resides */
  indexer: ANALYTICS__Indexer;
  /** Delegator entity owner of said delegation stake */
  delegator: ANALYTICS__Delegator;
  /** DelegatedStake entity that represents the delegation */
  stake: ANALYTICS__DelegatedStake;
  /** Whether the delegation is active or not. Useful to avoid updating non-active delegations without deleting the entity. */
  active: Scalars['Boolean'];
};

export type ANALYTICS__IndexerDelegatedStakeRelation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<ANALYTICS__Indexer_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<ANALYTICS__Delegator_filter>;
  stake?: InputMaybe<Scalars['String']>;
  stake_not?: InputMaybe<Scalars['String']>;
  stake_gt?: InputMaybe<Scalars['String']>;
  stake_lt?: InputMaybe<Scalars['String']>;
  stake_gte?: InputMaybe<Scalars['String']>;
  stake_lte?: InputMaybe<Scalars['String']>;
  stake_in?: InputMaybe<Array<Scalars['String']>>;
  stake_not_in?: InputMaybe<Array<Scalars['String']>>;
  stake_contains?: InputMaybe<Scalars['String']>;
  stake_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_not_contains?: InputMaybe<Scalars['String']>;
  stake_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stake_starts_with?: InputMaybe<Scalars['String']>;
  stake_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_starts_with?: InputMaybe<Scalars['String']>;
  stake_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stake_ends_with?: InputMaybe<Scalars['String']>;
  stake_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_not_ends_with?: InputMaybe<Scalars['String']>;
  stake_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stake_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__IndexerDelegatedStakeRelation_orderBy =
  | 'id'
  | 'indexer'
  | 'delegator'
  | 'stake'
  | 'active';

export type ANALYTICS__Indexer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  url?: InputMaybe<Scalars['String']>;
  url_not?: InputMaybe<Scalars['String']>;
  url_gt?: InputMaybe<Scalars['String']>;
  url_lt?: InputMaybe<Scalars['String']>;
  url_gte?: InputMaybe<Scalars['String']>;
  url_lte?: InputMaybe<Scalars['String']>;
  url_in?: InputMaybe<Array<Scalars['String']>>;
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_contains_nocase?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_contains_nocase?: InputMaybe<Scalars['String']>;
  url_starts_with?: InputMaybe<Scalars['String']>;
  url_starts_with_nocase?: InputMaybe<Scalars['String']>;
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  url_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  url_ends_with?: InputMaybe<Scalars['String']>;
  url_ends_with_nocase?: InputMaybe<Scalars['String']>;
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  url_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash?: InputMaybe<Scalars['String']>;
  geoHash_not?: InputMaybe<Scalars['String']>;
  geoHash_gt?: InputMaybe<Scalars['String']>;
  geoHash_lt?: InputMaybe<Scalars['String']>;
  geoHash_gte?: InputMaybe<Scalars['String']>;
  geoHash_lte?: InputMaybe<Scalars['String']>;
  geoHash_in?: InputMaybe<Array<Scalars['String']>>;
  geoHash_not_in?: InputMaybe<Array<Scalars['String']>>;
  geoHash_contains?: InputMaybe<Scalars['String']>;
  geoHash_contains_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_contains?: InputMaybe<Scalars['String']>;
  geoHash_not_contains_nocase?: InputMaybe<Scalars['String']>;
  geoHash_starts_with?: InputMaybe<Scalars['String']>;
  geoHash_starts_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_starts_with?: InputMaybe<Scalars['String']>;
  geoHash_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_ends_with?: InputMaybe<Scalars['String']>;
  geoHash_ends_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_ends_with?: InputMaybe<Scalars['String']>;
  geoHash_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensLockedUntil?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_not?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_lt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_lte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_in?: InputMaybe<Array<Scalars['Int']>>;
  tokensLockedUntil_not_in?: InputMaybe<Array<Scalars['Int']>>;
  allocations_?: InputMaybe<ANALYTICS__Allocation_filter>;
  totalAllocations_?: InputMaybe<ANALYTICS__Allocation_filter>;
  allocationCount?: InputMaybe<Scalars['Int']>;
  allocationCount_not?: InputMaybe<Scalars['Int']>;
  allocationCount_gt?: InputMaybe<Scalars['Int']>;
  allocationCount_lt?: InputMaybe<Scalars['Int']>;
  allocationCount_gte?: InputMaybe<Scalars['Int']>;
  allocationCount_lte?: InputMaybe<Scalars['Int']>;
  allocationCount_in?: InputMaybe<Array<Scalars['Int']>>;
  allocationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalAllocationCount?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_not?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_gt?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_lt?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_gte?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_lte?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalAllocationCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rewardsEarned?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_not?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_gt?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_lt?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_gte?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_lte?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rewardsEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerRewardsOwnGenerationRatio?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  indexerRewardsOwnGenerationRatio_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatedCapacity?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_not?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_gt?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_lt?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_gte?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_lte?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedCapacity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCapacity?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_not?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCapacity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake?: InputMaybe<Scalars['BigInt']>;
  availableStake_not?: InputMaybe<Scalars['BigInt']>;
  availableStake_gt?: InputMaybe<Scalars['BigInt']>;
  availableStake_lt?: InputMaybe<Scalars['BigInt']>;
  availableStake_gte?: InputMaybe<Scalars['BigInt']>;
  availableStake_lte?: InputMaybe<Scalars['BigInt']>;
  availableStake_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegators_?: InputMaybe<ANALYTICS__DelegatedStake_filter>;
  delegatedTokens?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  ownStakeRatio?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  ownStakeRatio_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  ownStakeRatio_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatedStakeRatio?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegatedStakeRatio_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatedStakeRatio_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatorShares?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_not?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorShares_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegationExchangeRate?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  delegationExchangeRate_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegationExchangeRate_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  indexingRewardCut?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_not?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_gt?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_lt?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_gte?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_lte?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardCut_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardEffectiveCut?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  indexingRewardEffectiveCut_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  indexingRewardEffectiveCut_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  overDelegationDilution?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  overDelegationDilution_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  overDelegationDilution_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeCut?: InputMaybe<Scalars['Int']>;
  queryFeeCut_not?: InputMaybe<Scalars['Int']>;
  queryFeeCut_gt?: InputMaybe<Scalars['Int']>;
  queryFeeCut_lt?: InputMaybe<Scalars['Int']>;
  queryFeeCut_gte?: InputMaybe<Scalars['Int']>;
  queryFeeCut_lte?: InputMaybe<Scalars['Int']>;
  queryFeeCut_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeCut_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeEffectiveCut?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  queryFeeEffectiveCut_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  queryFeeEffectiveCut_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  delegatorParameterCooldown?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_not?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_gt?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_lt?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_gte?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_lte?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorParameterCooldown_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegationParameterUpdate?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_not?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_gt?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_lt?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_gte?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_lte?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegationParameterUpdate_not_in?: InputMaybe<Array<Scalars['Int']>>;
  forcedClosures?: InputMaybe<Scalars['Int']>;
  forcedClosures_not?: InputMaybe<Scalars['Int']>;
  forcedClosures_gt?: InputMaybe<Scalars['Int']>;
  forcedClosures_lt?: InputMaybe<Scalars['Int']>;
  forcedClosures_gte?: InputMaybe<Scalars['Int']>;
  forcedClosures_lte?: InputMaybe<Scalars['Int']>;
  forcedClosures_in?: InputMaybe<Array<Scalars['Int']>>;
  forcedClosures_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorsCount?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_not?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dailyData_?: InputMaybe<ANALYTICS__IndexerDailyData_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Indexer_orderBy =
  | 'id'
  | 'createdAt'
  | 'url'
  | 'geoHash'
  | 'account'
  | 'defaultDisplayName'
  | 'stakedTokens'
  | 'allocatedTokens'
  | 'unstakedTokens'
  | 'lockedTokens'
  | 'tokensLockedUntil'
  | 'allocations'
  | 'totalAllocations'
  | 'allocationCount'
  | 'totalAllocationCount'
  | 'queryFeesCollected'
  | 'queryFeeRebates'
  | 'rewardsEarned'
  | 'indexerIndexingRewards'
  | 'delegatorIndexingRewards'
  | 'indexerRewardsOwnGenerationRatio'
  | 'delegatedCapacity'
  | 'tokenCapacity'
  | 'availableStake'
  | 'delegators'
  | 'delegatedTokens'
  | 'ownStakeRatio'
  | 'delegatedStakeRatio'
  | 'delegatorShares'
  | 'delegationExchangeRate'
  | 'indexingRewardCut'
  | 'indexingRewardEffectiveCut'
  | 'overDelegationDilution'
  | 'delegatorQueryFees'
  | 'queryFeeCut'
  | 'queryFeeEffectiveCut'
  | 'delegatorParameterCooldown'
  | 'lastDelegationParameterUpdate'
  | 'forcedClosures'
  | 'delegatorsCount'
  | 'dailyData';

/**
 * Curator Name Signal for a single Subgraph
 *
 */
export type ANALYTICS__NameSignal = {
  /** Eth address + subgraph ID */
  id: Scalars['ID'];
  /** Eth address of the curator */
  curator: ANALYTICS__Curator;
  /** Subgraph being signalled */
  subgraph: ANALYTICS__Subgraph;
  /** CUMULATIVE number of tokens the curator has signalled */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE number of tokens the curator has unsignalled */
  unsignalledTokens: Scalars['BigInt'];
  /** Tokens the curator has withdrawn from a deprecated name curve */
  withdrawnTokens: Scalars['BigInt'];
  /** Signal that the curator has from signaling their GRT */
  nameSignal: Scalars['BigInt'];
  /** Block for which the curator last entered or exited the curve */
  lastNameSignalChange: Scalars['Int'];
  /** Summation of realized rewards from before the last time the curator entered the curation curve */
  realizedRewards: Scalars['BigInt'];
  /** Curator average cost basis for this name signal on this subgraph */
  averageCostBasis: Scalars['ANALYTICS__BigDecimal'];
  /** averageCostBasis / nameSignal */
  averageCostBasisPerSignal: Scalars['ANALYTICS__BigDecimal'];
  entityVersion: Scalars['Int'];
  linkedEntity?: Maybe<ANALYTICS__NameSignal>;
};

/**
 * All relevant data for a Name Signal Transaction in The Graph Network
 *
 */
export type ANALYTICS__NameSignalTransaction = ANALYTICS__Transaction & {
  id: Scalars['ID'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  signer: ANALYTICS__GraphAccount;
  type: ANALYTICS__TransactionType;
  /** Amount of name signal updated */
  nameSignal: Scalars['BigInt'];
  /** Amount of version signal updated */
  versionSignal: Scalars['BigInt'];
  /** Tokens used */
  tokens: Scalars['BigInt'];
  /** Subgraph where name signal was updated */
  subgraph: ANALYTICS__Subgraph;
};

export type ANALYTICS__NameSignalTransaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  type?: InputMaybe<ANALYTICS__TransactionType>;
  type_not?: InputMaybe<ANALYTICS__TransactionType>;
  type_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  type_not_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  nameSignal?: InputMaybe<Scalars['BigInt']>;
  nameSignal_not?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionSignal?: InputMaybe<Scalars['BigInt']>;
  versionSignal_not?: InputMaybe<Scalars['BigInt']>;
  versionSignal_gt?: InputMaybe<Scalars['BigInt']>;
  versionSignal_lt?: InputMaybe<Scalars['BigInt']>;
  versionSignal_gte?: InputMaybe<Scalars['BigInt']>;
  versionSignal_lte?: InputMaybe<Scalars['BigInt']>;
  versionSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens?: InputMaybe<Scalars['BigInt']>;
  tokens_not?: InputMaybe<Scalars['BigInt']>;
  tokens_gt?: InputMaybe<Scalars['BigInt']>;
  tokens_lt?: InputMaybe<Scalars['BigInt']>;
  tokens_gte?: InputMaybe<Scalars['BigInt']>;
  tokens_lte?: InputMaybe<Scalars['BigInt']>;
  tokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<ANALYTICS__Subgraph_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__NameSignalTransaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type'
  | 'nameSignal'
  | 'versionSignal'
  | 'tokens'
  | 'subgraph';

export type ANALYTICS__NameSignal_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<ANALYTICS__Curator_filter>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<ANALYTICS__Subgraph_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal?: InputMaybe<Scalars['BigInt']>;
  nameSignal_not?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lastNameSignalChange?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_not?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_gt?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_lt?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_gte?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_lte?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_in?: InputMaybe<Array<Scalars['Int']>>;
  lastNameSignalChange_not_in?: InputMaybe<Array<Scalars['Int']>>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  averageCostBasis?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasis_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  averageCostBasis_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  averageCostBasisPerSignal?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  averageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  averageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<ANALYTICS__NameSignal_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__NameSignal_orderBy =
  | 'id'
  | 'curator'
  | 'subgraph'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'withdrawnTokens'
  | 'nameSignal'
  | 'lastNameSignalChange'
  | 'realizedRewards'
  | 'averageCostBasis'
  | 'averageCostBasisPerSignal'
  | 'entityVersion'
  | 'linkedEntity';

export type ANALYTICS__NameSystem =
  | 'ENS';

/** Defines the order direction, either ascending or descending */
export type ANALYTICS__OrderDirection =
  | 'asc'
  | 'desc';

/**
 * Global pool of query fees for closed state channels. Each Epoch has a single pool,
 * hence why they share the same IDs.
 *
 */
export type ANALYTICS__Pool = {
  /** Epoch number of the pool */
  id: Scalars['ID'];
  /** Total effective allocation tokens from all allocations closed in this epoch */
  allocation: Scalars['BigInt'];
  /** Total query fees collected in this epoch */
  totalQueryFees: Scalars['BigInt'];
  /** Total query fees claimed in this epoch. Can be smaller than totalFees because of cobbs douglas function  */
  claimedFees: Scalars['BigInt'];
  /** Total rewards from query fees deposited to all curator bonding curves during the epoch */
  curatorRewards: Scalars['BigInt'];
  /** Allocations that were closed during this epoch */
  closedAllocations: Array<ANALYTICS__Allocation>;
};


/**
 * Global pool of query fees for closed state channels. Each Epoch has a single pool,
 * hence why they share the same IDs.
 *
 */
export type ANALYTICS__PoolclosedAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
};

export type ANALYTICS__Pool_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  allocation?: InputMaybe<Scalars['BigInt']>;
  allocation_not?: InputMaybe<Scalars['BigInt']>;
  allocation_gt?: InputMaybe<Scalars['BigInt']>;
  allocation_lt?: InputMaybe<Scalars['BigInt']>;
  allocation_gte?: InputMaybe<Scalars['BigInt']>;
  allocation_lte?: InputMaybe<Scalars['BigInt']>;
  allocation_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocation_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  claimedFees?: InputMaybe<Scalars['BigInt']>;
  claimedFees_not?: InputMaybe<Scalars['BigInt']>;
  claimedFees_gt?: InputMaybe<Scalars['BigInt']>;
  claimedFees_lt?: InputMaybe<Scalars['BigInt']>;
  claimedFees_gte?: InputMaybe<Scalars['BigInt']>;
  claimedFees_lte?: InputMaybe<Scalars['BigInt']>;
  claimedFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  claimedFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  closedAllocations_?: InputMaybe<ANALYTICS__Allocation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Pool_orderBy =
  | 'id'
  | 'allocation'
  | 'totalQueryFees'
  | 'claimedFees'
  | 'curatorRewards'
  | 'closedAllocations';

/**
 * Curator Signal for a single SubgraphDeployment
 *
 */
export type ANALYTICS__Signal = {
  /** Eth address + subgraph deployment ID */
  id: Scalars['ID'];
  /** Eth address of the curator */
  curator: ANALYTICS__Curator;
  /** Subgraph being signalled */
  subgraphDeployment: ANALYTICS__SubgraphDeployment;
  /** CUMULATIVE number of tokens the curator has signalled */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE number of tokens the curator has unsignalled */
  unsignalledTokens: Scalars['BigInt'];
  /** Signal that the curator has from signaling their GRT */
  signal: Scalars['BigInt'];
  /** Block for which the curator last entered or exited the curve */
  lastSignalChange: Scalars['Int'];
  /** Summation of realized rewards from before the last time the curator entered the curation curve */
  realizedRewards: Scalars['BigInt'];
};

/**
 * All relevant data for a Signal Transaction in The Graph Network
 *
 */
export type ANALYTICS__SignalTransaction = ANALYTICS__Transaction & {
  id: Scalars['ID'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  signer: ANALYTICS__GraphAccount;
  type: ANALYTICS__TransactionType;
  /** Amount of signal updated */
  signal: Scalars['BigInt'];
  /** Tokens used */
  tokens: Scalars['BigInt'];
  /** Subgraph where signal was updated */
  subgraphDeployment: ANALYTICS__SubgraphDeployment;
  /** Withdrawal fees. On minting only */
  withdrawalFees: Scalars['BigInt'];
};

export type ANALYTICS__SignalTransaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  type?: InputMaybe<ANALYTICS__TransactionType>;
  type_not?: InputMaybe<ANALYTICS__TransactionType>;
  type_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  type_not_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  signal?: InputMaybe<Scalars['BigInt']>;
  signal_not?: InputMaybe<Scalars['BigInt']>;
  signal_gt?: InputMaybe<Scalars['BigInt']>;
  signal_lt?: InputMaybe<Scalars['BigInt']>;
  signal_gte?: InputMaybe<Scalars['BigInt']>;
  signal_lte?: InputMaybe<Scalars['BigInt']>;
  signal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens?: InputMaybe<Scalars['BigInt']>;
  tokens_not?: InputMaybe<Scalars['BigInt']>;
  tokens_gt?: InputMaybe<Scalars['BigInt']>;
  tokens_lt?: InputMaybe<Scalars['BigInt']>;
  tokens_gte?: InputMaybe<Scalars['BigInt']>;
  tokens_lte?: InputMaybe<Scalars['BigInt']>;
  tokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  withdrawalFees?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_not?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawalFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__SignalTransaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type'
  | 'signal'
  | 'tokens'
  | 'subgraphDeployment'
  | 'withdrawalFees';

export type ANALYTICS__Signal_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<ANALYTICS__Curator_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal?: InputMaybe<Scalars['BigInt']>;
  signal_not?: InputMaybe<Scalars['BigInt']>;
  signal_gt?: InputMaybe<Scalars['BigInt']>;
  signal_lt?: InputMaybe<Scalars['BigInt']>;
  signal_gte?: InputMaybe<Scalars['BigInt']>;
  signal_lte?: InputMaybe<Scalars['BigInt']>;
  signal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lastSignalChange?: InputMaybe<Scalars['Int']>;
  lastSignalChange_not?: InputMaybe<Scalars['Int']>;
  lastSignalChange_gt?: InputMaybe<Scalars['Int']>;
  lastSignalChange_lt?: InputMaybe<Scalars['Int']>;
  lastSignalChange_gte?: InputMaybe<Scalars['Int']>;
  lastSignalChange_lte?: InputMaybe<Scalars['Int']>;
  lastSignalChange_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSignalChange_not_in?: InputMaybe<Array<Scalars['Int']>>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Signal_orderBy =
  | 'id'
  | 'curator'
  | 'subgraphDeployment'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'signal'
  | 'lastSignalChange'
  | 'realizedRewards';

/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type ANALYTICS__Subgraph = {
  /** Subgraph ID - which is derived from the Organization/Individual graph accountID */
  id: Scalars['ID'];
  /** Graph account that owns this subgraph */
  owner: ANALYTICS__GraphAccount;
  /** Current version */
  currentVersion?: Maybe<ANALYTICS__SubgraphVersion>;
  /** [DEPRECATED] Past versions. Has the same data as 'versions' but keeps the old naming for backwards compatibility */
  pastVersions: Array<ANALYTICS__SubgraphVersion>;
  /** List of all the subgraph versions included the current one */
  versions: Array<ANALYTICS__SubgraphVersion>;
  /** Version counter */
  versionCount: Scalars['BigInt'];
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** Updated timestamp */
  updatedAt: Scalars['Int'];
  /** Whether the subgraph is active or deprecated */
  active: Scalars['Boolean'];
  /** Whether the subgraph has been migrated to the NFT implementation */
  migrated: Scalars['Boolean'];
  /** Auxiliary field to denote whether the subgraph is handling the initialization order on V2 events. Doesn't matter for V1 events. */
  initializing: Scalars['Boolean'];
  /** The actual ID of the subgraph on the contracts subgraph NFT implementation. BigInt represented as a String. It's only actually valid once the subgraph is migrated (migrated == true) */
  nftID: Scalars['String'];
  /** ID of the subgraph that was used on the old version of this The Graph Network Subgraph. Null for Subgraphs created with the new GNS implementation */
  oldID?: Maybe<Scalars['String']>;
  /** Address used to create the ID. Only available for Subgraphs created pre-migration */
  creatorAddress?: Maybe<Scalars['ANALYTICS__Bytes']>;
  /** Subgraph number used to create the ID. Only available for Subgraphs created pre-migration */
  subgraphNumber?: Maybe<Scalars['BigInt']>;
  /** Version of the entity. Subgraph entities are changing the way their ID is generated when the new GNS v2 rolls out so we need to differnetiate them */
  entityVersion: Scalars['Int'];
  /** Subgraph entities might have 'duplicate' entities so that old IDs can be persisted and still queried properly. If that happens we have to link both duplicate entities to be able to update them properly. */
  linkedEntity?: Maybe<ANALYTICS__Subgraph>;
  /** CUMULATIVE signaled tokens on this subgraph all time */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE unsignalled tokens on this subgraph all time */
  unsignalledTokens: Scalars['BigInt'];
  /** The CURRENT name signal amount for this subgraph */
  nameSignalAmount: Scalars['BigInt'];
  /** Reserve ratio of the name curation curve. In parts per million */
  reserveRatio: Scalars['Int'];
  /** Tokens that can be withdrawn once the Subgraph is deprecated */
  withdrawableTokens: Scalars['BigInt'];
  /** Tokens the curators have withdrawn from the deprecated Subgraph */
  withdrawnTokens: Scalars['BigInt'];
  /** Curators of this subgraph deployment */
  nameSignals: Array<ANALYTICS__NameSignal>;
  /** Subgraph metadata */
  metadataHash?: Maybe<Scalars['ANALYTICS__Bytes']>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type ANALYTICS__SubgraphpastVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type ANALYTICS__SubgraphversionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type ANALYTICS__SubgraphnameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__NameSignal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__NameSignal_filter>;
};

/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type ANALYTICS__SubgraphDeployment = {
  /** Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes */
  id: Scalars['ID'];
  /** The versions this subgraph deployment relates to */
  versions: Array<ANALYTICS__SubgraphVersion>;
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** The block at which this deployment was denied for rewards. Null if not denied */
  deniedAt: Scalars['Int'];
  /** CURRENT total stake of all indexers on this Subgraph Deployment */
  stakedTokens: Scalars['BigInt'];
  /** Allocations created by indexers for this Subgraph */
  indexerAllocations: Array<ANALYTICS__Allocation>;
  /** Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards */
  indexingRewardAmount: Scalars['BigInt'];
  /** Total rewards accrued all time by indexers */
  indexingIndexerRewardAmount: Scalars['BigInt'];
  /** Total rewards accrued all time by delegators */
  indexingDelegatorRewardAmount: Scalars['BigInt'];
  /** Total query fees earned by this Subgraph Deployment, without curator query fees */
  queryFeesAmount: Scalars['BigInt'];
  /** Total query fee rebates for indexers earned from the protocol, through the cobbs douglas formula. */
  queryFeeRebates: Scalars['BigInt'];
  /** Total query fee rebates for delegators earned from the protocol, through the cobbs douglas formula. */
  delegatorQueryFees: Scalars['BigInt'];
  /** Total curator rewards from fees */
  curatorFeeRewards: Scalars['BigInt'];
  /** CURRENT signalled tokens in the bonding curve */
  signalledTokens: Scalars['BigInt'];
  /** NOT IMPLEMENTED - CURRENT signalled tokens in the bonding curve */
  unsignalledTokens: Scalars['BigInt'];
  /** CURRENT curation signal for this subgraph deployment */
  signalAmount: Scalars['BigInt'];
  /** signalledTokens / signalAmount */
  pricePerShare: Scalars['ANALYTICS__BigDecimal'];
  /** Curators of this subgraph deployment */
  curatorSignals: Array<ANALYTICS__Signal>;
  /** Bonding curve reserve ratio. In parts per million */
  reserveRatio: Scalars['Int'];
  dailyData: Array<ANALYTICS__SubgraphDeploymentDailyData>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type ANALYTICS__SubgraphDeploymentversionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type ANALYTICS__SubgraphDeploymentindexerAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Allocation_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Allocation_filter>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type ANALYTICS__SubgraphDeploymentcuratorSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__Signal_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__Signal_filter>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type ANALYTICS__SubgraphDeploymentdailyDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_orderBy>;
  orderDirection?: InputMaybe<ANALYTICS__OrderDirection>;
  where?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_filter>;
};

export type ANALYTICS__SubgraphDeploymentDailyData = {
  /** <SUBGRAPH ID>-<DAY NUMBER> */
  id: Scalars['ID'];
  /** Timestamp for the start of the day that this entity represents. UTC+0 */
  dayStart: Scalars['BigInt'];
  /** Timestamp for the end of the day that this entity represents. UTC+0 */
  dayEnd: Scalars['BigInt'];
  /** Number of the day this entity represents. Day 0 is the network launch day. */
  dayNumber: Scalars['Int'];
  /** Original entity that the daily data entity tracks */
  subgraphDeployment: ANALYTICS__SubgraphDeployment;
  /** [CURRENT] Amount of allocated/staked tokens on this deployment at this specific day */
  stakedTokens: Scalars['BigInt'];
  /** [CURRENT] Amount of signalled tokens on this deployment at this specific day */
  signalledTokens: Scalars['BigInt'];
  /** [CURRENT] Amount of signal on this deployment at this specific day */
  signalAmount: Scalars['BigInt'];
  /** [CURRENT] Value of pricePerShare for the original entity at this specific day */
  pricePerShare: Scalars['ANALYTICS__BigDecimal'];
  /** [CUMULATIVE] Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards */
  indexingRewardAmount: Scalars['BigInt'];
  /** [CUMULATIVE] Total rewards accrued all time by indexers */
  indexingIndexerRewardAmount: Scalars['BigInt'];
  /** [CUMULATIVE] Total rewards accrued all time by delegators */
  indexingDelegatorRewardAmount: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fees earned by this Subgraph Deployment, without curator query fees */
  queryFeesAmount: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fee rebates for indexers earned from the protocol, through the cobbs douglas formula. */
  queryFeeRebates: Scalars['BigInt'];
  /** [CUMULATIVE] Total query fee rebates for delegators earned from the protocol, through the cobbs douglas formula. */
  delegatorQueryFees: Scalars['BigInt'];
  /** [CUMULATIVE] Total curator rewards from fees */
  curatorFeeRewards: Scalars['BigInt'];
};

export type ANALYTICS__SubgraphDeploymentDailyData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  dayStart?: InputMaybe<Scalars['BigInt']>;
  dayStart_not?: InputMaybe<Scalars['BigInt']>;
  dayStart_gt?: InputMaybe<Scalars['BigInt']>;
  dayStart_lt?: InputMaybe<Scalars['BigInt']>;
  dayStart_gte?: InputMaybe<Scalars['BigInt']>;
  dayStart_lte?: InputMaybe<Scalars['BigInt']>;
  dayStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd?: InputMaybe<Scalars['BigInt']>;
  dayEnd_not?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lt?: InputMaybe<Scalars['BigInt']>;
  dayEnd_gte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_lte?: InputMaybe<Scalars['BigInt']>;
  dayEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  dayNumber?: InputMaybe<Scalars['Int']>;
  dayNumber_not?: InputMaybe<Scalars['Int']>;
  dayNumber_gt?: InputMaybe<Scalars['Int']>;
  dayNumber_lt?: InputMaybe<Scalars['Int']>;
  dayNumber_gte?: InputMaybe<Scalars['Int']>;
  dayNumber_lte?: InputMaybe<Scalars['Int']>;
  dayNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  dayNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount?: InputMaybe<Scalars['BigInt']>;
  signalAmount_not?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pricePerShare?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  pricePerShare_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  indexingRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__SubgraphDeploymentDailyData_orderBy =
  | 'id'
  | 'dayStart'
  | 'dayEnd'
  | 'dayNumber'
  | 'subgraphDeployment'
  | 'stakedTokens'
  | 'signalledTokens'
  | 'signalAmount'
  | 'pricePerShare'
  | 'indexingRewardAmount'
  | 'indexingIndexerRewardAmount'
  | 'indexingDelegatorRewardAmount'
  | 'queryFeesAmount'
  | 'queryFeeRebates'
  | 'delegatorQueryFees'
  | 'curatorFeeRewards';

export type ANALYTICS__SubgraphDeployment_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  versions_?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deniedAt?: InputMaybe<Scalars['Int']>;
  deniedAt_not?: InputMaybe<Scalars['Int']>;
  deniedAt_gt?: InputMaybe<Scalars['Int']>;
  deniedAt_lt?: InputMaybe<Scalars['Int']>;
  deniedAt_gte?: InputMaybe<Scalars['Int']>;
  deniedAt_lte?: InputMaybe<Scalars['Int']>;
  deniedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  deniedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerAllocations_?: InputMaybe<ANALYTICS__Allocation_filter>;
  indexingRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount?: InputMaybe<Scalars['BigInt']>;
  signalAmount_not?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pricePerShare?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_not?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_gt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_lt?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_gte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_lte?: InputMaybe<Scalars['ANALYTICS__BigDecimal']>;
  pricePerShare_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  pricePerShare_not_in?: InputMaybe<Array<Scalars['ANALYTICS__BigDecimal']>>;
  curatorSignals_?: InputMaybe<ANALYTICS__Signal_filter>;
  reserveRatio?: InputMaybe<Scalars['Int']>;
  reserveRatio_not?: InputMaybe<Scalars['Int']>;
  reserveRatio_gt?: InputMaybe<Scalars['Int']>;
  reserveRatio_lt?: InputMaybe<Scalars['Int']>;
  reserveRatio_gte?: InputMaybe<Scalars['Int']>;
  reserveRatio_lte?: InputMaybe<Scalars['Int']>;
  reserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  reserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  dailyData_?: InputMaybe<ANALYTICS__SubgraphDeploymentDailyData_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__SubgraphDeployment_orderBy =
  | 'id'
  | 'versions'
  | 'createdAt'
  | 'deniedAt'
  | 'stakedTokens'
  | 'indexerAllocations'
  | 'indexingRewardAmount'
  | 'indexingIndexerRewardAmount'
  | 'indexingDelegatorRewardAmount'
  | 'queryFeesAmount'
  | 'queryFeeRebates'
  | 'delegatorQueryFees'
  | 'curatorFeeRewards'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'signalAmount'
  | 'pricePerShare'
  | 'curatorSignals'
  | 'reserveRatio'
  | 'dailyData';

/**
 * The SubgraphVersion entity represents a version of the Subgraph. A new SubgraphVersion is created
 * whenever there is an update to the Subgraph triggered by the owner. The new SubgraphVersion can
 * then point to a new SubgraphDeployment, thus allowing the Subgraph to resolve to a different
 * deployment, while keeping the same endpoint. The metadata and label are stored on IPFS. The label
 * is for the developer to provide a semantic version. This is different from the version, which is
 * just a counter than increases each time a new SubgraphVersion is created for a Subgraph.
 *
 */
export type ANALYTICS__SubgraphVersion = {
  /** Concatenation of subgraph, subgraph deployment, and version ID */
  id: Scalars['ID'];
  /** Subgraph of this version */
  subgraph: ANALYTICS__Subgraph;
  /** Subgraph deployment of this version */
  subgraphDeployment: ANALYTICS__SubgraphDeployment;
  /** Version number */
  version: Scalars['Int'];
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** Subgraph version metadata content address */
  metadataHash?: Maybe<Scalars['ANALYTICS__Bytes']>;
  entityVersion: Scalars['Int'];
  linkedEntity?: Maybe<ANALYTICS__SubgraphVersion>;
};

export type ANALYTICS__SubgraphVersion_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<ANALYTICS__Subgraph_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<ANALYTICS__SubgraphDeployment_filter>;
  version?: InputMaybe<Scalars['Int']>;
  version_not?: InputMaybe<Scalars['Int']>;
  version_gt?: InputMaybe<Scalars['Int']>;
  version_lt?: InputMaybe<Scalars['Int']>;
  version_gte?: InputMaybe<Scalars['Int']>;
  version_lte?: InputMaybe<Scalars['Int']>;
  version_in?: InputMaybe<Array<Scalars['Int']>>;
  version_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  metadataHash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__SubgraphVersion_orderBy =
  | 'id'
  | 'subgraph'
  | 'subgraphDeployment'
  | 'version'
  | 'createdAt'
  | 'metadataHash'
  | 'entityVersion'
  | 'linkedEntity';

export type ANALYTICS__Subgraph_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  owner?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  currentVersion?: InputMaybe<Scalars['String']>;
  currentVersion_not?: InputMaybe<Scalars['String']>;
  currentVersion_gt?: InputMaybe<Scalars['String']>;
  currentVersion_lt?: InputMaybe<Scalars['String']>;
  currentVersion_gte?: InputMaybe<Scalars['String']>;
  currentVersion_lte?: InputMaybe<Scalars['String']>;
  currentVersion_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersion_contains?: InputMaybe<Scalars['String']>;
  currentVersion_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_contains?: InputMaybe<Scalars['String']>;
  currentVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_starts_with?: InputMaybe<Scalars['String']>;
  currentVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_starts_with?: InputMaybe<Scalars['String']>;
  currentVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_ends_with?: InputMaybe<Scalars['String']>;
  currentVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_ends_with?: InputMaybe<Scalars['String']>;
  currentVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  pastVersions_?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  versions_?: InputMaybe<ANALYTICS__SubgraphVersion_filter>;
  versionCount?: InputMaybe<Scalars['BigInt']>;
  versionCount_not?: InputMaybe<Scalars['BigInt']>;
  versionCount_gt?: InputMaybe<Scalars['BigInt']>;
  versionCount_lt?: InputMaybe<Scalars['BigInt']>;
  versionCount_gte?: InputMaybe<Scalars['BigInt']>;
  versionCount_lte?: InputMaybe<Scalars['BigInt']>;
  versionCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  migrated?: InputMaybe<Scalars['Boolean']>;
  migrated_not?: InputMaybe<Scalars['Boolean']>;
  migrated_in?: InputMaybe<Array<Scalars['Boolean']>>;
  migrated_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  initializing?: InputMaybe<Scalars['Boolean']>;
  initializing_not?: InputMaybe<Scalars['Boolean']>;
  initializing_in?: InputMaybe<Array<Scalars['Boolean']>>;
  initializing_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  nftID?: InputMaybe<Scalars['String']>;
  nftID_not?: InputMaybe<Scalars['String']>;
  nftID_gt?: InputMaybe<Scalars['String']>;
  nftID_lt?: InputMaybe<Scalars['String']>;
  nftID_gte?: InputMaybe<Scalars['String']>;
  nftID_lte?: InputMaybe<Scalars['String']>;
  nftID_in?: InputMaybe<Array<Scalars['String']>>;
  nftID_not_in?: InputMaybe<Array<Scalars['String']>>;
  nftID_contains?: InputMaybe<Scalars['String']>;
  nftID_contains_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_contains?: InputMaybe<Scalars['String']>;
  nftID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nftID_starts_with?: InputMaybe<Scalars['String']>;
  nftID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_starts_with?: InputMaybe<Scalars['String']>;
  nftID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_ends_with?: InputMaybe<Scalars['String']>;
  nftID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_ends_with?: InputMaybe<Scalars['String']>;
  nftID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  oldID?: InputMaybe<Scalars['String']>;
  oldID_not?: InputMaybe<Scalars['String']>;
  oldID_gt?: InputMaybe<Scalars['String']>;
  oldID_lt?: InputMaybe<Scalars['String']>;
  oldID_gte?: InputMaybe<Scalars['String']>;
  oldID_lte?: InputMaybe<Scalars['String']>;
  oldID_in?: InputMaybe<Array<Scalars['String']>>;
  oldID_not_in?: InputMaybe<Array<Scalars['String']>>;
  oldID_contains?: InputMaybe<Scalars['String']>;
  oldID_contains_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_contains?: InputMaybe<Scalars['String']>;
  oldID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  oldID_starts_with?: InputMaybe<Scalars['String']>;
  oldID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_starts_with?: InputMaybe<Scalars['String']>;
  oldID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_ends_with?: InputMaybe<Scalars['String']>;
  oldID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_ends_with?: InputMaybe<Scalars['String']>;
  oldID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creatorAddress?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  creatorAddress_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  creatorAddress_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  creatorAddress_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  subgraphNumber?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_not?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_gt?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_lt?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_gte?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_lte?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<ANALYTICS__Subgraph_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignalAmount?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_not?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reserveRatio?: InputMaybe<Scalars['Int']>;
  reserveRatio_not?: InputMaybe<Scalars['Int']>;
  reserveRatio_gt?: InputMaybe<Scalars['Int']>;
  reserveRatio_lt?: InputMaybe<Scalars['Int']>;
  reserveRatio_gte?: InputMaybe<Scalars['Int']>;
  reserveRatio_lte?: InputMaybe<Scalars['Int']>;
  reserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  reserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  withdrawableTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawableTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignals_?: InputMaybe<ANALYTICS__NameSignal_filter>;
  metadataHash?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['ANALYTICS__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['ANALYTICS__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Subgraph_orderBy =
  | 'id'
  | 'owner'
  | 'currentVersion'
  | 'pastVersions'
  | 'versions'
  | 'versionCount'
  | 'createdAt'
  | 'updatedAt'
  | 'active'
  | 'migrated'
  | 'initializing'
  | 'nftID'
  | 'oldID'
  | 'creatorAddress'
  | 'subgraphNumber'
  | 'entityVersion'
  | 'linkedEntity'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'nameSignalAmount'
  | 'reserveRatio'
  | 'withdrawableTokens'
  | 'withdrawnTokens'
  | 'nameSignals'
  | 'metadataHash';

/**
 * A generic transaction in The Graph Network
 *
 */
export type ANALYTICS__Transaction = {
  /** Transaction hash concatenated with event log index */
  id: Scalars['ID'];
  /** Block number for the transaction */
  blockNumber: Scalars['Int'];
  /** Timestamp for the transaction */
  timestamp: Scalars['Int'];
  /** Signer of the transaction */
  signer: ANALYTICS__GraphAccount;
  /** Type of Graph Network transaction */
  type: ANALYTICS__TransactionType;
};

export type ANALYTICS__TransactionType =
  | 'Stake'
  | 'Unstake'
  | 'MintSignal'
  | 'BurnSignal'
  | 'MintNSignal'
  | 'BurnNSignal';

export type ANALYTICS__Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<ANALYTICS__GraphAccount_filter>;
  type?: InputMaybe<ANALYTICS__TransactionType>;
  type_not?: InputMaybe<ANALYTICS__TransactionType>;
  type_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  type_not_in?: InputMaybe<Array<ANALYTICS__TransactionType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<ANALYTICS__BlockChangedFilter>;
};

export type ANALYTICS__Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type';

export type ANALYTICS___Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ANALYTICS__Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type ANALYTICS___Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ANALYTICS___Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type ANALYTICS___SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/**
 * A state channel Allocation representing a single Indexer-SubgraphDeployment stake
 *
 */
export type NETWORK__Allocation = {
  /** Channel Address */
  id: Scalars['ID'];
  /** Indexer of this allocation */
  indexer: NETWORK__Indexer;
  /** Creator of the allocation - can be the operator or the indexer */
  creator: Scalars['NETWORK__Bytes'];
  /** If the Allocation is active it shows the indexer. If closed, it is null */
  activeForIndexer?: Maybe<NETWORK__Indexer>;
  /** Subgraph deployment that is being allocated to */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** Tokens allocation in this allocation */
  allocatedTokens: Scalars['BigInt'];
  /** Effective allocation that is realized upon closing */
  effectiveAllocation: Scalars['BigInt'];
  /** Epoch this allocation was created */
  createdAtEpoch: Scalars['Int'];
  /** Block at which this allocation was created */
  createdAtBlockHash: Scalars['NETWORK__Bytes'];
  /** Block number at which this allocation was created */
  createdAtBlockNumber: Scalars['Int'];
  /** Epoch this allocation was closed in */
  closedAtEpoch?: Maybe<Scalars['Int']>;
  /** Block hash at which this allocation was closed */
  closedAtBlockHash?: Maybe<Scalars['NETWORK__Bytes']>;
  /** Block number at which this allocation was closed */
  closedAtBlockNumber?: Maybe<Scalars['Int']>;
  /** Fees this allocation collected from query fees upon closing. Excludes curator reward and protocol tax */
  queryFeesCollected: Scalars['BigInt'];
  /** Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators */
  queryFeeRebates: Scalars['BigInt'];
  /** Curator rewards deposited to the curating bonding curve */
  curatorRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation. Includes delegator and indexer rewards */
  indexingRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation by indexers */
  indexingIndexerRewards: Scalars['BigInt'];
  /** Indexing rewards earned by this allocation by delegators */
  indexingDelegatorRewards: Scalars['BigInt'];
  /** Pool in which this allocation was closed */
  poolClosedIn?: Maybe<NETWORK__Pool>;
  /** Fees paid out to delegators */
  delegationFees: Scalars['BigInt'];
  /** Status of the allocation */
  status: NETWORK__AllocationStatus;
  /** Timestamp this allocation was created at */
  createdAt: Scalars['Int'];
  /** Timestamp this allocation was closed at */
  closedAt?: Maybe<Scalars['Int']>;
  /** POI submitted with a closed allocation */
  poi?: Maybe<Scalars['NETWORK__Bytes']>;
  indexingRewardCutAtStart: Scalars['Int'];
  indexingRewardEffectiveCutAtStart: Scalars['NETWORK__BigDecimal'];
  queryFeeCutAtStart: Scalars['Int'];
  queryFeeEffectiveCutAtStart: Scalars['NETWORK__BigDecimal'];
  indexingRewardCutAtClose?: Maybe<Scalars['Int']>;
  indexingRewardEffectiveCutAtClose?: Maybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeCutAtClose?: Maybe<Scalars['Int']>;
  queryFeeEffectiveCutAtClose?: Maybe<Scalars['NETWORK__BigDecimal']>;
  /** NOT IMPLEMENTED - Return for this allocation */
  totalReturn: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Yearly annualzied return */
  annualizedReturn: Scalars['NETWORK__BigDecimal'];
};

export type NETWORK__AllocationStatus =
  | 'Null'
  | 'Active'
  | 'Closed'
  | 'Finalized'
  | 'Claimed';

export type NETWORK__Allocation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<NETWORK__Indexer_filter>;
  creator?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  creator_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  creator_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creator_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  activeForIndexer?: InputMaybe<Scalars['String']>;
  activeForIndexer_not?: InputMaybe<Scalars['String']>;
  activeForIndexer_gt?: InputMaybe<Scalars['String']>;
  activeForIndexer_lt?: InputMaybe<Scalars['String']>;
  activeForIndexer_gte?: InputMaybe<Scalars['String']>;
  activeForIndexer_lte?: InputMaybe<Scalars['String']>;
  activeForIndexer_in?: InputMaybe<Array<Scalars['String']>>;
  activeForIndexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  activeForIndexer_contains?: InputMaybe<Scalars['String']>;
  activeForIndexer_contains_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_contains?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_starts_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_starts_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_ends_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_ends_with?: InputMaybe<Scalars['String']>;
  activeForIndexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  activeForIndexer_?: InputMaybe<NETWORK__Indexer_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  allocatedTokens?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  effectiveAllocation?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_not?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_gt?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_lt?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_gte?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_lte?: InputMaybe<Scalars['BigInt']>;
  effectiveAllocation_in?: InputMaybe<Array<Scalars['BigInt']>>;
  effectiveAllocation_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAtEpoch?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_not?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_gt?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_lt?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_gte?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_lte?: InputMaybe<Scalars['Int']>;
  createdAtEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtBlockHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  createdAtBlockHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  createdAtBlockHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  createdAtBlockNumber?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_not?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_gt?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_lt?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_gte?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_lte?: InputMaybe<Scalars['Int']>;
  createdAtBlockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtBlockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtEpoch?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_not?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_gt?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_lt?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_gte?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_lte?: InputMaybe<Scalars['Int']>;
  closedAtEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtBlockHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  closedAtBlockHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  closedAtBlockHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  closedAtBlockNumber?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_not?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_gt?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_lt?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_gte?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_lte?: InputMaybe<Scalars['Int']>;
  closedAtBlockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAtBlockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewards?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  poolClosedIn?: InputMaybe<Scalars['String']>;
  poolClosedIn_not?: InputMaybe<Scalars['String']>;
  poolClosedIn_gt?: InputMaybe<Scalars['String']>;
  poolClosedIn_lt?: InputMaybe<Scalars['String']>;
  poolClosedIn_gte?: InputMaybe<Scalars['String']>;
  poolClosedIn_lte?: InputMaybe<Scalars['String']>;
  poolClosedIn_in?: InputMaybe<Array<Scalars['String']>>;
  poolClosedIn_not_in?: InputMaybe<Array<Scalars['String']>>;
  poolClosedIn_contains?: InputMaybe<Scalars['String']>;
  poolClosedIn_contains_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_contains?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_contains_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_starts_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_starts_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_ends_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_ends_with?: InputMaybe<Scalars['String']>;
  poolClosedIn_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolClosedIn_?: InputMaybe<NETWORK__Pool_filter>;
  delegationFees?: InputMaybe<Scalars['BigInt']>;
  delegationFees_not?: InputMaybe<Scalars['BigInt']>;
  delegationFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegationFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegationFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegationFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegationFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegationFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<NETWORK__AllocationStatus>;
  status_not?: InputMaybe<NETWORK__AllocationStatus>;
  status_in?: InputMaybe<Array<NETWORK__AllocationStatus>>;
  status_not_in?: InputMaybe<Array<NETWORK__AllocationStatus>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAt?: InputMaybe<Scalars['Int']>;
  closedAt_not?: InputMaybe<Scalars['Int']>;
  closedAt_gt?: InputMaybe<Scalars['Int']>;
  closedAt_lt?: InputMaybe<Scalars['Int']>;
  closedAt_gte?: InputMaybe<Scalars['Int']>;
  closedAt_lte?: InputMaybe<Scalars['Int']>;
  closedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  poi?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  poi_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  poi_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  poi_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  indexingRewardCutAtStart?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_not?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_gt?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_lt?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_gte?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_lte?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtStart_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardCutAtStart_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardEffectiveCutAtStart?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtStart_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexingRewardEffectiveCutAtStart_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  queryFeeCutAtStart?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_not?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_gt?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_lt?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_gte?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_lte?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtStart_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeCutAtStart_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeEffectiveCutAtStart?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtStart_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  queryFeeEffectiveCutAtStart_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexingRewardCutAtClose?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_not?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_gt?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_lt?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_gte?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_lte?: InputMaybe<Scalars['Int']>;
  indexingRewardCutAtClose_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardCutAtClose_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardEffectiveCutAtClose?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCutAtClose_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexingRewardEffectiveCutAtClose_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  queryFeeCutAtClose?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_not?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_gt?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_lt?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_gte?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_lte?: InputMaybe<Scalars['Int']>;
  queryFeeCutAtClose_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeCutAtClose_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeEffectiveCutAtClose?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCutAtClose_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  queryFeeEffectiveCutAtClose_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  annualizedReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  annualizedReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Allocation_orderBy =
  | 'id'
  | 'indexer'
  | 'creator'
  | 'activeForIndexer'
  | 'subgraphDeployment'
  | 'allocatedTokens'
  | 'effectiveAllocation'
  | 'createdAtEpoch'
  | 'createdAtBlockHash'
  | 'createdAtBlockNumber'
  | 'closedAtEpoch'
  | 'closedAtBlockHash'
  | 'closedAtBlockNumber'
  | 'queryFeesCollected'
  | 'queryFeeRebates'
  | 'curatorRewards'
  | 'indexingRewards'
  | 'indexingIndexerRewards'
  | 'indexingDelegatorRewards'
  | 'poolClosedIn'
  | 'delegationFees'
  | 'status'
  | 'createdAt'
  | 'closedAt'
  | 'poi'
  | 'indexingRewardCutAtStart'
  | 'indexingRewardEffectiveCutAtStart'
  | 'queryFeeCutAtStart'
  | 'queryFeeEffectiveCutAtStart'
  | 'indexingRewardCutAtClose'
  | 'indexingRewardEffectiveCutAtClose'
  | 'queryFeeCutAtClose'
  | 'queryFeeEffectiveCutAtClose'
  | 'totalReturn'
  | 'annualizedReturn';

/**
 * Attestation of a dispute
 *
 */
export type NETWORK__Attestation = {
  /** Concatenation of the requestCID and responseCID */
  id: Scalars['ID'];
  /** Subgraph deployment being disputed */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** RequestCID */
  requestCID: Scalars['String'];
  /** ResponseCID */
  responseCID: Scalars['String'];
  /** NOT IMPLEMENTED - Gas used by the attested query */
  gasUsed?: Maybe<Scalars['BigInt']>;
  /** NOT IMPLEMENTED - Bytes of attested query */
  responseNumBytes?: Maybe<Scalars['BigInt']>;
  /** V of the indexers signature */
  v: Scalars['Int'];
  /** R of the indexers signature */
  r: Scalars['String'];
  /** S of the indexers signature */
  s: Scalars['String'];
};

export type NETWORK__Attestation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  requestCID?: InputMaybe<Scalars['String']>;
  requestCID_not?: InputMaybe<Scalars['String']>;
  requestCID_gt?: InputMaybe<Scalars['String']>;
  requestCID_lt?: InputMaybe<Scalars['String']>;
  requestCID_gte?: InputMaybe<Scalars['String']>;
  requestCID_lte?: InputMaybe<Scalars['String']>;
  requestCID_in?: InputMaybe<Array<Scalars['String']>>;
  requestCID_not_in?: InputMaybe<Array<Scalars['String']>>;
  requestCID_contains?: InputMaybe<Scalars['String']>;
  requestCID_contains_nocase?: InputMaybe<Scalars['String']>;
  requestCID_not_contains?: InputMaybe<Scalars['String']>;
  requestCID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  requestCID_starts_with?: InputMaybe<Scalars['String']>;
  requestCID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  requestCID_not_starts_with?: InputMaybe<Scalars['String']>;
  requestCID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  requestCID_ends_with?: InputMaybe<Scalars['String']>;
  requestCID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  requestCID_not_ends_with?: InputMaybe<Scalars['String']>;
  requestCID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  responseCID?: InputMaybe<Scalars['String']>;
  responseCID_not?: InputMaybe<Scalars['String']>;
  responseCID_gt?: InputMaybe<Scalars['String']>;
  responseCID_lt?: InputMaybe<Scalars['String']>;
  responseCID_gte?: InputMaybe<Scalars['String']>;
  responseCID_lte?: InputMaybe<Scalars['String']>;
  responseCID_in?: InputMaybe<Array<Scalars['String']>>;
  responseCID_not_in?: InputMaybe<Array<Scalars['String']>>;
  responseCID_contains?: InputMaybe<Scalars['String']>;
  responseCID_contains_nocase?: InputMaybe<Scalars['String']>;
  responseCID_not_contains?: InputMaybe<Scalars['String']>;
  responseCID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  responseCID_starts_with?: InputMaybe<Scalars['String']>;
  responseCID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  responseCID_not_starts_with?: InputMaybe<Scalars['String']>;
  responseCID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  responseCID_ends_with?: InputMaybe<Scalars['String']>;
  responseCID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  responseCID_not_ends_with?: InputMaybe<Scalars['String']>;
  responseCID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasUsed?: InputMaybe<Scalars['BigInt']>;
  gasUsed_not?: InputMaybe<Scalars['BigInt']>;
  gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
  gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
  gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
  gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
  gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  responseNumBytes?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_not?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_gt?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_lt?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_gte?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_lte?: InputMaybe<Scalars['BigInt']>;
  responseNumBytes_in?: InputMaybe<Array<Scalars['BigInt']>>;
  responseNumBytes_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  v?: InputMaybe<Scalars['Int']>;
  v_not?: InputMaybe<Scalars['Int']>;
  v_gt?: InputMaybe<Scalars['Int']>;
  v_lt?: InputMaybe<Scalars['Int']>;
  v_gte?: InputMaybe<Scalars['Int']>;
  v_lte?: InputMaybe<Scalars['Int']>;
  v_in?: InputMaybe<Array<Scalars['Int']>>;
  v_not_in?: InputMaybe<Array<Scalars['Int']>>;
  r?: InputMaybe<Scalars['String']>;
  r_not?: InputMaybe<Scalars['String']>;
  r_gt?: InputMaybe<Scalars['String']>;
  r_lt?: InputMaybe<Scalars['String']>;
  r_gte?: InputMaybe<Scalars['String']>;
  r_lte?: InputMaybe<Scalars['String']>;
  r_in?: InputMaybe<Array<Scalars['String']>>;
  r_not_in?: InputMaybe<Array<Scalars['String']>>;
  r_contains?: InputMaybe<Scalars['String']>;
  r_contains_nocase?: InputMaybe<Scalars['String']>;
  r_not_contains?: InputMaybe<Scalars['String']>;
  r_not_contains_nocase?: InputMaybe<Scalars['String']>;
  r_starts_with?: InputMaybe<Scalars['String']>;
  r_starts_with_nocase?: InputMaybe<Scalars['String']>;
  r_not_starts_with?: InputMaybe<Scalars['String']>;
  r_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  r_ends_with?: InputMaybe<Scalars['String']>;
  r_ends_with_nocase?: InputMaybe<Scalars['String']>;
  r_not_ends_with?: InputMaybe<Scalars['String']>;
  r_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  s?: InputMaybe<Scalars['String']>;
  s_not?: InputMaybe<Scalars['String']>;
  s_gt?: InputMaybe<Scalars['String']>;
  s_lt?: InputMaybe<Scalars['String']>;
  s_gte?: InputMaybe<Scalars['String']>;
  s_lte?: InputMaybe<Scalars['String']>;
  s_in?: InputMaybe<Array<Scalars['String']>>;
  s_not_in?: InputMaybe<Array<Scalars['String']>>;
  s_contains?: InputMaybe<Scalars['String']>;
  s_contains_nocase?: InputMaybe<Scalars['String']>;
  s_not_contains?: InputMaybe<Scalars['String']>;
  s_not_contains_nocase?: InputMaybe<Scalars['String']>;
  s_starts_with?: InputMaybe<Scalars['String']>;
  s_starts_with_nocase?: InputMaybe<Scalars['String']>;
  s_not_starts_with?: InputMaybe<Scalars['String']>;
  s_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  s_ends_with?: InputMaybe<Scalars['String']>;
  s_ends_with_nocase?: InputMaybe<Scalars['String']>;
  s_not_ends_with?: InputMaybe<Scalars['String']>;
  s_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Attestation_orderBy =
  | 'id'
  | 'subgraphDeployment'
  | 'requestCID'
  | 'responseCID'
  | 'gasUsed'
  | 'responseNumBytes'
  | 'v'
  | 'r'
  | 's';

/**
 * Authorized functions for the Manager
 *
 */
export type NETWORK__AuthorizedFunction = {
  /** Function signature (string) */
  id: Scalars['ID'];
  /** The contract address that is authorized to have this function called on itself */
  target: Scalars['NETWORK__Bytes'];
  /** Hash of the function signature */
  sigHash: Scalars['NETWORK__Bytes'];
  /** Token lock Manager */
  manager: NETWORK__TokenManager;
};

export type NETWORK__AuthorizedFunction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  target?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  target_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  target_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  target_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  sigHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  sigHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  sigHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager?: InputMaybe<Scalars['String']>;
  manager_not?: InputMaybe<Scalars['String']>;
  manager_gt?: InputMaybe<Scalars['String']>;
  manager_lt?: InputMaybe<Scalars['String']>;
  manager_gte?: InputMaybe<Scalars['String']>;
  manager_lte?: InputMaybe<Scalars['String']>;
  manager_in?: InputMaybe<Array<Scalars['String']>>;
  manager_not_in?: InputMaybe<Array<Scalars['String']>>;
  manager_contains?: InputMaybe<Scalars['String']>;
  manager_contains_nocase?: InputMaybe<Scalars['String']>;
  manager_not_contains?: InputMaybe<Scalars['String']>;
  manager_not_contains_nocase?: InputMaybe<Scalars['String']>;
  manager_starts_with?: InputMaybe<Scalars['String']>;
  manager_starts_with_nocase?: InputMaybe<Scalars['String']>;
  manager_not_starts_with?: InputMaybe<Scalars['String']>;
  manager_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  manager_ends_with?: InputMaybe<Scalars['String']>;
  manager_ends_with_nocase?: InputMaybe<Scalars['String']>;
  manager_not_ends_with?: InputMaybe<Scalars['String']>;
  manager_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  manager_?: InputMaybe<NETWORK__TokenManager_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__AuthorizedFunction_orderBy =
  | 'id'
  | 'target'
  | 'sigHash'
  | 'manager';

export type NETWORK__BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type NETWORK__Block_height = {
  hash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/**
 * Curator with all Signals and metrics
 *
 */
export type NETWORK__Curator = {
  /** Eth address of the Curator */
  id: Scalars['ID'];
  /** Time this curator was created */
  createdAt: Scalars['Int'];
  /** Graph account of this curator */
  account: NETWORK__GraphAccount;
  /** CUMULATIVE tokens signalled on all the subgraphs */
  totalSignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens unsignalled on all the subgraphs */
  totalUnsignalledTokens: Scalars['BigInt'];
  /** Subgraphs the curator is curating */
  signals: Array<NETWORK__Signal>;
  /** Default display name is the current default name. Used for filtered queries */
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** CUMULATIVE tokens signalled on all names */
  totalNameSignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens unsignalled on all names */
  totalNameUnsignalledTokens: Scalars['BigInt'];
  /** CUMULATIVE withdrawn tokens from deprecated subgraphs */
  totalWithdrawnTokens: Scalars['BigInt'];
  /** Subgraphs the curator is curating */
  nameSignals: Array<NETWORK__NameSignal>;
  /** NOT IMPLEMENTED - Summation of realized rewards from all Signals */
  realizedRewards: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Annualized rate of return on curator signal */
  annualizedReturn: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Total return of the curator */
  totalReturn: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Signaling efficiency of the curator */
  signalingEfficiency: Scalars['NETWORK__BigDecimal'];
  /** CURRENT summed name signal for all bonding curves */
  totalNameSignal: Scalars['NETWORK__BigDecimal'];
  /** Total curator cost basis of all shares of name pools purchased on all bonding curves */
  totalNameSignalAverageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** totalNameSignalAverageCostBasis / totalNameSignal */
  totalAverageCostBasisPerNameSignal: Scalars['NETWORK__BigDecimal'];
  /** CURRENT summed signal for all bonding curves */
  totalSignal: Scalars['NETWORK__BigDecimal'];
  /** Total curator cost basis of all version signal shares purchased on all bonding curves. Includes those purchased through GNS name pools */
  totalSignalAverageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** totalSignalAverageCostBasis / totalSignal */
  totalAverageCostBasisPerSignal: Scalars['NETWORK__BigDecimal'];
  /** Total amount of signals created by this user */
  signalCount: Scalars['Int'];
  /** Amount of active signals for this user */
  activeSignalCount: Scalars['Int'];
  /** Total amount of name signals created by this user */
  nameSignalCount: Scalars['Int'];
  /** Amount of active name signals for this user */
  activeNameSignalCount: Scalars['Int'];
  /** Total amount of name signals and signals created by this user. signalCount + nameSignalCount */
  combinedSignalCount: Scalars['Int'];
  /** Amount of active name signals and signals for this user. signalCount + nameSignalCount */
  activeCombinedSignalCount: Scalars['Int'];
};


/**
 * Curator with all Signals and metrics
 *
 */
export type NETWORK__CuratorsignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Signal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Signal_filter>;
};


/**
 * Curator with all Signals and metrics
 *
 */
export type NETWORK__CuratornameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignal_filter>;
};

export type NETWORK__Curator_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  account?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<NETWORK__GraphAccount_filter>;
  totalSignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalSignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signals_?: InputMaybe<NETWORK__Signal_filter>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  totalNameSignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalNameSignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameSignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameUnsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalNameUnsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalNameUnsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalWithdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalWithdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalWithdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignals_?: InputMaybe<NETWORK__NameSignal_filter>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  annualizedReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  annualizedReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalingEfficiency?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalingEfficiency_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalingEfficiency_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalNameSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalNameSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalNameSignalAverageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalNameSignalAverageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalNameSignalAverageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalAverageCostBasisPerNameSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerNameSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalAverageCostBasisPerNameSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalSignalAverageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalSignalAverageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalSignalAverageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalAverageCostBasisPerSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalAverageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalAverageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalCount?: InputMaybe<Scalars['Int']>;
  signalCount_not?: InputMaybe<Scalars['Int']>;
  signalCount_gt?: InputMaybe<Scalars['Int']>;
  signalCount_lt?: InputMaybe<Scalars['Int']>;
  signalCount_gte?: InputMaybe<Scalars['Int']>;
  signalCount_lte?: InputMaybe<Scalars['Int']>;
  signalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  signalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSignalCount?: InputMaybe<Scalars['Int']>;
  activeSignalCount_not?: InputMaybe<Scalars['Int']>;
  activeSignalCount_gt?: InputMaybe<Scalars['Int']>;
  activeSignalCount_lt?: InputMaybe<Scalars['Int']>;
  activeSignalCount_gte?: InputMaybe<Scalars['Int']>;
  activeSignalCount_lte?: InputMaybe<Scalars['Int']>;
  activeSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  nameSignalCount?: InputMaybe<Scalars['Int']>;
  nameSignalCount_not?: InputMaybe<Scalars['Int']>;
  nameSignalCount_gt?: InputMaybe<Scalars['Int']>;
  nameSignalCount_lt?: InputMaybe<Scalars['Int']>;
  nameSignalCount_gte?: InputMaybe<Scalars['Int']>;
  nameSignalCount_lte?: InputMaybe<Scalars['Int']>;
  nameSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  nameSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeNameSignalCount?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_not?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_gt?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_lt?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_gte?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_lte?: InputMaybe<Scalars['Int']>;
  activeNameSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeNameSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  combinedSignalCount?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_not?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_gt?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_lt?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_gte?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_lte?: InputMaybe<Scalars['Int']>;
  combinedSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  combinedSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeCombinedSignalCount?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_not?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_gt?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_lt?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_gte?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_lte?: InputMaybe<Scalars['Int']>;
  activeCombinedSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeCombinedSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Curator_orderBy =
  | 'id'
  | 'createdAt'
  | 'account'
  | 'totalSignalledTokens'
  | 'totalUnsignalledTokens'
  | 'signals'
  | 'defaultDisplayName'
  | 'totalNameSignalledTokens'
  | 'totalNameUnsignalledTokens'
  | 'totalWithdrawnTokens'
  | 'nameSignals'
  | 'realizedRewards'
  | 'annualizedReturn'
  | 'totalReturn'
  | 'signalingEfficiency'
  | 'totalNameSignal'
  | 'totalNameSignalAverageCostBasis'
  | 'totalAverageCostBasisPerNameSignal'
  | 'totalSignal'
  | 'totalSignalAverageCostBasis'
  | 'totalAverageCostBasisPerSignal'
  | 'signalCount'
  | 'activeSignalCount'
  | 'nameSignalCount'
  | 'activeNameSignalCount'
  | 'combinedSignalCount'
  | 'activeCombinedSignalCount';

export type NETWORK__CurrentSubgraphDeploymentRelation = {
  /** Auxiliary entity used to batch update Subgraph entities when signalling on the deployment changes. ID replicates the deployment ID and adds a counter, to make it easy to reproduce. */
  id: Scalars['ID'];
  subgraph: NETWORK__Subgraph;
  deployment: NETWORK__SubgraphDeployment;
  /** Indicates whether this relation is active. This means that the deployment is still the current deployment for the named Subgraph */
  active: Scalars['Boolean'];
};

export type NETWORK__CurrentSubgraphDeploymentRelation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  deployment?: InputMaybe<Scalars['String']>;
  deployment_not?: InputMaybe<Scalars['String']>;
  deployment_gt?: InputMaybe<Scalars['String']>;
  deployment_lt?: InputMaybe<Scalars['String']>;
  deployment_gte?: InputMaybe<Scalars['String']>;
  deployment_lte?: InputMaybe<Scalars['String']>;
  deployment_in?: InputMaybe<Array<Scalars['String']>>;
  deployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  deployment_contains?: InputMaybe<Scalars['String']>;
  deployment_contains_nocase?: InputMaybe<Scalars['String']>;
  deployment_not_contains?: InputMaybe<Scalars['String']>;
  deployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deployment_starts_with?: InputMaybe<Scalars['String']>;
  deployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deployment_not_starts_with?: InputMaybe<Scalars['String']>;
  deployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deployment_ends_with?: InputMaybe<Scalars['String']>;
  deployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deployment_not_ends_with?: InputMaybe<Scalars['String']>;
  deployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__CurrentSubgraphDeploymentRelation_orderBy =
  | 'id'
  | 'subgraph'
  | 'deployment'
  | 'active';

/**
 * Delegator stake for a single Indexer
 *
 */
export type NETWORK__DelegatedStake = {
  /** Concatenation of Delegator address and Indexer address */
  id: Scalars['ID'];
  /** Index the stake is delegated to */
  indexer: NETWORK__Indexer;
  /** Delegator */
  delegator: NETWORK__Delegator;
  /** CUMULATIVE tokens delegated */
  stakedTokens: Scalars['BigInt'];
  /** CUMULATIVE tokens undelegated */
  unstakedTokens: Scalars['BigInt'];
  /** CURRENT tokens locked */
  lockedTokens: Scalars['BigInt'];
  /** Epoch the locked tokens get unlocked */
  lockedUntil: Scalars['Int'];
  /** Shares owned in the delegator pool. Used to calculate total amount delegated */
  shareAmount: Scalars['BigInt'];
  /** The rate this delegator paid for their shares (calculated using average cost basis). Used for rewards calculations */
  personalExchangeRate: Scalars['NETWORK__BigDecimal'];
  /** Realized rewards from undelegating and realizing a reward */
  realizedRewards: Scalars['NETWORK__BigDecimal'];
  /** Time this delegator first delegated to an indexer */
  createdAt: Scalars['Int'];
  /** Last time this delegator delegated towards this indexer */
  lastDelegatedAt?: Maybe<Scalars['Int']>;
  /** Last time this delegator undelegated from this indexer */
  lastUndelegatedAt?: Maybe<Scalars['Int']>;
};

export type NETWORK__DelegatedStake_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<NETWORK__Indexer_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<NETWORK__Delegator_filter>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedUntil?: InputMaybe<Scalars['Int']>;
  lockedUntil_not?: InputMaybe<Scalars['Int']>;
  lockedUntil_gt?: InputMaybe<Scalars['Int']>;
  lockedUntil_lt?: InputMaybe<Scalars['Int']>;
  lockedUntil_gte?: InputMaybe<Scalars['Int']>;
  lockedUntil_lte?: InputMaybe<Scalars['Int']>;
  lockedUntil_in?: InputMaybe<Array<Scalars['Int']>>;
  lockedUntil_not_in?: InputMaybe<Array<Scalars['Int']>>;
  shareAmount?: InputMaybe<Scalars['BigInt']>;
  shareAmount_not?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lt?: InputMaybe<Scalars['BigInt']>;
  shareAmount_gte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_lte?: InputMaybe<Scalars['BigInt']>;
  shareAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  shareAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  personalExchangeRate?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  personalExchangeRate_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  personalExchangeRate_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  realizedRewards?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastDelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_not?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastUndelegatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUndelegatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__DelegatedStake_orderBy =
  | 'id'
  | 'indexer'
  | 'delegator'
  | 'stakedTokens'
  | 'unstakedTokens'
  | 'lockedTokens'
  | 'lockedUntil'
  | 'shareAmount'
  | 'personalExchangeRate'
  | 'realizedRewards'
  | 'createdAt'
  | 'lastDelegatedAt'
  | 'lastUndelegatedAt';

/**
 * Delegator with all their delegated stakes towards Indexers
 *
 */
export type NETWORK__Delegator = {
  /** Delegator address */
  id: Scalars['ID'];
  /** Graph account of the delegator */
  account: NETWORK__GraphAccount;
  /** Stakes of this delegator */
  stakes: Array<NETWORK__DelegatedStake>;
  /** CUMULATIVE staked tokens in DelegatorStakes of this Delegator */
  totalStakedTokens: Scalars['BigInt'];
  /** CUMULATIVE unstaked tokens in DelegatorStakes of this Delegator */
  totalUnstakedTokens: Scalars['BigInt'];
  /** Time created at */
  createdAt: Scalars['Int'];
  /** Total realized rewards on all delegated stakes. Realized rewards are added when undelegating and realizing a profit */
  totalRealizedRewards: Scalars['NETWORK__BigDecimal'];
  /** Total DelegatedStake entity count (Active and inactive) */
  stakesCount: Scalars['Int'];
  /** Active DelegatedStake entity count. Active means it still has GRT delegated */
  activeStakesCount: Scalars['Int'];
  /** Default display name is the current default name. Used for filtered queries */
  defaultDisplayName?: Maybe<Scalars['String']>;
};


/**
 * Delegator with all their delegated stakes towards Indexers
 *
 */
export type NETWORK__DelegatorstakesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__DelegatedStake_filter>;
};

export type NETWORK__Delegator_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  account?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<NETWORK__GraphAccount_filter>;
  stakes_?: InputMaybe<NETWORK__DelegatedStake_filter>;
  totalStakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalStakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalStakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalRealizedRewards?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalRealizedRewards_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalRealizedRewards_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  stakesCount?: InputMaybe<Scalars['Int']>;
  stakesCount_not?: InputMaybe<Scalars['Int']>;
  stakesCount_gt?: InputMaybe<Scalars['Int']>;
  stakesCount_lt?: InputMaybe<Scalars['Int']>;
  stakesCount_gte?: InputMaybe<Scalars['Int']>;
  stakesCount_lte?: InputMaybe<Scalars['Int']>;
  stakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount?: InputMaybe<Scalars['Int']>;
  activeStakesCount_not?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lt?: InputMaybe<Scalars['Int']>;
  activeStakesCount_gte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_lte?: InputMaybe<Scalars['Int']>;
  activeStakesCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeStakesCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Delegator_orderBy =
  | 'id'
  | 'account'
  | 'stakes'
  | 'totalStakedTokens'
  | 'totalUnstakedTokens'
  | 'createdAt'
  | 'totalRealizedRewards'
  | 'stakesCount'
  | 'activeStakesCount'
  | 'defaultDisplayName';

/**
 * Dispute of a query. Includes single query, conflicting attestation, and indexing disputes
 *
 */
export type NETWORK__Dispute = {
  /** Dispute ID */
  id: Scalars['ID'];
  /** Subgraph deployment being disputed */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** Fisherman address */
  fisherman: NETWORK__GraphAccount;
  /** Fisherman deposit */
  deposit: Scalars['BigInt'];
  /** Time dispute was created */
  createdAt: Scalars['Int'];
  /** Time dispute was closed at */
  closedAt: Scalars['Int'];
  /** Status of the dispute. Accepted means the Indexer was slashed */
  status: NETWORK__DisputeStatus;
  /** Total amount of tokens slashed on the dispute */
  tokensSlashed: Scalars['NETWORK__BigDecimal'];
  /** Amount of the slashed tokens that was burned */
  tokensBurned: Scalars['NETWORK__BigDecimal'];
  /** Amount of the slashed tokens that was payed as reward to the fisherman */
  tokensRewarded: Scalars['BigInt'];
  /** Type of dispute */
  type: NETWORK__DisputeType;
  /** Indexer disputed */
  indexer: NETWORK__GraphAccount;
  /** Attestation. Only for single query and conflicting attestations */
  attestation?: Maybe<NETWORK__Attestation>;
  /** Linked dispute of other Indexer. Only for conflicting attestation */
  linkedDispute?: Maybe<NETWORK__Dispute>;
  /** Allocation ID. Only for Indexing Disputes */
  allocation?: Maybe<NETWORK__Allocation>;
};

export type NETWORK__DisputeStatus =
  | 'Undecided'
  | 'Accepted'
  | 'Rejected'
  | 'Draw';

export type NETWORK__DisputeType =
  | 'SingleQuery'
  | 'Conflicting'
  | 'Indexing';

export type NETWORK__Dispute_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  fisherman?: InputMaybe<Scalars['String']>;
  fisherman_not?: InputMaybe<Scalars['String']>;
  fisherman_gt?: InputMaybe<Scalars['String']>;
  fisherman_lt?: InputMaybe<Scalars['String']>;
  fisherman_gte?: InputMaybe<Scalars['String']>;
  fisherman_lte?: InputMaybe<Scalars['String']>;
  fisherman_in?: InputMaybe<Array<Scalars['String']>>;
  fisherman_not_in?: InputMaybe<Array<Scalars['String']>>;
  fisherman_contains?: InputMaybe<Scalars['String']>;
  fisherman_contains_nocase?: InputMaybe<Scalars['String']>;
  fisherman_not_contains?: InputMaybe<Scalars['String']>;
  fisherman_not_contains_nocase?: InputMaybe<Scalars['String']>;
  fisherman_starts_with?: InputMaybe<Scalars['String']>;
  fisherman_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fisherman_not_starts_with?: InputMaybe<Scalars['String']>;
  fisherman_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fisherman_ends_with?: InputMaybe<Scalars['String']>;
  fisherman_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fisherman_not_ends_with?: InputMaybe<Scalars['String']>;
  fisherman_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fisherman_?: InputMaybe<NETWORK__GraphAccount_filter>;
  deposit?: InputMaybe<Scalars['BigInt']>;
  deposit_not?: InputMaybe<Scalars['BigInt']>;
  deposit_gt?: InputMaybe<Scalars['BigInt']>;
  deposit_lt?: InputMaybe<Scalars['BigInt']>;
  deposit_gte?: InputMaybe<Scalars['BigInt']>;
  deposit_lte?: InputMaybe<Scalars['BigInt']>;
  deposit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  deposit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAt?: InputMaybe<Scalars['Int']>;
  closedAt_not?: InputMaybe<Scalars['Int']>;
  closedAt_gt?: InputMaybe<Scalars['Int']>;
  closedAt_lt?: InputMaybe<Scalars['Int']>;
  closedAt_gte?: InputMaybe<Scalars['Int']>;
  closedAt_lte?: InputMaybe<Scalars['Int']>;
  closedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  closedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  status?: InputMaybe<NETWORK__DisputeStatus>;
  status_not?: InputMaybe<NETWORK__DisputeStatus>;
  status_in?: InputMaybe<Array<NETWORK__DisputeStatus>>;
  status_not_in?: InputMaybe<Array<NETWORK__DisputeStatus>>;
  tokensSlashed?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensSlashed_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  tokensSlashed_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  tokensBurned?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  tokensBurned_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  tokensBurned_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  tokensRewarded?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_not?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_gt?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_lt?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_gte?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_lte?: InputMaybe<Scalars['BigInt']>;
  tokensRewarded_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensRewarded_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  type?: InputMaybe<NETWORK__DisputeType>;
  type_not?: InputMaybe<NETWORK__DisputeType>;
  type_in?: InputMaybe<Array<NETWORK__DisputeType>>;
  type_not_in?: InputMaybe<Array<NETWORK__DisputeType>>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<NETWORK__GraphAccount_filter>;
  attestation?: InputMaybe<Scalars['String']>;
  attestation_not?: InputMaybe<Scalars['String']>;
  attestation_gt?: InputMaybe<Scalars['String']>;
  attestation_lt?: InputMaybe<Scalars['String']>;
  attestation_gte?: InputMaybe<Scalars['String']>;
  attestation_lte?: InputMaybe<Scalars['String']>;
  attestation_in?: InputMaybe<Array<Scalars['String']>>;
  attestation_not_in?: InputMaybe<Array<Scalars['String']>>;
  attestation_contains?: InputMaybe<Scalars['String']>;
  attestation_contains_nocase?: InputMaybe<Scalars['String']>;
  attestation_not_contains?: InputMaybe<Scalars['String']>;
  attestation_not_contains_nocase?: InputMaybe<Scalars['String']>;
  attestation_starts_with?: InputMaybe<Scalars['String']>;
  attestation_starts_with_nocase?: InputMaybe<Scalars['String']>;
  attestation_not_starts_with?: InputMaybe<Scalars['String']>;
  attestation_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  attestation_ends_with?: InputMaybe<Scalars['String']>;
  attestation_ends_with_nocase?: InputMaybe<Scalars['String']>;
  attestation_not_ends_with?: InputMaybe<Scalars['String']>;
  attestation_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  attestation_?: InputMaybe<NETWORK__Attestation_filter>;
  linkedDispute?: InputMaybe<Scalars['String']>;
  linkedDispute_not?: InputMaybe<Scalars['String']>;
  linkedDispute_gt?: InputMaybe<Scalars['String']>;
  linkedDispute_lt?: InputMaybe<Scalars['String']>;
  linkedDispute_gte?: InputMaybe<Scalars['String']>;
  linkedDispute_lte?: InputMaybe<Scalars['String']>;
  linkedDispute_in?: InputMaybe<Array<Scalars['String']>>;
  linkedDispute_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedDispute_contains?: InputMaybe<Scalars['String']>;
  linkedDispute_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_not_contains?: InputMaybe<Scalars['String']>;
  linkedDispute_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_starts_with?: InputMaybe<Scalars['String']>;
  linkedDispute_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedDispute_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_ends_with?: InputMaybe<Scalars['String']>;
  linkedDispute_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedDispute_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedDispute_?: InputMaybe<NETWORK__Dispute_filter>;
  allocation?: InputMaybe<Scalars['String']>;
  allocation_not?: InputMaybe<Scalars['String']>;
  allocation_gt?: InputMaybe<Scalars['String']>;
  allocation_lt?: InputMaybe<Scalars['String']>;
  allocation_gte?: InputMaybe<Scalars['String']>;
  allocation_lte?: InputMaybe<Scalars['String']>;
  allocation_in?: InputMaybe<Array<Scalars['String']>>;
  allocation_not_in?: InputMaybe<Array<Scalars['String']>>;
  allocation_contains?: InputMaybe<Scalars['String']>;
  allocation_contains_nocase?: InputMaybe<Scalars['String']>;
  allocation_not_contains?: InputMaybe<Scalars['String']>;
  allocation_not_contains_nocase?: InputMaybe<Scalars['String']>;
  allocation_starts_with?: InputMaybe<Scalars['String']>;
  allocation_starts_with_nocase?: InputMaybe<Scalars['String']>;
  allocation_not_starts_with?: InputMaybe<Scalars['String']>;
  allocation_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  allocation_ends_with?: InputMaybe<Scalars['String']>;
  allocation_ends_with_nocase?: InputMaybe<Scalars['String']>;
  allocation_not_ends_with?: InputMaybe<Scalars['String']>;
  allocation_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  allocation_?: InputMaybe<NETWORK__Allocation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Dispute_orderBy =
  | 'id'
  | 'subgraphDeployment'
  | 'fisherman'
  | 'deposit'
  | 'createdAt'
  | 'closedAt'
  | 'status'
  | 'tokensSlashed'
  | 'tokensBurned'
  | 'tokensRewarded'
  | 'type'
  | 'indexer'
  | 'attestation'
  | 'linkedDispute'
  | 'allocation';

/**
 * Epoch aggregate data for network statistics on signaling, rewards, and query fees
 *
 */
export type NETWORK__Epoch = {
  /** Epoch number */
  id: Scalars['ID'];
  /** Start block of the epoch */
  startBlock: Scalars['Int'];
  /** End block of the epoch */
  endBlock: Scalars['Int'];
  /** Signaled tokens during this epoch */
  signalledTokens: Scalars['BigInt'];
  /** Stake deposited during this epoch */
  stakeDeposited: Scalars['BigInt'];
  /** Total amount of query fees generated during this epoch (Includes everything) */
  totalQueryFees: Scalars['BigInt'];
  /** Amount of query fees generated that were burnt by the 1% protocol tax during this epoch */
  taxedQueryFees: Scalars['BigInt'];
  /** Amount of query fees generated that are going to the rebate pool for indexers during this epoch */
  queryFeesCollected: Scalars['BigInt'];
  /** Amount of query fees generated that are going to curators during this epoch */
  curatorQueryFees: Scalars['BigInt'];
  /** Rebate amount claimed from the protocol through cobbs douglas during this epoch (Doesn't correlate to the queryFeesCollected for this epoch since there's a 7 day period before claiming) */
  queryFeeRebates: Scalars['BigInt'];
  /** Total indexing rewards earned in this epoch. Includes both delegator and indexer rewards */
  totalRewards: Scalars['BigInt'];
  /** Total indexing rewards earned in this epoch by indexers */
  totalIndexerRewards: Scalars['BigInt'];
  /** Total indexing rewards earned in this epoch by delegators */
  totalDelegatorRewards: Scalars['BigInt'];
};

export type NETWORK__Epoch_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  startBlock?: InputMaybe<Scalars['Int']>;
  startBlock_not?: InputMaybe<Scalars['Int']>;
  startBlock_gt?: InputMaybe<Scalars['Int']>;
  startBlock_lt?: InputMaybe<Scalars['Int']>;
  startBlock_gte?: InputMaybe<Scalars['Int']>;
  startBlock_lte?: InputMaybe<Scalars['Int']>;
  startBlock_in?: InputMaybe<Array<Scalars['Int']>>;
  startBlock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  endBlock?: InputMaybe<Scalars['Int']>;
  endBlock_not?: InputMaybe<Scalars['Int']>;
  endBlock_gt?: InputMaybe<Scalars['Int']>;
  endBlock_lt?: InputMaybe<Scalars['Int']>;
  endBlock_gte?: InputMaybe<Scalars['Int']>;
  endBlock_lte?: InputMaybe<Scalars['Int']>;
  endBlock_in?: InputMaybe<Array<Scalars['Int']>>;
  endBlock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakeDeposited?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_not?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_gt?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_lt?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_gte?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_lte?: InputMaybe<Scalars['BigInt']>;
  stakeDeposited_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakeDeposited_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  taxedQueryFees?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  taxedQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  taxedQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  curatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalRewards?: InputMaybe<Scalars['BigInt']>;
  totalRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Epoch_orderBy =
  | 'id'
  | 'startBlock'
  | 'endBlock'
  | 'signalledTokens'
  | 'stakeDeposited'
  | 'totalQueryFees'
  | 'taxedQueryFees'
  | 'queryFeesCollected'
  | 'curatorQueryFees'
  | 'queryFeeRebates'
  | 'totalRewards'
  | 'totalIndexerRewards'
  | 'totalDelegatorRewards';

/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccount = {
  /** Graph account ID */
  id: Scalars['ID'];
  /** All names this graph account has claimed from all name systems */
  names: Array<NETWORK__GraphAccountName>;
  /** Default name the graph account has chosen */
  defaultName?: Maybe<NETWORK__GraphAccountName>;
  /** Time the account was created */
  createdAt: Scalars['Int'];
  /** Default display name is the current default name. Used for filtered queries in the explorer */
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** True if it is an organization. False if it is an individual */
  isOrganization?: Maybe<Scalars['Boolean']>;
  /** IPFS hash with account metadata details */
  metadataHash?: Maybe<Scalars['NETWORK__Bytes']>;
  /** Main repository of code for the graph account */
  codeRepository?: Maybe<Scalars['String']>;
  /** Description of the graph account */
  description?: Maybe<Scalars['String']>;
  /** Image URL */
  image?: Maybe<Scalars['String']>;
  /** Website URL */
  website?: Maybe<Scalars['String']>;
  /** Display name. Not unique */
  displayName?: Maybe<Scalars['String']>;
  /** Operator of other Graph Accounts */
  operatorOf: Array<NETWORK__GraphAccount>;
  /** Operators of this Graph Accounts */
  operators: Array<NETWORK__GraphAccount>;
  /** Graph token balance */
  balance: Scalars['BigInt'];
  /** Amount this account has approved staking to transfer their GRT */
  curationApproval: Scalars['BigInt'];
  /** Amount this account has approved curation to transfer their GRT */
  stakingApproval: Scalars['BigInt'];
  /** Amount this account has approved the GNS to transfer their GRT */
  gnsApproval: Scalars['BigInt'];
  /** Subgraphs the graph account owns */
  subgraphs: Array<NETWORK__Subgraph>;
  /** Time that this graph account became a developer */
  developerCreatedAt?: Maybe<Scalars['Int']>;
  /** NOT IMPLEMENTED - Total query fees the subgraphs created by this account have accumulated in GRT */
  subgraphQueryFees: Scalars['BigInt'];
  /** Disputes this graph account has created */
  createdDisputes: Array<NETWORK__Dispute>;
  /** Disputes against this graph account */
  disputesAgainst: Array<NETWORK__Dispute>;
  /** Curator fields for this GraphAccount. Null if never curated */
  curator?: Maybe<NETWORK__Curator>;
  /** Indexer fields for this GraphAccount. Null if never indexed */
  indexer?: Maybe<NETWORK__Indexer>;
  /** Delegator fields for this GraphAccount. Null if never delegated */
  delegator?: Maybe<NETWORK__Delegator>;
  /** Name signal transactions created by this GraphAccount */
  nameSignalTransactions: Array<NETWORK__NameSignalTransaction>;
  tokenLockWallets: Array<NETWORK__TokenLockWallet>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountnamesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccountName_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccountName_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountoperatorOfArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccount_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountoperatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__GraphAccount_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__GraphAccount_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountsubgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Subgraph_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Subgraph_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountcreatedDisputesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Dispute_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Dispute_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountdisputesAgainstArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Dispute_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Dispute_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccountnameSignalTransactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignalTransaction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignalTransaction_filter>;
};


/**
 * An account within the graph network. Contains metadata and all relevant data for this accounts
 * delegating, curating, and indexing.
 *
 */
export type NETWORK__GraphAccounttokenLockWalletsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__TokenLockWallet_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__TokenLockWallet_filter>;
};

/**
 * A name chosen by a Graph Account from a Name System such as ENS. This allows Graph Accounts to be
 * recognized by name, rather than just an Ethereum address
 *
 */
export type NETWORK__GraphAccountName = {
  /** Name system concatenated with the unique ID of the name system */
  id: Scalars['ID'];
  /** Name system for this name */
  nameSystem: NETWORK__NameSystem;
  /** Name from the system */
  name: Scalars['String'];
  /** The graph account that owned the name when it was linked in the graph network */
  graphAccount?: Maybe<NETWORK__GraphAccount>;
};

export type NETWORK__GraphAccountName_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nameSystem?: InputMaybe<NETWORK__NameSystem>;
  nameSystem_not?: InputMaybe<NETWORK__NameSystem>;
  nameSystem_in?: InputMaybe<Array<NETWORK__NameSystem>>;
  nameSystem_not_in?: InputMaybe<Array<NETWORK__NameSystem>>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount?: InputMaybe<Scalars['String']>;
  graphAccount_not?: InputMaybe<Scalars['String']>;
  graphAccount_gt?: InputMaybe<Scalars['String']>;
  graphAccount_lt?: InputMaybe<Scalars['String']>;
  graphAccount_gte?: InputMaybe<Scalars['String']>;
  graphAccount_lte?: InputMaybe<Scalars['String']>;
  graphAccount_in?: InputMaybe<Array<Scalars['String']>>;
  graphAccount_not_in?: InputMaybe<Array<Scalars['String']>>;
  graphAccount_contains?: InputMaybe<Scalars['String']>;
  graphAccount_contains_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_contains?: InputMaybe<Scalars['String']>;
  graphAccount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_starts_with?: InputMaybe<Scalars['String']>;
  graphAccount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_starts_with?: InputMaybe<Scalars['String']>;
  graphAccount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_ends_with?: InputMaybe<Scalars['String']>;
  graphAccount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_not_ends_with?: InputMaybe<Scalars['String']>;
  graphAccount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  graphAccount_?: InputMaybe<NETWORK__GraphAccount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__GraphAccountName_orderBy =
  | 'id'
  | 'nameSystem'
  | 'name'
  | 'graphAccount';

export type NETWORK__GraphAccount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  names_?: InputMaybe<NETWORK__GraphAccountName_filter>;
  defaultName?: InputMaybe<Scalars['String']>;
  defaultName_not?: InputMaybe<Scalars['String']>;
  defaultName_gt?: InputMaybe<Scalars['String']>;
  defaultName_lt?: InputMaybe<Scalars['String']>;
  defaultName_gte?: InputMaybe<Scalars['String']>;
  defaultName_lte?: InputMaybe<Scalars['String']>;
  defaultName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultName_contains?: InputMaybe<Scalars['String']>;
  defaultName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_contains?: InputMaybe<Scalars['String']>;
  defaultName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultName_starts_with?: InputMaybe<Scalars['String']>;
  defaultName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_ends_with?: InputMaybe<Scalars['String']>;
  defaultName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultName_?: InputMaybe<NETWORK__GraphAccountName_filter>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  isOrganization?: InputMaybe<Scalars['Boolean']>;
  isOrganization_not?: InputMaybe<Scalars['Boolean']>;
  isOrganization_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isOrganization_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  metadataHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  codeRepository?: InputMaybe<Scalars['String']>;
  codeRepository_not?: InputMaybe<Scalars['String']>;
  codeRepository_gt?: InputMaybe<Scalars['String']>;
  codeRepository_lt?: InputMaybe<Scalars['String']>;
  codeRepository_gte?: InputMaybe<Scalars['String']>;
  codeRepository_lte?: InputMaybe<Scalars['String']>;
  codeRepository_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_not_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_contains?: InputMaybe<Scalars['String']>;
  codeRepository_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  image_not?: InputMaybe<Scalars['String']>;
  image_gt?: InputMaybe<Scalars['String']>;
  image_lt?: InputMaybe<Scalars['String']>;
  image_gte?: InputMaybe<Scalars['String']>;
  image_lte?: InputMaybe<Scalars['String']>;
  image_in?: InputMaybe<Array<Scalars['String']>>;
  image_not_in?: InputMaybe<Array<Scalars['String']>>;
  image_contains?: InputMaybe<Scalars['String']>;
  image_contains_nocase?: InputMaybe<Scalars['String']>;
  image_not_contains?: InputMaybe<Scalars['String']>;
  image_not_contains_nocase?: InputMaybe<Scalars['String']>;
  image_starts_with?: InputMaybe<Scalars['String']>;
  image_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_starts_with?: InputMaybe<Scalars['String']>;
  image_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_ends_with?: InputMaybe<Scalars['String']>;
  image_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_ends_with?: InputMaybe<Scalars['String']>;
  image_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
  website_not?: InputMaybe<Scalars['String']>;
  website_gt?: InputMaybe<Scalars['String']>;
  website_lt?: InputMaybe<Scalars['String']>;
  website_gte?: InputMaybe<Scalars['String']>;
  website_lte?: InputMaybe<Scalars['String']>;
  website_in?: InputMaybe<Array<Scalars['String']>>;
  website_not_in?: InputMaybe<Array<Scalars['String']>>;
  website_contains?: InputMaybe<Scalars['String']>;
  website_contains_nocase?: InputMaybe<Scalars['String']>;
  website_not_contains?: InputMaybe<Scalars['String']>;
  website_not_contains_nocase?: InputMaybe<Scalars['String']>;
  website_starts_with?: InputMaybe<Scalars['String']>;
  website_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_starts_with?: InputMaybe<Scalars['String']>;
  website_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_ends_with?: InputMaybe<Scalars['String']>;
  website_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_ends_with?: InputMaybe<Scalars['String']>;
  website_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  displayName_not?: InputMaybe<Scalars['String']>;
  displayName_gt?: InputMaybe<Scalars['String']>;
  displayName_lt?: InputMaybe<Scalars['String']>;
  displayName_gte?: InputMaybe<Scalars['String']>;
  displayName_lte?: InputMaybe<Scalars['String']>;
  displayName_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_contains?: InputMaybe<Scalars['String']>;
  displayName_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  displayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  displayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  displayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  operatorOf_?: InputMaybe<NETWORK__GraphAccount_filter>;
  operators?: InputMaybe<Array<Scalars['String']>>;
  operators_not?: InputMaybe<Array<Scalars['String']>>;
  operators_contains?: InputMaybe<Array<Scalars['String']>>;
  operators_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  operators_not_contains?: InputMaybe<Array<Scalars['String']>>;
  operators_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  operators_?: InputMaybe<NETWORK__GraphAccount_filter>;
  balance?: InputMaybe<Scalars['BigInt']>;
  balance_not?: InputMaybe<Scalars['BigInt']>;
  balance_gt?: InputMaybe<Scalars['BigInt']>;
  balance_lt?: InputMaybe<Scalars['BigInt']>;
  balance_gte?: InputMaybe<Scalars['BigInt']>;
  balance_lte?: InputMaybe<Scalars['BigInt']>;
  balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curationApproval?: InputMaybe<Scalars['BigInt']>;
  curationApproval_not?: InputMaybe<Scalars['BigInt']>;
  curationApproval_gt?: InputMaybe<Scalars['BigInt']>;
  curationApproval_lt?: InputMaybe<Scalars['BigInt']>;
  curationApproval_gte?: InputMaybe<Scalars['BigInt']>;
  curationApproval_lte?: InputMaybe<Scalars['BigInt']>;
  curationApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curationApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakingApproval?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_not?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_gt?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_lt?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_gte?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_lte?: InputMaybe<Scalars['BigInt']>;
  stakingApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakingApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gnsApproval?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_not?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_gt?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_lt?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_gte?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_lte?: InputMaybe<Scalars['BigInt']>;
  gnsApproval_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gnsApproval_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphs_?: InputMaybe<NETWORK__Subgraph_filter>;
  developerCreatedAt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_not?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_gt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_lt?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_gte?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_lte?: InputMaybe<Scalars['Int']>;
  developerCreatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  developerCreatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphQueryFees?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  subgraphQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdDisputes_?: InputMaybe<NETWORK__Dispute_filter>;
  disputesAgainst_?: InputMaybe<NETWORK__Dispute_filter>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<NETWORK__Curator_filter>;
  indexer?: InputMaybe<Scalars['String']>;
  indexer_not?: InputMaybe<Scalars['String']>;
  indexer_gt?: InputMaybe<Scalars['String']>;
  indexer_lt?: InputMaybe<Scalars['String']>;
  indexer_gte?: InputMaybe<Scalars['String']>;
  indexer_lte?: InputMaybe<Scalars['String']>;
  indexer_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_not_in?: InputMaybe<Array<Scalars['String']>>;
  indexer_contains?: InputMaybe<Scalars['String']>;
  indexer_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_contains?: InputMaybe<Scalars['String']>;
  indexer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  indexer_starts_with?: InputMaybe<Scalars['String']>;
  indexer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with?: InputMaybe<Scalars['String']>;
  indexer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_ends_with?: InputMaybe<Scalars['String']>;
  indexer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with?: InputMaybe<Scalars['String']>;
  indexer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  indexer_?: InputMaybe<NETWORK__Indexer_filter>;
  delegator?: InputMaybe<Scalars['String']>;
  delegator_not?: InputMaybe<Scalars['String']>;
  delegator_gt?: InputMaybe<Scalars['String']>;
  delegator_lt?: InputMaybe<Scalars['String']>;
  delegator_gte?: InputMaybe<Scalars['String']>;
  delegator_lte?: InputMaybe<Scalars['String']>;
  delegator_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_not_in?: InputMaybe<Array<Scalars['String']>>;
  delegator_contains?: InputMaybe<Scalars['String']>;
  delegator_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_contains?: InputMaybe<Scalars['String']>;
  delegator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  delegator_starts_with?: InputMaybe<Scalars['String']>;
  delegator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with?: InputMaybe<Scalars['String']>;
  delegator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_ends_with?: InputMaybe<Scalars['String']>;
  delegator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with?: InputMaybe<Scalars['String']>;
  delegator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  delegator_?: InputMaybe<NETWORK__Delegator_filter>;
  nameSignalTransactions_?: InputMaybe<NETWORK__NameSignalTransaction_filter>;
  tokenLockWallets?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_not?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_contains?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  tokenLockWallets_?: InputMaybe<NETWORK__TokenLockWallet_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__GraphAccount_orderBy =
  | 'id'
  | 'names'
  | 'defaultName'
  | 'createdAt'
  | 'defaultDisplayName'
  | 'isOrganization'
  | 'metadataHash'
  | 'codeRepository'
  | 'description'
  | 'image'
  | 'website'
  | 'displayName'
  | 'operatorOf'
  | 'operators'
  | 'balance'
  | 'curationApproval'
  | 'stakingApproval'
  | 'gnsApproval'
  | 'subgraphs'
  | 'developerCreatedAt'
  | 'subgraphQueryFees'
  | 'createdDisputes'
  | 'disputesAgainst'
  | 'curator'
  | 'indexer'
  | 'delegator'
  | 'nameSignalTransactions'
  | 'tokenLockWallets';

/**
 * Graph Network global parameters and contract addresses
 *
 */
export type NETWORK__GraphNetwork = {
  /** ID is set to 1 */
  id: Scalars['ID'];
  /** Controller address */
  controller: Scalars['NETWORK__Bytes'];
  /** Graph token address */
  graphToken: Scalars['NETWORK__Bytes'];
  /** Epoch manager address */
  epochManager: Scalars['NETWORK__Bytes'];
  /** Epoch Manager implementations. Last in the array is current */
  epochManagerImplementations: Array<Scalars['NETWORK__Bytes']>;
  /** Curation address */
  curation: Scalars['NETWORK__Bytes'];
  /** Curation implementations. Last in the array is current */
  curationImplementations: Array<Scalars['NETWORK__Bytes']>;
  /** Staking address */
  staking: Scalars['NETWORK__Bytes'];
  /** Graph token implementations. Last in the array is current */
  stakingImplementations: Array<Scalars['NETWORK__Bytes']>;
  /** Dispute manager address */
  disputeManager: Scalars['NETWORK__Bytes'];
  /** GNS address */
  gns: Scalars['NETWORK__Bytes'];
  /** Service registry address */
  serviceRegistry: Scalars['NETWORK__Bytes'];
  /** Rewards manager address */
  rewardsManager: Scalars['NETWORK__Bytes'];
  /** Rewards Manager implementations. Last in the array is current */
  rewardsManagerImplementations: Array<Scalars['NETWORK__Bytes']>;
  /** True if the protocol is paused */
  isPaused: Scalars['Boolean'];
  /** True if the protocol is partially paused */
  isPartialPaused: Scalars['Boolean'];
  /** Governor of the controller (i.e. the whole protocol) */
  governor: Scalars['NETWORK__Bytes'];
  /** Pause guardian address */
  pauseGuardian: Scalars['NETWORK__Bytes'];
  /** Percentage of fees going to curators. In parts per million */
  curationPercentage: Scalars['Int'];
  /** Percentage of fees burn as protocol fee. In parts per million */
  protocolFeePercentage: Scalars['Int'];
  /** Ratio of max staked delegation tokens to indexers stake that earns rewards */
  delegationRatio: Scalars['Int'];
  /** Epochs to wait before fees can be claimed in rebate pool */
  channelDisputeEpochs: Scalars['Int'];
  /** Epochs to wait before delegators can settle */
  maxAllocationEpochs: Scalars['Int'];
  /** Time in blocks needed to wait to unstake */
  thawingPeriod: Scalars['Int'];
  /** Minimum time an Indexer must use for resetting their Delegation parameters */
  delegationParametersCooldown: Scalars['Int'];
  /** Minimum GRT an indexer must stake */
  minimumIndexerStake: Scalars['BigInt'];
  /** Contracts that have been approved to be a slasher */
  slashers?: Maybe<Array<Scalars['NETWORK__Bytes']>>;
  /** Time in epochs a delegator needs to wait to withdraw delegated stake */
  delegationUnbondingPeriod: Scalars['Int'];
  /** Alpha in the cobbs douglas formula */
  rebateRatio: Scalars['NETWORK__BigDecimal'];
  /** Tax that delegators pay to deposit. In Parts per million */
  delegationTaxPercentage: Scalars['Int'];
  /** Asset holder for the protocol */
  assetHolders?: Maybe<Array<Scalars['NETWORK__Bytes']>>;
  /** The total amount of GRT staked in the staking contract */
  totalTokensStaked: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Total tokens that are settled and waiting to be claimed */
  totalTokensClaimable: Scalars['BigInt'];
  /** Total tokens that are currently locked or withdrawable in the network from unstaking */
  totalUnstakedTokensLocked: Scalars['BigInt'];
  /** Total GRT currently in allocation */
  totalTokensAllocated: Scalars['BigInt'];
  /** Total delegated tokens in the protocol */
  totalDelegatedTokens: Scalars['BigInt'];
  /** The total amount of GRT signalled in the Curation contract */
  totalTokensSignalled: Scalars['BigInt'];
  /** Total GRT currently curating via the Auto-Migrate function */
  totalTokensSignalledAutoMigrate: Scalars['NETWORK__BigDecimal'];
  /** Total GRT currently curating to a specific version */
  totalTokensSignalledDirectly: Scalars['NETWORK__BigDecimal'];
  /** Total query fees generated in the network */
  totalQueryFees: Scalars['BigInt'];
  /** Total query fees collected by indexers */
  totalIndexerQueryFeesCollected: Scalars['BigInt'];
  /** Total query fees rebates claimed by indexers */
  totalIndexerQueryFeeRebates: Scalars['BigInt'];
  /** Total query fees rebates claimed by delegators */
  totalDelegatorQueryFeeRebates: Scalars['BigInt'];
  /** Total query fees payed to curators */
  totalCuratorQueryFees: Scalars['BigInt'];
  /** Total protocol taxes applied to the query fees */
  totalTaxedQueryFees: Scalars['BigInt'];
  /** Total unclaimed rebates. Includes unclaimed rebates, and rebates lost in cobbs douglas  */
  totalUnclaimedQueryFeeRebates: Scalars['BigInt'];
  /** Total indexing rewards minted */
  totalIndexingRewards: Scalars['BigInt'];
  /** Total indexing rewards minted to Delegators */
  totalIndexingDelegatorRewards: Scalars['BigInt'];
  /** Total indexing rewards minted to Indexers */
  totalIndexingIndexerRewards: Scalars['BigInt'];
  /** The issuance rate of GRT per block. To get annual rate do (networkGRTIssuance * 10^-18)^(blocksPerYear) */
  networkGRTIssuance: Scalars['BigInt'];
  /** Address of the availability oracle */
  subgraphAvailabilityOracle: Scalars['NETWORK__Bytes'];
  /** Default reserve ratio for all subgraphs. In parts per million */
  defaultReserveRatio: Scalars['Int'];
  /** Minimum amount of tokens needed to start curating */
  minimumCurationDeposit: Scalars['BigInt'];
  /** The fee charged when a curator withdraws signal. In parts per million */
  curationTaxPercentage: Scalars['Int'];
  /** Percentage of the GNS migration tax payed by the subgraph owner */
  ownerTaxPercentage: Scalars['Int'];
  /** Graph Token supply */
  totalSupply: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Price of one GRT in USD */
  GRTinUSD: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Price of one GRT in ETH */
  GRTinETH?: Maybe<Scalars['NETWORK__BigDecimal']>;
  /** Total amount of GRT minted */
  totalGRTMinted: Scalars['BigInt'];
  /** Total amount of GRT burned */
  totalGRTBurned: Scalars['BigInt'];
  /** Epoch Length in blocks */
  epochLength: Scalars['Int'];
  /** Epoch that was last run */
  lastRunEpoch: Scalars['Int'];
  /** Epoch when epoch length was last updated */
  lastLengthUpdateEpoch: Scalars['Int'];
  /** Block when epoch length was last updated */
  lastLengthUpdateBlock: Scalars['Int'];
  /** Current epoch the protocol is in */
  currentEpoch: Scalars['Int'];
  /** Total indexers */
  indexerCount: Scalars['Int'];
  /** Number of indexers that currently have some stake in the protocol */
  stakedIndexersCount: Scalars['Int'];
  /** Total amount of delegators historically */
  delegatorCount: Scalars['Int'];
  /** Total active delegators. Those that still have at least one active delegation. */
  activeDelegatorCount: Scalars['Int'];
  /** Total amount of delegations historically */
  delegationCount: Scalars['Int'];
  /** Total active delegations. Those delegations that still have GRT staked towards an indexer */
  activeDelegationCount: Scalars['Int'];
  /** Total amount of curators historically */
  curatorCount: Scalars['Int'];
  /** Total amount of curators historically */
  activeCuratorCount: Scalars['Int'];
  /** Total amount of Subgraph entities */
  subgraphCount: Scalars['Int'];
  /** Amount of active Subgraph entities */
  activeSubgraphCount: Scalars['Int'];
  /** Total amount of SubgraphDeployment entities */
  subgraphDeploymentCount: Scalars['Int'];
  /** Total epochs */
  epochCount: Scalars['Int'];
  /** Dispute arbitrator */
  arbitrator: Scalars['NETWORK__Bytes'];
  /** Penalty to Indexer on successful disputes for query disputes. In parts per million */
  querySlashingPercentage: Scalars['Int'];
  /** Penalty to Indexer on successful disputes for indexing disputes. In parts per million */
  indexingSlashingPercentage: Scalars['Int'];
  /** [DEPRECATED] Penalty to Indexer on successful disputes for indexing disputes. In parts per million */
  slashingPercentage: Scalars['Int'];
  /** Minimum deposit to create a dispute */
  minimumDisputeDeposit: Scalars['BigInt'];
  /** Reward to Fisherman on successful disputes. In parts per million */
  fishermanRewardPercentage: Scalars['Int'];
  /** Total amount of GRT deposited to the L1 gateway. Note that the actual amount claimed in L2 might be lower due to tickets not redeemed. */
  totalGRTDeposited: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Total amount of GRT withdrawn from the L2 gateway and claimed in L1. */
  totalGRTWithdrawnConfirmed: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Total amount of GRT deposited to the L1 gateway and redeemed in L2. */
  totalGRTDepositedConfirmed: Scalars['BigInt'];
  /** Total amount of GRT withdrawn from the L2 gateway. Note that the actual amount claimed in L1 might be lower due to outbound transactions not finalized. */
  totalGRTWithdrawn: Scalars['BigInt'];
  /** Block number for L1. Only implemented for L2 deployments to properly reflect the L1 block used for timings */
  currentL1BlockNumber?: Maybe<Scalars['BigInt']>;
};

export type NETWORK__GraphNetwork_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  controller?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  controller_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  controller_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  controller_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  graphToken_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  graphToken_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  graphToken_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManager_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManager_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManager_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  epochManagerImplementations?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManagerImplementations_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManagerImplementations_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManagerImplementations_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManagerImplementations_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  epochManagerImplementations_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curation?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curation_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curation_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curation_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curationImplementations?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curationImplementations_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curationImplementations_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curationImplementations_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curationImplementations_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  curationImplementations_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  staking?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  staking_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  staking_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  staking_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  stakingImplementations?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  stakingImplementations_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  stakingImplementations_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  stakingImplementations_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  stakingImplementations_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  stakingImplementations_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  disputeManager?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  disputeManager_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  disputeManager_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  disputeManager_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  gns_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  gns_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  gns_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  serviceRegistry_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  serviceRegistry_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  serviceRegistry_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManager_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManager_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManager_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  rewardsManagerImplementations?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManagerImplementations_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManagerImplementations_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManagerImplementations_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManagerImplementations_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  rewardsManagerImplementations_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  isPaused?: InputMaybe<Scalars['Boolean']>;
  isPaused_not?: InputMaybe<Scalars['Boolean']>;
  isPaused_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isPaused_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isPartialPaused?: InputMaybe<Scalars['Boolean']>;
  isPartialPaused_not?: InputMaybe<Scalars['Boolean']>;
  isPartialPaused_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isPartialPaused_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  governor?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  governor_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  governor_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  governor_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  pauseGuardian_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  pauseGuardian_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  pauseGuardian_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  curationPercentage?: InputMaybe<Scalars['Int']>;
  curationPercentage_not?: InputMaybe<Scalars['Int']>;
  curationPercentage_gt?: InputMaybe<Scalars['Int']>;
  curationPercentage_lt?: InputMaybe<Scalars['Int']>;
  curationPercentage_gte?: InputMaybe<Scalars['Int']>;
  curationPercentage_lte?: InputMaybe<Scalars['Int']>;
  curationPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  curationPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  protocolFeePercentage?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_not?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_gt?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_lt?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_gte?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_lte?: InputMaybe<Scalars['Int']>;
  protocolFeePercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  protocolFeePercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationRatio?: InputMaybe<Scalars['Int']>;
  delegationRatio_not?: InputMaybe<Scalars['Int']>;
  delegationRatio_gt?: InputMaybe<Scalars['Int']>;
  delegationRatio_lt?: InputMaybe<Scalars['Int']>;
  delegationRatio_gte?: InputMaybe<Scalars['Int']>;
  delegationRatio_lte?: InputMaybe<Scalars['Int']>;
  delegationRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  channelDisputeEpochs?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_not?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_gt?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_lt?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_gte?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_lte?: InputMaybe<Scalars['Int']>;
  channelDisputeEpochs_in?: InputMaybe<Array<Scalars['Int']>>;
  channelDisputeEpochs_not_in?: InputMaybe<Array<Scalars['Int']>>;
  maxAllocationEpochs?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_not?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_gt?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_lt?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_gte?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_lte?: InputMaybe<Scalars['Int']>;
  maxAllocationEpochs_in?: InputMaybe<Array<Scalars['Int']>>;
  maxAllocationEpochs_not_in?: InputMaybe<Array<Scalars['Int']>>;
  thawingPeriod?: InputMaybe<Scalars['Int']>;
  thawingPeriod_not?: InputMaybe<Scalars['Int']>;
  thawingPeriod_gt?: InputMaybe<Scalars['Int']>;
  thawingPeriod_lt?: InputMaybe<Scalars['Int']>;
  thawingPeriod_gte?: InputMaybe<Scalars['Int']>;
  thawingPeriod_lte?: InputMaybe<Scalars['Int']>;
  thawingPeriod_in?: InputMaybe<Array<Scalars['Int']>>;
  thawingPeriod_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationParametersCooldown?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_not?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_gt?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_lt?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_gte?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_lte?: InputMaybe<Scalars['Int']>;
  delegationParametersCooldown_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationParametersCooldown_not_in?: InputMaybe<Array<Scalars['Int']>>;
  minimumIndexerStake?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_not?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_gt?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_lt?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_gte?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_lte?: InputMaybe<Scalars['BigInt']>;
  minimumIndexerStake_in?: InputMaybe<Array<Scalars['BigInt']>>;
  minimumIndexerStake_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slashers?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  slashers_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  slashers_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  slashers_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  slashers_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  slashers_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  delegationUnbondingPeriod?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_not?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_gt?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_lt?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_gte?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_lte?: InputMaybe<Scalars['Int']>;
  delegationUnbondingPeriod_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationUnbondingPeriod_not_in?: InputMaybe<Array<Scalars['Int']>>;
  rebateRatio?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  rebateRatio_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  rebateRatio_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegationTaxPercentage?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_not?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_gt?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_lt?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_gte?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_lte?: InputMaybe<Scalars['Int']>;
  delegationTaxPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationTaxPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  assetHolders?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  assetHolders_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  assetHolders_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  assetHolders_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  assetHolders_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  assetHolders_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  totalTokensStaked?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensStaked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensStaked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensClaimable?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensClaimable_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensClaimable_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_not?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnstakedTokensLocked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnstakedTokensLocked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensAllocated_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensAllocated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_not?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lt?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_gte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_lte?: InputMaybe<Scalars['BigInt']>;
  totalTokensSignalled_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalled_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTokensSignalledAutoMigrate?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledAutoMigrate_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalTokensSignalledAutoMigrate_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalTokensSignalledDirectly?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalTokensSignalledDirectly_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalTokensSignalledDirectly_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexerQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexerQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalDelegatorQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalDelegatorQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalCuratorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalCuratorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalTaxedQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalTaxedQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  totalUnclaimedQueryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalUnclaimedQueryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingDelegatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingDelegatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_not?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lt?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_gte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_lte?: InputMaybe<Scalars['BigInt']>;
  totalIndexingIndexerRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalIndexingIndexerRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  networkGRTIssuance?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_not?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_gt?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_lt?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_gte?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_lte?: InputMaybe<Scalars['BigInt']>;
  networkGRTIssuance_in?: InputMaybe<Array<Scalars['BigInt']>>;
  networkGRTIssuance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphAvailabilityOracle?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  subgraphAvailabilityOracle_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  subgraphAvailabilityOracle_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphAvailabilityOracle_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  defaultReserveRatio?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_not?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lt?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_gte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_lte?: InputMaybe<Scalars['Int']>;
  defaultReserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  defaultReserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  minimumCurationDeposit?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_not?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_gt?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_lt?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_gte?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_lte?: InputMaybe<Scalars['BigInt']>;
  minimumCurationDeposit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  minimumCurationDeposit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curationTaxPercentage?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_not?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_gt?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_lt?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_gte?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_lte?: InputMaybe<Scalars['Int']>;
  curationTaxPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  curationTaxPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  ownerTaxPercentage?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_not?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_gt?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_lt?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_gte?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_lte?: InputMaybe<Scalars['Int']>;
  ownerTaxPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  ownerTaxPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  GRTinUSD?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinUSD_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  GRTinUSD_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  GRTinETH?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  GRTinETH_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  GRTinETH_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalGRTMinted?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTMinted_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTMinted_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTBurned?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTBurned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTBurned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  epochLength?: InputMaybe<Scalars['Int']>;
  epochLength_not?: InputMaybe<Scalars['Int']>;
  epochLength_gt?: InputMaybe<Scalars['Int']>;
  epochLength_lt?: InputMaybe<Scalars['Int']>;
  epochLength_gte?: InputMaybe<Scalars['Int']>;
  epochLength_lte?: InputMaybe<Scalars['Int']>;
  epochLength_in?: InputMaybe<Array<Scalars['Int']>>;
  epochLength_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastRunEpoch?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_not?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_gt?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_lt?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_gte?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_lte?: InputMaybe<Scalars['Int']>;
  lastRunEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  lastRunEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastLengthUpdateEpoch?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_not?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_gt?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_lt?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_gte?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_lte?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  lastLengthUpdateEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastLengthUpdateBlock?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_not?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_gt?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_lt?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_gte?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_lte?: InputMaybe<Scalars['Int']>;
  lastLengthUpdateBlock_in?: InputMaybe<Array<Scalars['Int']>>;
  lastLengthUpdateBlock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  currentEpoch?: InputMaybe<Scalars['Int']>;
  currentEpoch_not?: InputMaybe<Scalars['Int']>;
  currentEpoch_gt?: InputMaybe<Scalars['Int']>;
  currentEpoch_lt?: InputMaybe<Scalars['Int']>;
  currentEpoch_gte?: InputMaybe<Scalars['Int']>;
  currentEpoch_lte?: InputMaybe<Scalars['Int']>;
  currentEpoch_in?: InputMaybe<Array<Scalars['Int']>>;
  currentEpoch_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount?: InputMaybe<Scalars['Int']>;
  indexerCount_not?: InputMaybe<Scalars['Int']>;
  indexerCount_gt?: InputMaybe<Scalars['Int']>;
  indexerCount_lt?: InputMaybe<Scalars['Int']>;
  indexerCount_gte?: InputMaybe<Scalars['Int']>;
  indexerCount_lte?: InputMaybe<Scalars['Int']>;
  indexerCount_in?: InputMaybe<Array<Scalars['Int']>>;
  indexerCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_not?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lt?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_gte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_lte?: InputMaybe<Scalars['Int']>;
  stakedIndexersCount_in?: InputMaybe<Array<Scalars['Int']>>;
  stakedIndexersCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount?: InputMaybe<Scalars['Int']>;
  delegatorCount_not?: InputMaybe<Scalars['Int']>;
  delegatorCount_gt?: InputMaybe<Scalars['Int']>;
  delegatorCount_lt?: InputMaybe<Scalars['Int']>;
  delegatorCount_gte?: InputMaybe<Scalars['Int']>;
  delegatorCount_lte?: InputMaybe<Scalars['Int']>;
  delegatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeDelegatorCount?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_not?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_gt?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_lt?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_gte?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_lte?: InputMaybe<Scalars['Int']>;
  activeDelegatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeDelegatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationCount?: InputMaybe<Scalars['Int']>;
  delegationCount_not?: InputMaybe<Scalars['Int']>;
  delegationCount_gt?: InputMaybe<Scalars['Int']>;
  delegationCount_lt?: InputMaybe<Scalars['Int']>;
  delegationCount_gte?: InputMaybe<Scalars['Int']>;
  delegationCount_lte?: InputMaybe<Scalars['Int']>;
  delegationCount_in?: InputMaybe<Array<Scalars['Int']>>;
  delegationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeDelegationCount?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_not?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_gt?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_lt?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_gte?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_lte?: InputMaybe<Scalars['Int']>;
  activeDelegationCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeDelegationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount?: InputMaybe<Scalars['Int']>;
  curatorCount_not?: InputMaybe<Scalars['Int']>;
  curatorCount_gt?: InputMaybe<Scalars['Int']>;
  curatorCount_lt?: InputMaybe<Scalars['Int']>;
  curatorCount_gte?: InputMaybe<Scalars['Int']>;
  curatorCount_lte?: InputMaybe<Scalars['Int']>;
  curatorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  curatorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeCuratorCount?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_not?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_gt?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_lt?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_gte?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_lte?: InputMaybe<Scalars['Int']>;
  activeCuratorCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeCuratorCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount?: InputMaybe<Scalars['Int']>;
  subgraphCount_not?: InputMaybe<Scalars['Int']>;
  subgraphCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSubgraphCount?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_not?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_gt?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_lt?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_gte?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_lte?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSubgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_not?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphDeploymentCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphDeploymentCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  epochCount?: InputMaybe<Scalars['Int']>;
  epochCount_not?: InputMaybe<Scalars['Int']>;
  epochCount_gt?: InputMaybe<Scalars['Int']>;
  epochCount_lt?: InputMaybe<Scalars['Int']>;
  epochCount_gte?: InputMaybe<Scalars['Int']>;
  epochCount_lte?: InputMaybe<Scalars['Int']>;
  epochCount_in?: InputMaybe<Array<Scalars['Int']>>;
  epochCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  arbitrator?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  arbitrator_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  arbitrator_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  arbitrator_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  querySlashingPercentage?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_not?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_gt?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_lt?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_gte?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_lte?: InputMaybe<Scalars['Int']>;
  querySlashingPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  querySlashingPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingSlashingPercentage?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_not?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_gt?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_lt?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_gte?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_lte?: InputMaybe<Scalars['Int']>;
  indexingSlashingPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingSlashingPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  slashingPercentage?: InputMaybe<Scalars['Int']>;
  slashingPercentage_not?: InputMaybe<Scalars['Int']>;
  slashingPercentage_gt?: InputMaybe<Scalars['Int']>;
  slashingPercentage_lt?: InputMaybe<Scalars['Int']>;
  slashingPercentage_gte?: InputMaybe<Scalars['Int']>;
  slashingPercentage_lte?: InputMaybe<Scalars['Int']>;
  slashingPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  slashingPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  minimumDisputeDeposit?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_not?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_gt?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_lt?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_gte?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_lte?: InputMaybe<Scalars['BigInt']>;
  minimumDisputeDeposit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  minimumDisputeDeposit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  fishermanRewardPercentage?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_not?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_gt?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_lt?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_gte?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_lte?: InputMaybe<Scalars['Int']>;
  fishermanRewardPercentage_in?: InputMaybe<Array<Scalars['Int']>>;
  fishermanRewardPercentage_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalGRTDeposited?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTDeposited_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTDeposited_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTWithdrawnConfirmed?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawnConfirmed_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTWithdrawnConfirmed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTDepositedConfirmed?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTDepositedConfirmed_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTDepositedConfirmed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTWithdrawn?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_not?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_gt?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_lt?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_gte?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_lte?: InputMaybe<Scalars['BigInt']>;
  totalGRTWithdrawn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalGRTWithdrawn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  currentL1BlockNumber?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  currentL1BlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  currentL1BlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__GraphNetwork_orderBy =
  | 'id'
  | 'controller'
  | 'graphToken'
  | 'epochManager'
  | 'epochManagerImplementations'
  | 'curation'
  | 'curationImplementations'
  | 'staking'
  | 'stakingImplementations'
  | 'disputeManager'
  | 'gns'
  | 'serviceRegistry'
  | 'rewardsManager'
  | 'rewardsManagerImplementations'
  | 'isPaused'
  | 'isPartialPaused'
  | 'governor'
  | 'pauseGuardian'
  | 'curationPercentage'
  | 'protocolFeePercentage'
  | 'delegationRatio'
  | 'channelDisputeEpochs'
  | 'maxAllocationEpochs'
  | 'thawingPeriod'
  | 'delegationParametersCooldown'
  | 'minimumIndexerStake'
  | 'slashers'
  | 'delegationUnbondingPeriod'
  | 'rebateRatio'
  | 'delegationTaxPercentage'
  | 'assetHolders'
  | 'totalTokensStaked'
  | 'totalTokensClaimable'
  | 'totalUnstakedTokensLocked'
  | 'totalTokensAllocated'
  | 'totalDelegatedTokens'
  | 'totalTokensSignalled'
  | 'totalTokensSignalledAutoMigrate'
  | 'totalTokensSignalledDirectly'
  | 'totalQueryFees'
  | 'totalIndexerQueryFeesCollected'
  | 'totalIndexerQueryFeeRebates'
  | 'totalDelegatorQueryFeeRebates'
  | 'totalCuratorQueryFees'
  | 'totalTaxedQueryFees'
  | 'totalUnclaimedQueryFeeRebates'
  | 'totalIndexingRewards'
  | 'totalIndexingDelegatorRewards'
  | 'totalIndexingIndexerRewards'
  | 'networkGRTIssuance'
  | 'subgraphAvailabilityOracle'
  | 'defaultReserveRatio'
  | 'minimumCurationDeposit'
  | 'curationTaxPercentage'
  | 'ownerTaxPercentage'
  | 'totalSupply'
  | 'GRTinUSD'
  | 'GRTinETH'
  | 'totalGRTMinted'
  | 'totalGRTBurned'
  | 'epochLength'
  | 'lastRunEpoch'
  | 'lastLengthUpdateEpoch'
  | 'lastLengthUpdateBlock'
  | 'currentEpoch'
  | 'indexerCount'
  | 'stakedIndexersCount'
  | 'delegatorCount'
  | 'activeDelegatorCount'
  | 'delegationCount'
  | 'activeDelegationCount'
  | 'curatorCount'
  | 'activeCuratorCount'
  | 'subgraphCount'
  | 'activeSubgraphCount'
  | 'subgraphDeploymentCount'
  | 'epochCount'
  | 'arbitrator'
  | 'querySlashingPercentage'
  | 'indexingSlashingPercentage'
  | 'slashingPercentage'
  | 'minimumDisputeDeposit'
  | 'fishermanRewardPercentage'
  | 'totalGRTDeposited'
  | 'totalGRTWithdrawnConfirmed'
  | 'totalGRTDepositedConfirmed'
  | 'totalGRTWithdrawn'
  | 'currentL1BlockNumber';

/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type NETWORK__Indexer = {
  /** Eth address of Indexer */
  id: Scalars['ID'];
  /** Time this indexer was created */
  createdAt: Scalars['Int'];
  /** Graph account of this indexer */
  account: NETWORK__GraphAccount;
  /** Service registry URL for the indexer */
  url?: Maybe<Scalars['String']>;
  /** Geohash of the indexer. Shows where their indexer is located in the world */
  geoHash?: Maybe<Scalars['String']>;
  /** Default display name is the current default name. Used for filtered queries */
  defaultDisplayName?: Maybe<Scalars['String']>;
  /** CURRENT tokens staked in the protocol. Decreases on withdraw, not on lock */
  stakedTokens: Scalars['BigInt'];
  /** CURRENT  tokens allocated on all subgraphs */
  allocatedTokens: Scalars['BigInt'];
  /** NOT IMPLEMENTED - Tokens that have been unstaked and withdrawn */
  unstakedTokens: Scalars['BigInt'];
  /** CURRENT tokens locked */
  lockedTokens: Scalars['BigInt'];
  /** The block when the Indexers tokens unlock */
  tokensLockedUntil: Scalars['Int'];
  /** Active allocations of stake for this Indexer */
  allocations: Array<NETWORK__Allocation>;
  /** All allocations of stake for this Indexer (i.e. closed and active) */
  totalAllocations: Array<NETWORK__Allocation>;
  /** Number of active allocations of stake for this Indexer */
  allocationCount: Scalars['Int'];
  /** All allocations for this Indexer (i.e. closed and active) */
  totalAllocationCount: Scalars['BigInt'];
  /** Total query fees collected. Includes the portion given to delegators */
  queryFeesCollected: Scalars['BigInt'];
  /** Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators */
  queryFeeRebates: Scalars['BigInt'];
  /** Total indexing rewards earned by this indexer from inflation. Including delegation rewards */
  rewardsEarned: Scalars['BigInt'];
  /** The total amount of indexing rewards the indexer kept */
  indexerIndexingRewards: Scalars['BigInt'];
  /** The total amount of indexing rewards given to delegators */
  delegatorIndexingRewards: Scalars['BigInt'];
  /** Percentage of indexers' own rewards received in relation to its own stake. 1 (100%) means that the indexer is receiving the exact amount that is generated by his own stake */
  indexerRewardsOwnGenerationRatio: Scalars['NETWORK__BigDecimal'];
  /** Amount of delegated tokens that can be eligible for rewards */
  delegatedCapacity: Scalars['BigInt'];
  /** Total token capacity = delegatedCapacity + stakedTokens */
  tokenCapacity: Scalars['BigInt'];
  /** Stake available to earn rewards. tokenCapacity - allocationTokens - lockedTokens */
  availableStake: Scalars['BigInt'];
  /** Delegators to this Indexer */
  delegators: Array<NETWORK__DelegatedStake>;
  /** CURRENT tokens delegated to the indexer */
  delegatedTokens: Scalars['BigInt'];
  /** Ratio between the amount of the indexers own stake over the total usable stake. */
  ownStakeRatio: Scalars['NETWORK__BigDecimal'];
  /** Ratio between the amount of delegated stake over the total usable stake. */
  delegatedStakeRatio: Scalars['NETWORK__BigDecimal'];
  /** Total shares of the delegator pool */
  delegatorShares: Scalars['BigInt'];
  /** Exchange rate of of tokens received for each share */
  delegationExchangeRate: Scalars['NETWORK__BigDecimal'];
  /** The percent of indexing rewards generated by the total stake that the Indexer keeps for itself. In parts per million */
  indexingRewardCut: Scalars['Int'];
  /** The percent of indexing rewards generated by the delegated stake that the Indexer keeps for itself */
  indexingRewardEffectiveCut: Scalars['NETWORK__BigDecimal'];
  /** The percent of reward dilution delegators experience because of overdelegation. Overdelegated stake can't be used to generate rewards but still gets accounted while distributing the generated rewards. This causes dilution of the rewards for the rest of the pool. */
  overDelegationDilution: Scalars['NETWORK__BigDecimal'];
  /** The total amount of query fees given to delegators */
  delegatorQueryFees: Scalars['BigInt'];
  /** The percent of query rebate rewards the Indexer keeps for itself. In parts per million */
  queryFeeCut: Scalars['Int'];
  /** The percent of query rebate rewards generated by the delegated stake that the Indexer keeps for itself */
  queryFeeEffectiveCut: Scalars['NETWORK__BigDecimal'];
  /** Amount of blocks a delegator chooses for the waiting period for changing their params */
  delegatorParameterCooldown: Scalars['Int'];
  /** Block number for the last time the delegator updated their parameters */
  lastDelegationParameterUpdate: Scalars['Int'];
  /** Count of how many times this indexer has been forced to close an allocation */
  forcedClosures: Scalars['Int'];
  /** NOT IMPLEMENTED - Total return this indexer has earned */
  totalReturn: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Annualized rate of return for the indexer */
  annualizedReturn: Scalars['NETWORK__BigDecimal'];
  /** NOT IMPLEMENTED - Staking efficiency of the indexer */
  stakingEfficiency: Scalars['NETWORK__BigDecimal'];
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type NETWORK__IndexerallocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type NETWORK__IndexertotalAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
};


/**
 * Metadata for the Indexer along with parameters and staking data
 *
 */
export type NETWORK__IndexerdelegatorsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__DelegatedStake_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__DelegatedStake_filter>;
};

export type NETWORK__Indexer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  account?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<NETWORK__GraphAccount_filter>;
  url?: InputMaybe<Scalars['String']>;
  url_not?: InputMaybe<Scalars['String']>;
  url_gt?: InputMaybe<Scalars['String']>;
  url_lt?: InputMaybe<Scalars['String']>;
  url_gte?: InputMaybe<Scalars['String']>;
  url_lte?: InputMaybe<Scalars['String']>;
  url_in?: InputMaybe<Array<Scalars['String']>>;
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_contains_nocase?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_contains_nocase?: InputMaybe<Scalars['String']>;
  url_starts_with?: InputMaybe<Scalars['String']>;
  url_starts_with_nocase?: InputMaybe<Scalars['String']>;
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  url_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  url_ends_with?: InputMaybe<Scalars['String']>;
  url_ends_with_nocase?: InputMaybe<Scalars['String']>;
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  url_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash?: InputMaybe<Scalars['String']>;
  geoHash_not?: InputMaybe<Scalars['String']>;
  geoHash_gt?: InputMaybe<Scalars['String']>;
  geoHash_lt?: InputMaybe<Scalars['String']>;
  geoHash_gte?: InputMaybe<Scalars['String']>;
  geoHash_lte?: InputMaybe<Scalars['String']>;
  geoHash_in?: InputMaybe<Array<Scalars['String']>>;
  geoHash_not_in?: InputMaybe<Array<Scalars['String']>>;
  geoHash_contains?: InputMaybe<Scalars['String']>;
  geoHash_contains_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_contains?: InputMaybe<Scalars['String']>;
  geoHash_not_contains_nocase?: InputMaybe<Scalars['String']>;
  geoHash_starts_with?: InputMaybe<Scalars['String']>;
  geoHash_starts_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_starts_with?: InputMaybe<Scalars['String']>;
  geoHash_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_ends_with?: InputMaybe<Scalars['String']>;
  geoHash_ends_with_nocase?: InputMaybe<Scalars['String']>;
  geoHash_not_ends_with?: InputMaybe<Scalars['String']>;
  geoHash_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lt?: InputMaybe<Scalars['String']>;
  defaultDisplayName_gte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_lte?: InputMaybe<Scalars['String']>;
  defaultDisplayName_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  defaultDisplayName_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with?: InputMaybe<Scalars['String']>;
  defaultDisplayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  allocatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unstakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unstakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_not?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  lockedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lockedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensLockedUntil?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_not?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_lt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_lte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_in?: InputMaybe<Array<Scalars['Int']>>;
  tokensLockedUntil_not_in?: InputMaybe<Array<Scalars['Int']>>;
  allocations_?: InputMaybe<NETWORK__Allocation_filter>;
  totalAllocations_?: InputMaybe<NETWORK__Allocation_filter>;
  allocationCount?: InputMaybe<Scalars['Int']>;
  allocationCount_not?: InputMaybe<Scalars['Int']>;
  allocationCount_gt?: InputMaybe<Scalars['Int']>;
  allocationCount_lt?: InputMaybe<Scalars['Int']>;
  allocationCount_gte?: InputMaybe<Scalars['Int']>;
  allocationCount_lte?: InputMaybe<Scalars['Int']>;
  allocationCount_in?: InputMaybe<Array<Scalars['Int']>>;
  allocationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalAllocationCount?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_not?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_gt?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_lt?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_gte?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_lte?: InputMaybe<Scalars['BigInt']>;
  totalAllocationCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalAllocationCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesCollected_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesCollected_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rewardsEarned?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_not?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_gt?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_lt?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_gte?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_lte?: InputMaybe<Scalars['BigInt']>;
  rewardsEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rewardsEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  indexerIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_not?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorIndexingRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorIndexingRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerRewardsOwnGenerationRatio?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexerRewardsOwnGenerationRatio_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexerRewardsOwnGenerationRatio_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatedCapacity?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_not?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_gt?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_lt?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_gte?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_lte?: InputMaybe<Scalars['BigInt']>;
  delegatedCapacity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedCapacity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCapacity?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_not?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCapacity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCapacity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake?: InputMaybe<Scalars['BigInt']>;
  availableStake_not?: InputMaybe<Scalars['BigInt']>;
  availableStake_gt?: InputMaybe<Scalars['BigInt']>;
  availableStake_lt?: InputMaybe<Scalars['BigInt']>;
  availableStake_gte?: InputMaybe<Scalars['BigInt']>;
  availableStake_lte?: InputMaybe<Scalars['BigInt']>;
  availableStake_in?: InputMaybe<Array<Scalars['BigInt']>>;
  availableStake_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegators_?: InputMaybe<NETWORK__DelegatedStake_filter>;
  delegatedTokens?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_not?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  delegatedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  ownStakeRatio?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  ownStakeRatio_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  ownStakeRatio_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatedStakeRatio?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegatedStakeRatio_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatedStakeRatio_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatorShares?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_not?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorShares_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorShares_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegationExchangeRate?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  delegationExchangeRate_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegationExchangeRate_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexingRewardCut?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_not?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_gt?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_lt?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_gte?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_lte?: InputMaybe<Scalars['Int']>;
  indexingRewardCut_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardCut_not_in?: InputMaybe<Array<Scalars['Int']>>;
  indexingRewardEffectiveCut?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  indexingRewardEffectiveCut_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  indexingRewardEffectiveCut_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  overDelegationDilution?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  overDelegationDilution_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  overDelegationDilution_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatorQueryFees?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  delegatorQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  delegatorQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeCut?: InputMaybe<Scalars['Int']>;
  queryFeeCut_not?: InputMaybe<Scalars['Int']>;
  queryFeeCut_gt?: InputMaybe<Scalars['Int']>;
  queryFeeCut_lt?: InputMaybe<Scalars['Int']>;
  queryFeeCut_gte?: InputMaybe<Scalars['Int']>;
  queryFeeCut_lte?: InputMaybe<Scalars['Int']>;
  queryFeeCut_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeCut_not_in?: InputMaybe<Array<Scalars['Int']>>;
  queryFeeEffectiveCut?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  queryFeeEffectiveCut_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  queryFeeEffectiveCut_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  delegatorParameterCooldown?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_not?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_gt?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_lt?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_gte?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_lte?: InputMaybe<Scalars['Int']>;
  delegatorParameterCooldown_in?: InputMaybe<Array<Scalars['Int']>>;
  delegatorParameterCooldown_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegationParameterUpdate?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_not?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_gt?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_lt?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_gte?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_lte?: InputMaybe<Scalars['Int']>;
  lastDelegationParameterUpdate_in?: InputMaybe<Array<Scalars['Int']>>;
  lastDelegationParameterUpdate_not_in?: InputMaybe<Array<Scalars['Int']>>;
  forcedClosures?: InputMaybe<Scalars['Int']>;
  forcedClosures_not?: InputMaybe<Scalars['Int']>;
  forcedClosures_gt?: InputMaybe<Scalars['Int']>;
  forcedClosures_lt?: InputMaybe<Scalars['Int']>;
  forcedClosures_gte?: InputMaybe<Scalars['Int']>;
  forcedClosures_lte?: InputMaybe<Scalars['Int']>;
  forcedClosures_in?: InputMaybe<Array<Scalars['Int']>>;
  forcedClosures_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  totalReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  totalReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  annualizedReturn?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  annualizedReturn_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  annualizedReturn_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  stakingEfficiency?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  stakingEfficiency_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  stakingEfficiency_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Indexer_orderBy =
  | 'id'
  | 'createdAt'
  | 'account'
  | 'url'
  | 'geoHash'
  | 'defaultDisplayName'
  | 'stakedTokens'
  | 'allocatedTokens'
  | 'unstakedTokens'
  | 'lockedTokens'
  | 'tokensLockedUntil'
  | 'allocations'
  | 'totalAllocations'
  | 'allocationCount'
  | 'totalAllocationCount'
  | 'queryFeesCollected'
  | 'queryFeeRebates'
  | 'rewardsEarned'
  | 'indexerIndexingRewards'
  | 'delegatorIndexingRewards'
  | 'indexerRewardsOwnGenerationRatio'
  | 'delegatedCapacity'
  | 'tokenCapacity'
  | 'availableStake'
  | 'delegators'
  | 'delegatedTokens'
  | 'ownStakeRatio'
  | 'delegatedStakeRatio'
  | 'delegatorShares'
  | 'delegationExchangeRate'
  | 'indexingRewardCut'
  | 'indexingRewardEffectiveCut'
  | 'overDelegationDilution'
  | 'delegatorQueryFees'
  | 'queryFeeCut'
  | 'queryFeeEffectiveCut'
  | 'delegatorParameterCooldown'
  | 'lastDelegationParameterUpdate'
  | 'forcedClosures'
  | 'totalReturn'
  | 'annualizedReturn'
  | 'stakingEfficiency';

/**
 * Curator Name Signal for a single Subgraph
 *
 */
export type NETWORK__NameSignal = {
  /** Eth address + subgraph ID */
  id: Scalars['ID'];
  /** Eth address of the curator */
  curator: NETWORK__Curator;
  /** Subgraph being signalled */
  subgraph: NETWORK__Subgraph;
  /** CUMULATIVE number of tokens the curator has signalled */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE number of tokens the curator has unsignalled */
  unsignalledTokens: Scalars['BigInt'];
  /** Tokens the curator has withdrawn from a deprecated name curve */
  withdrawnTokens: Scalars['BigInt'];
  /** Shares of the name pool (GNS) that the curator has from signaling their GRT */
  nameSignal: Scalars['BigInt'];
  /** Actual signal shares that the name pool minted with the GRT provided by the curator */
  signal: Scalars['NETWORK__BigDecimal'];
  /** Block for which the curator last entered or exited the curve */
  lastNameSignalChange: Scalars['Int'];
  /** Summation of realized rewards from before the last time the curator entered the curation curve */
  realizedRewards: Scalars['BigInt'];
  /** [DEPRECATED] Curator average cost basis for this name signal on this subgraph. New field for further versions will be nameSignalAverageCostBasis */
  averageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** [DEPRECATED] nameSignalAverageCostBasis / nameSignal. New field for further versions will be nameSignalAverageCostBasisPerSignal */
  averageCostBasisPerSignal: Scalars['NETWORK__BigDecimal'];
  /** Curator average cost basis for this name signal on this subgraph */
  nameSignalAverageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** nameSignalAverageCostBasis / nameSignal */
  nameSignalAverageCostBasisPerSignal: Scalars['NETWORK__BigDecimal'];
  /** Curator average cost basis for the version signal on this subgraph name pool */
  signalAverageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** signalAverageCostBasis / signal */
  signalAverageCostBasisPerSignal: Scalars['NETWORK__BigDecimal'];
  entityVersion: Scalars['Int'];
  linkedEntity?: Maybe<NETWORK__NameSignal>;
};

/**
 * Auxiliary entity to be able to batch update NameSignal entities
 *
 */
export type NETWORK__NameSignalSubgraphRelation = {
  /** Subgraph ID + index */
  id: Scalars['ID'];
  nameSignal: NETWORK__NameSignal;
  subgraph: NETWORK__Subgraph;
};

export type NETWORK__NameSignalSubgraphRelation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nameSignal?: InputMaybe<Scalars['String']>;
  nameSignal_not?: InputMaybe<Scalars['String']>;
  nameSignal_gt?: InputMaybe<Scalars['String']>;
  nameSignal_lt?: InputMaybe<Scalars['String']>;
  nameSignal_gte?: InputMaybe<Scalars['String']>;
  nameSignal_lte?: InputMaybe<Scalars['String']>;
  nameSignal_in?: InputMaybe<Array<Scalars['String']>>;
  nameSignal_not_in?: InputMaybe<Array<Scalars['String']>>;
  nameSignal_contains?: InputMaybe<Scalars['String']>;
  nameSignal_contains_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_not_contains?: InputMaybe<Scalars['String']>;
  nameSignal_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_starts_with?: InputMaybe<Scalars['String']>;
  nameSignal_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_not_starts_with?: InputMaybe<Scalars['String']>;
  nameSignal_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_ends_with?: InputMaybe<Scalars['String']>;
  nameSignal_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_not_ends_with?: InputMaybe<Scalars['String']>;
  nameSignal_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nameSignal_?: InputMaybe<NETWORK__NameSignal_filter>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__NameSignalSubgraphRelation_orderBy =
  | 'id'
  | 'nameSignal'
  | 'subgraph';

/**
 * All relevant data for a Name Signal Transaction in The Graph Network
 *
 */
export type NETWORK__NameSignalTransaction = NETWORK__Transaction & {
  id: Scalars['ID'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  signer: NETWORK__GraphAccount;
  type: NETWORK__TransactionType;
  /** Amount of name signal updated */
  nameSignal: Scalars['BigInt'];
  /** Amount of version signal updated */
  versionSignal: Scalars['BigInt'];
  /** Tokens used */
  tokens: Scalars['BigInt'];
  /** Subgraph where name signal was updated */
  subgraph: NETWORK__Subgraph;
};

export type NETWORK__NameSignalTransaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<NETWORK__GraphAccount_filter>;
  type?: InputMaybe<NETWORK__TransactionType>;
  type_not?: InputMaybe<NETWORK__TransactionType>;
  type_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  type_not_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  nameSignal?: InputMaybe<Scalars['BigInt']>;
  nameSignal_not?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionSignal?: InputMaybe<Scalars['BigInt']>;
  versionSignal_not?: InputMaybe<Scalars['BigInt']>;
  versionSignal_gt?: InputMaybe<Scalars['BigInt']>;
  versionSignal_lt?: InputMaybe<Scalars['BigInt']>;
  versionSignal_gte?: InputMaybe<Scalars['BigInt']>;
  versionSignal_lte?: InputMaybe<Scalars['BigInt']>;
  versionSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens?: InputMaybe<Scalars['BigInt']>;
  tokens_not?: InputMaybe<Scalars['BigInt']>;
  tokens_gt?: InputMaybe<Scalars['BigInt']>;
  tokens_lt?: InputMaybe<Scalars['BigInt']>;
  tokens_gte?: InputMaybe<Scalars['BigInt']>;
  tokens_lte?: InputMaybe<Scalars['BigInt']>;
  tokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__NameSignalTransaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type'
  | 'nameSignal'
  | 'versionSignal'
  | 'tokens'
  | 'subgraph';

export type NETWORK__NameSignal_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<NETWORK__Curator_filter>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal?: InputMaybe<Scalars['BigInt']>;
  nameSignal_not?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignal_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  lastNameSignalChange?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_not?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_gt?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_lt?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_gte?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_lte?: InputMaybe<Scalars['Int']>;
  lastNameSignalChange_in?: InputMaybe<Array<Scalars['Int']>>;
  lastNameSignalChange_not_in?: InputMaybe<Array<Scalars['Int']>>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  averageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasisPerSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  nameSignalAverageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  nameSignalAverageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  nameSignalAverageCostBasisPerSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  nameSignalAverageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  nameSignalAverageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalAverageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalAverageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalAverageCostBasisPerSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  signalAverageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  signalAverageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<NETWORK__NameSignal_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__NameSignal_orderBy =
  | 'id'
  | 'curator'
  | 'subgraph'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'withdrawnTokens'
  | 'nameSignal'
  | 'signal'
  | 'lastNameSignalChange'
  | 'realizedRewards'
  | 'averageCostBasis'
  | 'averageCostBasisPerSignal'
  | 'nameSignalAverageCostBasis'
  | 'nameSignalAverageCostBasisPerSignal'
  | 'signalAverageCostBasis'
  | 'signalAverageCostBasisPerSignal'
  | 'entityVersion'
  | 'linkedEntity';

export type NETWORK__NameSystem =
  | 'ENS';

export type NETWORK__Network = {
  id: Scalars['ID'];
  deployments: Array<NETWORK__SubgraphDeployment>;
};


export type NETWORK__NetworkdeploymentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphDeployment_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
};

export type NETWORK__Network_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  deployments_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Network_orderBy =
  | 'id'
  | 'deployments';

/** Defines the order direction, either ascending or descending */
export type NETWORK__OrderDirection =
  | 'asc'
  | 'desc';

/**
 * Global pool of query fees for closed state channels. Each Epoch has a single pool,
 * hence why they share the same IDs.
 *
 */
export type NETWORK__Pool = {
  /** Epoch number of the pool */
  id: Scalars['ID'];
  /** Total effective allocation tokens from all allocations closed in this epoch */
  allocation: Scalars['BigInt'];
  /** Total query fees collected in this epoch */
  totalQueryFees: Scalars['BigInt'];
  /** Total query fees claimed in this epoch. Can be smaller than totalFees because of cobbs douglas function  */
  claimedFees: Scalars['BigInt'];
  /** Total rewards from query fees deposited to all curator bonding curves during the epoch */
  curatorRewards: Scalars['BigInt'];
  /** Allocations that were closed during this epoch */
  closedAllocations: Array<NETWORK__Allocation>;
};


/**
 * Global pool of query fees for closed state channels. Each Epoch has a single pool,
 * hence why they share the same IDs.
 *
 */
export type NETWORK__PoolclosedAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
};

export type NETWORK__Pool_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  allocation?: InputMaybe<Scalars['BigInt']>;
  allocation_not?: InputMaybe<Scalars['BigInt']>;
  allocation_gt?: InputMaybe<Scalars['BigInt']>;
  allocation_lt?: InputMaybe<Scalars['BigInt']>;
  allocation_gte?: InputMaybe<Scalars['BigInt']>;
  allocation_lte?: InputMaybe<Scalars['BigInt']>;
  allocation_in?: InputMaybe<Array<Scalars['BigInt']>>;
  allocation_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_not?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lt?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_gte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_lte?: InputMaybe<Scalars['BigInt']>;
  totalQueryFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalQueryFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  claimedFees?: InputMaybe<Scalars['BigInt']>;
  claimedFees_not?: InputMaybe<Scalars['BigInt']>;
  claimedFees_gt?: InputMaybe<Scalars['BigInt']>;
  claimedFees_lt?: InputMaybe<Scalars['BigInt']>;
  claimedFees_gte?: InputMaybe<Scalars['BigInt']>;
  claimedFees_lte?: InputMaybe<Scalars['BigInt']>;
  claimedFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  claimedFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  closedAllocations_?: InputMaybe<NETWORK__Allocation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Pool_orderBy =
  | 'id'
  | 'allocation'
  | 'totalQueryFees'
  | 'claimedFees'
  | 'curatorRewards'
  | 'closedAllocations';

/**
 * TokenLockWallet Revocability Enum
 *
 */
export type NETWORK__Revocability =
  | 'NotSet'
  | 'Enabled'
  | 'Disabled';

/**
 * Curator Signal for a single SubgraphDeployment
 *
 */
export type NETWORK__Signal = {
  /** Eth address + subgraph deployment ID */
  id: Scalars['ID'];
  /** Eth address of the curator */
  curator: NETWORK__Curator;
  /** Subgraph being signalled */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** CUMULATIVE number of tokens the curator has signalled */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE number of tokens the curator has unsignalled */
  unsignalledTokens: Scalars['BigInt'];
  /** Signal that the curator has from signaling their GRT */
  signal: Scalars['BigInt'];
  /** Curator average cost basis for this signal on this subgraph */
  averageCostBasis: Scalars['NETWORK__BigDecimal'];
  /** averageCostBasis / signal */
  averageCostBasisPerSignal: Scalars['NETWORK__BigDecimal'];
  /** Block for which the curator last entered or exited the curve */
  lastSignalChange: Scalars['Int'];
  /** Summation of realized rewards from before the last time the curator entered the curation curve */
  realizedRewards: Scalars['BigInt'];
  /** Timetamp when this entity was created */
  createdAt: Scalars['Int'];
  /** Timetamp when this entity was last updated */
  lastUpdatedAt: Scalars['Int'];
  /** Block number where this entity was created */
  createdAtBlock: Scalars['Int'];
  /** Block number where this entity was last updated */
  lastUpdatedAtBlock: Scalars['Int'];
};

/**
 * All relevant data for a Signal Transaction in The Graph Network
 *
 */
export type NETWORK__SignalTransaction = NETWORK__Transaction & {
  id: Scalars['ID'];
  blockNumber: Scalars['Int'];
  timestamp: Scalars['Int'];
  signer: NETWORK__GraphAccount;
  type: NETWORK__TransactionType;
  /** Amount of signal updated */
  signal: Scalars['BigInt'];
  /** Tokens used */
  tokens: Scalars['BigInt'];
  /** Subgraph where signal was updated */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** Withdrawal fees. On minting only */
  withdrawalFees: Scalars['BigInt'];
};

export type NETWORK__SignalTransaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<NETWORK__GraphAccount_filter>;
  type?: InputMaybe<NETWORK__TransactionType>;
  type_not?: InputMaybe<NETWORK__TransactionType>;
  type_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  type_not_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  signal?: InputMaybe<Scalars['BigInt']>;
  signal_not?: InputMaybe<Scalars['BigInt']>;
  signal_gt?: InputMaybe<Scalars['BigInt']>;
  signal_lt?: InputMaybe<Scalars['BigInt']>;
  signal_gte?: InputMaybe<Scalars['BigInt']>;
  signal_lte?: InputMaybe<Scalars['BigInt']>;
  signal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens?: InputMaybe<Scalars['BigInt']>;
  tokens_not?: InputMaybe<Scalars['BigInt']>;
  tokens_gt?: InputMaybe<Scalars['BigInt']>;
  tokens_lt?: InputMaybe<Scalars['BigInt']>;
  tokens_gte?: InputMaybe<Scalars['BigInt']>;
  tokens_lte?: InputMaybe<Scalars['BigInt']>;
  tokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  withdrawalFees?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_not?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawalFees_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawalFees_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__SignalTransaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type'
  | 'signal'
  | 'tokens'
  | 'subgraphDeployment'
  | 'withdrawalFees';

export type NETWORK__Signal_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  curator?: InputMaybe<Scalars['String']>;
  curator_not?: InputMaybe<Scalars['String']>;
  curator_gt?: InputMaybe<Scalars['String']>;
  curator_lt?: InputMaybe<Scalars['String']>;
  curator_gte?: InputMaybe<Scalars['String']>;
  curator_lte?: InputMaybe<Scalars['String']>;
  curator_in?: InputMaybe<Array<Scalars['String']>>;
  curator_not_in?: InputMaybe<Array<Scalars['String']>>;
  curator_contains?: InputMaybe<Scalars['String']>;
  curator_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_not_contains?: InputMaybe<Scalars['String']>;
  curator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  curator_starts_with?: InputMaybe<Scalars['String']>;
  curator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_starts_with?: InputMaybe<Scalars['String']>;
  curator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  curator_ends_with?: InputMaybe<Scalars['String']>;
  curator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_not_ends_with?: InputMaybe<Scalars['String']>;
  curator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  curator_?: InputMaybe<NETWORK__Curator_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal?: InputMaybe<Scalars['BigInt']>;
  signal_not?: InputMaybe<Scalars['BigInt']>;
  signal_gt?: InputMaybe<Scalars['BigInt']>;
  signal_lt?: InputMaybe<Scalars['BigInt']>;
  signal_gte?: InputMaybe<Scalars['BigInt']>;
  signal_lte?: InputMaybe<Scalars['BigInt']>;
  signal_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  averageCostBasis?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasis_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasis_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasisPerSignal?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  averageCostBasisPerSignal_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  averageCostBasisPerSignal_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  lastSignalChange?: InputMaybe<Scalars['Int']>;
  lastSignalChange_not?: InputMaybe<Scalars['Int']>;
  lastSignalChange_gt?: InputMaybe<Scalars['Int']>;
  lastSignalChange_lt?: InputMaybe<Scalars['Int']>;
  lastSignalChange_gte?: InputMaybe<Scalars['Int']>;
  lastSignalChange_lte?: InputMaybe<Scalars['Int']>;
  lastSignalChange_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSignalChange_not_in?: InputMaybe<Array<Scalars['Int']>>;
  realizedRewards?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_not?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lt?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_gte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_lte?: InputMaybe<Scalars['BigInt']>;
  realizedRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  realizedRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUpdatedAt?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_not?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_gt?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_lt?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_gte?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_lte?: InputMaybe<Scalars['Int']>;
  lastUpdatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUpdatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtBlock?: InputMaybe<Scalars['Int']>;
  createdAtBlock_not?: InputMaybe<Scalars['Int']>;
  createdAtBlock_gt?: InputMaybe<Scalars['Int']>;
  createdAtBlock_lt?: InputMaybe<Scalars['Int']>;
  createdAtBlock_gte?: InputMaybe<Scalars['Int']>;
  createdAtBlock_lte?: InputMaybe<Scalars['Int']>;
  createdAtBlock_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAtBlock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUpdatedAtBlock?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_not?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_gt?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_lt?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_gte?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_lte?: InputMaybe<Scalars['Int']>;
  lastUpdatedAtBlock_in?: InputMaybe<Array<Scalars['Int']>>;
  lastUpdatedAtBlock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Signal_orderBy =
  | 'id'
  | 'curator'
  | 'subgraphDeployment'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'signal'
  | 'averageCostBasis'
  | 'averageCostBasisPerSignal'
  | 'lastSignalChange'
  | 'realizedRewards'
  | 'createdAt'
  | 'lastUpdatedAt'
  | 'createdAtBlock'
  | 'lastUpdatedAtBlock';

/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type NETWORK__Subgraph = {
  /** Subgraph ID - which is derived from the Organization/Individual graph accountID */
  id: Scalars['ID'];
  /** Graph account that owns this subgraph */
  owner: NETWORK__GraphAccount;
  /** Current version. Null if the subgraph is deprecated */
  currentVersion?: Maybe<NETWORK__SubgraphVersion>;
  /** [DEPRECATED] Past versions. Has the same data as 'versions' but keeps the old naming for backwards compatibility */
  pastVersions: Array<NETWORK__SubgraphVersion>;
  /** List of all the subgraph versions included the current one */
  versions: Array<NETWORK__SubgraphVersion>;
  /** Version counter */
  versionCount: Scalars['BigInt'];
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** Updated timestamp */
  updatedAt: Scalars['Int'];
  /** Whether the subgraph is active or deprecated */
  active: Scalars['Boolean'];
  /** Whether the subgraph has been claimed/migrated. Can only be false for subgraphs created with V1 contracts that have not been claimed/migrated */
  migrated: Scalars['Boolean'];
  /** The actual ID of the subgraph on the contracts subgraph NFT implementation. BigInt represented as a String. It's only actually valid once the subgraph is migrated (migrated == true) */
  nftID?: Maybe<Scalars['String']>;
  /** ID of the subgraph that was used on the old version of this The Graph Network Subgraph. Null for Subgraphs created with the new GNS implementation or for version 1 entities (since they use the old id) */
  oldID?: Maybe<Scalars['String']>;
  /** Address used to create the ID. Only available for Subgraphs created pre-migration */
  creatorAddress?: Maybe<Scalars['NETWORK__Bytes']>;
  /** Subgraph number used to create the ID. Only available for Subgraphs created pre-migration */
  subgraphNumber?: Maybe<Scalars['BigInt']>;
  /** Auxiliary field to denote whether the subgraph is handling the initialization order on V2 events. Doesn't matter for V1 events. */
  initializing: Scalars['Boolean'];
  /** Version of the entity. Subgraph entities are changing the way their ID is generated when the new GNS v2 rolls out so we need to differnetiate them */
  entityVersion: Scalars['Int'];
  /** Subgraph entities might have 'duplicate' entities so that old IDs can be persisted and still queried properly. If that happens we have to link both duplicate entities to be able to update them properly. */
  linkedEntity?: Maybe<NETWORK__Subgraph>;
  /** CUMULATIVE signaled tokens on this subgraph all time */
  signalledTokens: Scalars['BigInt'];
  /** CUMULATIVE unsignalled tokens on this subgraph all time */
  unsignalledTokens: Scalars['BigInt'];
  /** CURRENT amount of tokens signalled on this subgraph latest version. Mirrors the total amount signalled towards the current deployment. */
  currentSignalledTokens: Scalars['BigInt'];
  /** The CURRENT name signal amount for this subgraph */
  nameSignalAmount: Scalars['BigInt'];
  /** Current amount of version signal managed by the name pool */
  signalAmount: Scalars['BigInt'];
  /** Reserve ratio of the name curation curve. In parts per million */
  reserveRatio: Scalars['Int'];
  /** Tokens that can be withdrawn once the Subgraph is deprecated */
  withdrawableTokens: Scalars['BigInt'];
  /** Tokens the curators have withdrawn from the deprecated Subgraph */
  withdrawnTokens: Scalars['BigInt'];
  /** Curators of this subgraph deployment */
  nameSignals: Array<NETWORK__NameSignal>;
  /** Total amount of NameSignal entities */
  nameSignalCount: Scalars['Int'];
  /** Subgraph metadata */
  metadataHash: Scalars['NETWORK__Bytes'];
  /** Subgraph metadata ipfs hash */
  ipfsMetadataHash?: Maybe<Scalars['String']>;
  /** Short description of the subgraph */
  description?: Maybe<Scalars['String']>;
  /** Image in string format */
  image?: Maybe<Scalars['String']>;
  /** NFT Image representation */
  nftImage?: Maybe<Scalars['String']>;
  /** Location of the code for this project */
  codeRepository?: Maybe<Scalars['String']>;
  /** Projects website */
  website?: Maybe<Scalars['String']>;
  /** Display name */
  displayName?: Maybe<Scalars['String']>;
  /** Categories that the subgraph belongs to. Modelled with a relation to allow for many-to-many relationship querying */
  categories: Array<NETWORK__SubgraphCategoryRelation>;
  currentVersionRelationEntity?: Maybe<NETWORK__CurrentSubgraphDeploymentRelation>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type NETWORK__SubgraphpastVersionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphVersion_filter>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type NETWORK__SubgraphversionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphVersion_filter>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type NETWORK__SubgraphnameSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__NameSignal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__NameSignal_filter>;
};


/**
 * The Subgraph entity represents a permanent, unique endpoint. This unique endpoint can resolve to
 * many different SubgraphVersions over it's lifetime. The Subgraph can also have a name attributed
 * to it. The owner of the Subgraph can only use a name once, thus making the owner account and the
 * name chosen a unique combination. When a Curator singals on a Subgraph, they receive "Name Signal".
 * "Name Signal" resolves into the underlying "Signal" of the SubgraphDeployment. The metadata of the
 * subgraph is stored on IPFS.
 *
 */
export type NETWORK__SubgraphcategoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategoryRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
};

export type NETWORK__SubgraphCategory = {
  id: Scalars['ID'];
  subgraphs: Array<NETWORK__SubgraphCategoryRelation>;
};


export type NETWORK__SubgraphCategorysubgraphsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphCategoryRelation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
};

export type NETWORK__SubgraphCategoryRelation = {
  id: Scalars['ID'];
  subgraph: NETWORK__Subgraph;
  category: NETWORK__SubgraphCategory;
};

export type NETWORK__SubgraphCategoryRelation_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  category?: InputMaybe<Scalars['String']>;
  category_not?: InputMaybe<Scalars['String']>;
  category_gt?: InputMaybe<Scalars['String']>;
  category_lt?: InputMaybe<Scalars['String']>;
  category_gte?: InputMaybe<Scalars['String']>;
  category_lte?: InputMaybe<Scalars['String']>;
  category_in?: InputMaybe<Array<Scalars['String']>>;
  category_not_in?: InputMaybe<Array<Scalars['String']>>;
  category_contains?: InputMaybe<Scalars['String']>;
  category_contains_nocase?: InputMaybe<Scalars['String']>;
  category_not_contains?: InputMaybe<Scalars['String']>;
  category_not_contains_nocase?: InputMaybe<Scalars['String']>;
  category_starts_with?: InputMaybe<Scalars['String']>;
  category_starts_with_nocase?: InputMaybe<Scalars['String']>;
  category_not_starts_with?: InputMaybe<Scalars['String']>;
  category_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  category_ends_with?: InputMaybe<Scalars['String']>;
  category_ends_with_nocase?: InputMaybe<Scalars['String']>;
  category_not_ends_with?: InputMaybe<Scalars['String']>;
  category_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  category_?: InputMaybe<NETWORK__SubgraphCategory_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__SubgraphCategoryRelation_orderBy =
  | 'id'
  | 'subgraph'
  | 'category';

export type NETWORK__SubgraphCategory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraphs_?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__SubgraphCategory_orderBy =
  | 'id'
  | 'subgraphs';

/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type NETWORK__SubgraphDeployment = {
  /** Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes */
  id: Scalars['ID'];
  /** IPFS hash of the subgraph manifest */
  ipfsHash: Scalars['String'];
  /** The versions this subgraph deployment relates to */
  versions: Array<NETWORK__SubgraphVersion>;
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** The block at which this deployment was denied for rewards. Null if not denied */
  deniedAt: Scalars['Int'];
  /** The original Subgraph that was deployed through GNS. Can be null if never created through GNS. Used for filtering in the Explorer */
  originalName?: Maybe<Scalars['String']>;
  /** CURRENT total stake of all indexers on this Subgraph Deployment */
  stakedTokens: Scalars['BigInt'];
  /** Allocations created by indexers for this Subgraph */
  indexerAllocations: Array<NETWORK__Allocation>;
  /** Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards */
  indexingRewardAmount: Scalars['BigInt'];
  /** Total rewards accrued all time by indexers */
  indexingIndexerRewardAmount: Scalars['BigInt'];
  /** Total rewards accrued all time by delegators */
  indexingDelegatorRewardAmount: Scalars['BigInt'];
  /** Total query fees earned by this Subgraph Deployment, without curator query fees */
  queryFeesAmount: Scalars['BigInt'];
  /** Total query fee rebates earned from the protocol, through the cobbs douglas formula. Does not include delegation fees */
  queryFeeRebates: Scalars['BigInt'];
  /** Total curator rewards from fees */
  curatorFeeRewards: Scalars['BigInt'];
  /** CURRENT signalled tokens in the bonding curve */
  signalledTokens: Scalars['BigInt'];
  /** NOT IMPLEMENTED - CURRENT signalled tokens in the bonding curve */
  unsignalledTokens: Scalars['BigInt'];
  /** CURRENT curation signal for this subgraph deployment */
  signalAmount: Scalars['BigInt'];
  /** signalledTokens / signalAmount */
  pricePerShare: Scalars['NETWORK__BigDecimal'];
  /** Curators of this subgraph deployment */
  curatorSignals: Array<NETWORK__Signal>;
  /** Bonding curve reserve ratio. In parts per million */
  reserveRatio: Scalars['Int'];
  /** Manifest file for this subgraph deployment */
  manifest?: Maybe<Scalars['String']>;
  /** Network where the contracts that the subgraph indexes are located */
  network?: Maybe<NETWORK__Network>;
  /** Schema file for this subgraph deployment */
  schema?: Maybe<Scalars['String']>;
  /** IPFS hash of the schema file */
  schemaIpfsHash?: Maybe<Scalars['String']>;
  /** Total amount of Subgraph entities that used this deployment at some point. subgraphCount >= activeSubgraphCount + deprecatedSubgraphCount */
  subgraphCount: Scalars['Int'];
  /** Amount of active Subgraph entities that are currently using this deployment. Deprecated subgraph entities are not counted */
  activeSubgraphCount: Scalars['Int'];
  /** Amount of Subgraph entities that were currently using this deployment when they got deprecated */
  deprecatedSubgraphCount: Scalars['Int'];
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type NETWORK__SubgraphDeploymentversionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__SubgraphVersion_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__SubgraphVersion_filter>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type NETWORK__SubgraphDeploymentindexerAllocationsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Allocation_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Allocation_filter>;
};


/**
 * The SubgraphDeployment is represented by the immutable subgraph code that is uploaded, and posted
 * to IPFS. A SubgraphDeployment has a manifest which gives the instructions to the Graph Network on
 * what to index. The entity stores relevant data for the SubgraphDeployment on how much it is being
 * staked on and signaled on in the contracts, as well as how it is performing in query fees. It is
 * related to a SubgraphVersion.
 *
 */
export type NETWORK__SubgraphDeploymentcuratorSignalsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__Signal_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__Signal_filter>;
};

export type NETWORK__SubgraphDeployment_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ipfsHash?: InputMaybe<Scalars['String']>;
  ipfsHash_not?: InputMaybe<Scalars['String']>;
  ipfsHash_gt?: InputMaybe<Scalars['String']>;
  ipfsHash_lt?: InputMaybe<Scalars['String']>;
  ipfsHash_gte?: InputMaybe<Scalars['String']>;
  ipfsHash_lte?: InputMaybe<Scalars['String']>;
  ipfsHash_in?: InputMaybe<Array<Scalars['String']>>;
  ipfsHash_not_in?: InputMaybe<Array<Scalars['String']>>;
  ipfsHash_contains?: InputMaybe<Scalars['String']>;
  ipfsHash_contains_nocase?: InputMaybe<Scalars['String']>;
  ipfsHash_not_contains?: InputMaybe<Scalars['String']>;
  ipfsHash_not_contains_nocase?: InputMaybe<Scalars['String']>;
  ipfsHash_starts_with?: InputMaybe<Scalars['String']>;
  ipfsHash_starts_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsHash_not_starts_with?: InputMaybe<Scalars['String']>;
  ipfsHash_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsHash_ends_with?: InputMaybe<Scalars['String']>;
  ipfsHash_ends_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsHash_not_ends_with?: InputMaybe<Scalars['String']>;
  ipfsHash_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  versions_?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deniedAt?: InputMaybe<Scalars['Int']>;
  deniedAt_not?: InputMaybe<Scalars['Int']>;
  deniedAt_gt?: InputMaybe<Scalars['Int']>;
  deniedAt_lt?: InputMaybe<Scalars['Int']>;
  deniedAt_gte?: InputMaybe<Scalars['Int']>;
  deniedAt_lte?: InputMaybe<Scalars['Int']>;
  deniedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  deniedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  originalName?: InputMaybe<Scalars['String']>;
  originalName_not?: InputMaybe<Scalars['String']>;
  originalName_gt?: InputMaybe<Scalars['String']>;
  originalName_lt?: InputMaybe<Scalars['String']>;
  originalName_gte?: InputMaybe<Scalars['String']>;
  originalName_lte?: InputMaybe<Scalars['String']>;
  originalName_in?: InputMaybe<Array<Scalars['String']>>;
  originalName_not_in?: InputMaybe<Array<Scalars['String']>>;
  originalName_contains?: InputMaybe<Scalars['String']>;
  originalName_contains_nocase?: InputMaybe<Scalars['String']>;
  originalName_not_contains?: InputMaybe<Scalars['String']>;
  originalName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  originalName_starts_with?: InputMaybe<Scalars['String']>;
  originalName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  originalName_not_starts_with?: InputMaybe<Scalars['String']>;
  originalName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  originalName_ends_with?: InputMaybe<Scalars['String']>;
  originalName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  originalName_not_ends_with?: InputMaybe<Scalars['String']>;
  originalName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stakedTokens?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_not?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lt?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_gte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_lte?: InputMaybe<Scalars['BigInt']>;
  stakedTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  stakedTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexerAllocations_?: InputMaybe<NETWORK__Allocation_filter>;
  indexingRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingIndexerRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingIndexerRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_not?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lt?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_gte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_lte?: InputMaybe<Scalars['BigInt']>;
  indexingDelegatorRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  indexingDelegatorRewardAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_not?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeesAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeesAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_not?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lt?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_gte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_lte?: InputMaybe<Scalars['BigInt']>;
  queryFeeRebates_in?: InputMaybe<Array<Scalars['BigInt']>>;
  queryFeeRebates_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_not?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lt?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_gte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_lte?: InputMaybe<Scalars['BigInt']>;
  curatorFeeRewards_in?: InputMaybe<Array<Scalars['BigInt']>>;
  curatorFeeRewards_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount?: InputMaybe<Scalars['BigInt']>;
  signalAmount_not?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pricePerShare?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_not?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_gt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_lt?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_gte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_lte?: InputMaybe<Scalars['NETWORK__BigDecimal']>;
  pricePerShare_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  pricePerShare_not_in?: InputMaybe<Array<Scalars['NETWORK__BigDecimal']>>;
  curatorSignals_?: InputMaybe<NETWORK__Signal_filter>;
  reserveRatio?: InputMaybe<Scalars['Int']>;
  reserveRatio_not?: InputMaybe<Scalars['Int']>;
  reserveRatio_gt?: InputMaybe<Scalars['Int']>;
  reserveRatio_lt?: InputMaybe<Scalars['Int']>;
  reserveRatio_gte?: InputMaybe<Scalars['Int']>;
  reserveRatio_lte?: InputMaybe<Scalars['Int']>;
  reserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  reserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  manifest?: InputMaybe<Scalars['String']>;
  manifest_not?: InputMaybe<Scalars['String']>;
  manifest_gt?: InputMaybe<Scalars['String']>;
  manifest_lt?: InputMaybe<Scalars['String']>;
  manifest_gte?: InputMaybe<Scalars['String']>;
  manifest_lte?: InputMaybe<Scalars['String']>;
  manifest_in?: InputMaybe<Array<Scalars['String']>>;
  manifest_not_in?: InputMaybe<Array<Scalars['String']>>;
  manifest_contains?: InputMaybe<Scalars['String']>;
  manifest_contains_nocase?: InputMaybe<Scalars['String']>;
  manifest_not_contains?: InputMaybe<Scalars['String']>;
  manifest_not_contains_nocase?: InputMaybe<Scalars['String']>;
  manifest_starts_with?: InputMaybe<Scalars['String']>;
  manifest_starts_with_nocase?: InputMaybe<Scalars['String']>;
  manifest_not_starts_with?: InputMaybe<Scalars['String']>;
  manifest_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  manifest_ends_with?: InputMaybe<Scalars['String']>;
  manifest_ends_with_nocase?: InputMaybe<Scalars['String']>;
  manifest_not_ends_with?: InputMaybe<Scalars['String']>;
  manifest_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network?: InputMaybe<Scalars['String']>;
  network_not?: InputMaybe<Scalars['String']>;
  network_gt?: InputMaybe<Scalars['String']>;
  network_lt?: InputMaybe<Scalars['String']>;
  network_gte?: InputMaybe<Scalars['String']>;
  network_lte?: InputMaybe<Scalars['String']>;
  network_in?: InputMaybe<Array<Scalars['String']>>;
  network_not_in?: InputMaybe<Array<Scalars['String']>>;
  network_contains?: InputMaybe<Scalars['String']>;
  network_contains_nocase?: InputMaybe<Scalars['String']>;
  network_not_contains?: InputMaybe<Scalars['String']>;
  network_not_contains_nocase?: InputMaybe<Scalars['String']>;
  network_starts_with?: InputMaybe<Scalars['String']>;
  network_starts_with_nocase?: InputMaybe<Scalars['String']>;
  network_not_starts_with?: InputMaybe<Scalars['String']>;
  network_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  network_ends_with?: InputMaybe<Scalars['String']>;
  network_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_not_ends_with?: InputMaybe<Scalars['String']>;
  network_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_?: InputMaybe<NETWORK__Network_filter>;
  schema?: InputMaybe<Scalars['String']>;
  schema_not?: InputMaybe<Scalars['String']>;
  schema_gt?: InputMaybe<Scalars['String']>;
  schema_lt?: InputMaybe<Scalars['String']>;
  schema_gte?: InputMaybe<Scalars['String']>;
  schema_lte?: InputMaybe<Scalars['String']>;
  schema_in?: InputMaybe<Array<Scalars['String']>>;
  schema_not_in?: InputMaybe<Array<Scalars['String']>>;
  schema_contains?: InputMaybe<Scalars['String']>;
  schema_contains_nocase?: InputMaybe<Scalars['String']>;
  schema_not_contains?: InputMaybe<Scalars['String']>;
  schema_not_contains_nocase?: InputMaybe<Scalars['String']>;
  schema_starts_with?: InputMaybe<Scalars['String']>;
  schema_starts_with_nocase?: InputMaybe<Scalars['String']>;
  schema_not_starts_with?: InputMaybe<Scalars['String']>;
  schema_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  schema_ends_with?: InputMaybe<Scalars['String']>;
  schema_ends_with_nocase?: InputMaybe<Scalars['String']>;
  schema_not_ends_with?: InputMaybe<Scalars['String']>;
  schema_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_gt?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_lt?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_gte?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_lte?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_in?: InputMaybe<Array<Scalars['String']>>;
  schemaIpfsHash_not_in?: InputMaybe<Array<Scalars['String']>>;
  schemaIpfsHash_contains?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_contains_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_contains?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_contains_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_starts_with?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_starts_with_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_starts_with?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_ends_with?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_ends_with_nocase?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_ends_with?: InputMaybe<Scalars['String']>;
  schemaIpfsHash_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphCount?: InputMaybe<Scalars['Int']>;
  subgraphCount_not?: InputMaybe<Scalars['Int']>;
  subgraphCount_gt?: InputMaybe<Scalars['Int']>;
  subgraphCount_lt?: InputMaybe<Scalars['Int']>;
  subgraphCount_gte?: InputMaybe<Scalars['Int']>;
  subgraphCount_lte?: InputMaybe<Scalars['Int']>;
  subgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  subgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSubgraphCount?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_not?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_gt?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_lt?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_gte?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_lte?: InputMaybe<Scalars['Int']>;
  activeSubgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  activeSubgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deprecatedSubgraphCount?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_not?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_gt?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_lt?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_gte?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_lte?: InputMaybe<Scalars['Int']>;
  deprecatedSubgraphCount_in?: InputMaybe<Array<Scalars['Int']>>;
  deprecatedSubgraphCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__SubgraphDeployment_orderBy =
  | 'id'
  | 'ipfsHash'
  | 'versions'
  | 'createdAt'
  | 'deniedAt'
  | 'originalName'
  | 'stakedTokens'
  | 'indexerAllocations'
  | 'indexingRewardAmount'
  | 'indexingIndexerRewardAmount'
  | 'indexingDelegatorRewardAmount'
  | 'queryFeesAmount'
  | 'queryFeeRebates'
  | 'curatorFeeRewards'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'signalAmount'
  | 'pricePerShare'
  | 'curatorSignals'
  | 'reserveRatio'
  | 'manifest'
  | 'network'
  | 'schema'
  | 'schemaIpfsHash'
  | 'subgraphCount'
  | 'activeSubgraphCount'
  | 'deprecatedSubgraphCount';

/**
 * The SubgraphVersion entity represents a version of the Subgraph. A new SubgraphVersion is created
 * whenever there is an update to the Subgraph triggered by the owner. The new SubgraphVersion can
 * then point to a new SubgraphDeployment, thus allowing the Subgraph to resolve to a different
 * deployment, while keeping the same endpoint. The metadata and label are stored on IPFS. The label
 * is for the developer to provide a semantic version. This is different from the version, which is
 * just a counter than increases each time a new SubgraphVersion is created for a Subgraph.
 *
 */
export type NETWORK__SubgraphVersion = {
  /** Concatenation of subgraph, subgraph deployment, and version ID */
  id: Scalars['ID'];
  /** Subgraph of this version */
  subgraph: NETWORK__Subgraph;
  /** Subgraph deployment of this version */
  subgraphDeployment: NETWORK__SubgraphDeployment;
  /** Version number */
  version: Scalars['Int'];
  /** Creation timestamp */
  createdAt: Scalars['Int'];
  /** Subgraph version metadata content address */
  metadataHash?: Maybe<Scalars['NETWORK__Bytes']>;
  /** Short description of the version */
  description?: Maybe<Scalars['String']>;
  /** Semantic versioning label */
  label?: Maybe<Scalars['String']>;
  entityVersion: Scalars['Int'];
  linkedEntity?: Maybe<NETWORK__SubgraphVersion>;
};

export type NETWORK__SubgraphVersion_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  subgraph?: InputMaybe<Scalars['String']>;
  subgraph_not?: InputMaybe<Scalars['String']>;
  subgraph_gt?: InputMaybe<Scalars['String']>;
  subgraph_lt?: InputMaybe<Scalars['String']>;
  subgraph_gte?: InputMaybe<Scalars['String']>;
  subgraph_lte?: InputMaybe<Scalars['String']>;
  subgraph_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraph_contains?: InputMaybe<Scalars['String']>;
  subgraph_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_contains?: InputMaybe<Scalars['String']>;
  subgraph_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraph_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraph_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraph_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraph_?: InputMaybe<NETWORK__Subgraph_filter>;
  subgraphDeployment?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lt?: InputMaybe<Scalars['String']>;
  subgraphDeployment_gte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_lte?: InputMaybe<Scalars['String']>;
  subgraphDeployment_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_not_in?: InputMaybe<Array<Scalars['String']>>;
  subgraphDeployment_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_contains_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with?: InputMaybe<Scalars['String']>;
  subgraphDeployment_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  subgraphDeployment_?: InputMaybe<NETWORK__SubgraphDeployment_filter>;
  version?: InputMaybe<Scalars['Int']>;
  version_not?: InputMaybe<Scalars['Int']>;
  version_gt?: InputMaybe<Scalars['Int']>;
  version_lt?: InputMaybe<Scalars['Int']>;
  version_gte?: InputMaybe<Scalars['Int']>;
  version_lte?: InputMaybe<Scalars['Int']>;
  version_in?: InputMaybe<Array<Scalars['Int']>>;
  version_not_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  metadataHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  description?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  label?: InputMaybe<Scalars['String']>;
  label_not?: InputMaybe<Scalars['String']>;
  label_gt?: InputMaybe<Scalars['String']>;
  label_lt?: InputMaybe<Scalars['String']>;
  label_gte?: InputMaybe<Scalars['String']>;
  label_lte?: InputMaybe<Scalars['String']>;
  label_in?: InputMaybe<Array<Scalars['String']>>;
  label_not_in?: InputMaybe<Array<Scalars['String']>>;
  label_contains?: InputMaybe<Scalars['String']>;
  label_contains_nocase?: InputMaybe<Scalars['String']>;
  label_not_contains?: InputMaybe<Scalars['String']>;
  label_not_contains_nocase?: InputMaybe<Scalars['String']>;
  label_starts_with?: InputMaybe<Scalars['String']>;
  label_starts_with_nocase?: InputMaybe<Scalars['String']>;
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  label_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  label_ends_with?: InputMaybe<Scalars['String']>;
  label_ends_with_nocase?: InputMaybe<Scalars['String']>;
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  label_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__SubgraphVersion_orderBy =
  | 'id'
  | 'subgraph'
  | 'subgraphDeployment'
  | 'version'
  | 'createdAt'
  | 'metadataHash'
  | 'description'
  | 'label'
  | 'entityVersion'
  | 'linkedEntity';

export type NETWORK__Subgraph_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  owner?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<NETWORK__GraphAccount_filter>;
  currentVersion?: InputMaybe<Scalars['String']>;
  currentVersion_not?: InputMaybe<Scalars['String']>;
  currentVersion_gt?: InputMaybe<Scalars['String']>;
  currentVersion_lt?: InputMaybe<Scalars['String']>;
  currentVersion_gte?: InputMaybe<Scalars['String']>;
  currentVersion_lte?: InputMaybe<Scalars['String']>;
  currentVersion_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersion_contains?: InputMaybe<Scalars['String']>;
  currentVersion_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_contains?: InputMaybe<Scalars['String']>;
  currentVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_starts_with?: InputMaybe<Scalars['String']>;
  currentVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_starts_with?: InputMaybe<Scalars['String']>;
  currentVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_ends_with?: InputMaybe<Scalars['String']>;
  currentVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_not_ends_with?: InputMaybe<Scalars['String']>;
  currentVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersion_?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  pastVersions_?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  versions_?: InputMaybe<NETWORK__SubgraphVersion_filter>;
  versionCount?: InputMaybe<Scalars['BigInt']>;
  versionCount_not?: InputMaybe<Scalars['BigInt']>;
  versionCount_gt?: InputMaybe<Scalars['BigInt']>;
  versionCount_lt?: InputMaybe<Scalars['BigInt']>;
  versionCount_gte?: InputMaybe<Scalars['BigInt']>;
  versionCount_lte?: InputMaybe<Scalars['BigInt']>;
  versionCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  versionCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  migrated?: InputMaybe<Scalars['Boolean']>;
  migrated_not?: InputMaybe<Scalars['Boolean']>;
  migrated_in?: InputMaybe<Array<Scalars['Boolean']>>;
  migrated_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  nftID?: InputMaybe<Scalars['String']>;
  nftID_not?: InputMaybe<Scalars['String']>;
  nftID_gt?: InputMaybe<Scalars['String']>;
  nftID_lt?: InputMaybe<Scalars['String']>;
  nftID_gte?: InputMaybe<Scalars['String']>;
  nftID_lte?: InputMaybe<Scalars['String']>;
  nftID_in?: InputMaybe<Array<Scalars['String']>>;
  nftID_not_in?: InputMaybe<Array<Scalars['String']>>;
  nftID_contains?: InputMaybe<Scalars['String']>;
  nftID_contains_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_contains?: InputMaybe<Scalars['String']>;
  nftID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nftID_starts_with?: InputMaybe<Scalars['String']>;
  nftID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_starts_with?: InputMaybe<Scalars['String']>;
  nftID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_ends_with?: InputMaybe<Scalars['String']>;
  nftID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nftID_not_ends_with?: InputMaybe<Scalars['String']>;
  nftID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  oldID?: InputMaybe<Scalars['String']>;
  oldID_not?: InputMaybe<Scalars['String']>;
  oldID_gt?: InputMaybe<Scalars['String']>;
  oldID_lt?: InputMaybe<Scalars['String']>;
  oldID_gte?: InputMaybe<Scalars['String']>;
  oldID_lte?: InputMaybe<Scalars['String']>;
  oldID_in?: InputMaybe<Array<Scalars['String']>>;
  oldID_not_in?: InputMaybe<Array<Scalars['String']>>;
  oldID_contains?: InputMaybe<Scalars['String']>;
  oldID_contains_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_contains?: InputMaybe<Scalars['String']>;
  oldID_not_contains_nocase?: InputMaybe<Scalars['String']>;
  oldID_starts_with?: InputMaybe<Scalars['String']>;
  oldID_starts_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_starts_with?: InputMaybe<Scalars['String']>;
  oldID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_ends_with?: InputMaybe<Scalars['String']>;
  oldID_ends_with_nocase?: InputMaybe<Scalars['String']>;
  oldID_not_ends_with?: InputMaybe<Scalars['String']>;
  oldID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creatorAddress?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  creatorAddress_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  creatorAddress_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  creatorAddress_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  subgraphNumber?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_not?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_gt?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_lt?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_gte?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_lte?: InputMaybe<Scalars['BigInt']>;
  subgraphNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  subgraphNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initializing?: InputMaybe<Scalars['Boolean']>;
  initializing_not?: InputMaybe<Scalars['Boolean']>;
  initializing_in?: InputMaybe<Array<Scalars['Boolean']>>;
  initializing_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  entityVersion?: InputMaybe<Scalars['Int']>;
  entityVersion_not?: InputMaybe<Scalars['Int']>;
  entityVersion_gt?: InputMaybe<Scalars['Int']>;
  entityVersion_lt?: InputMaybe<Scalars['Int']>;
  entityVersion_gte?: InputMaybe<Scalars['Int']>;
  entityVersion_lte?: InputMaybe<Scalars['Int']>;
  entityVersion_in?: InputMaybe<Array<Scalars['Int']>>;
  entityVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;
  linkedEntity?: InputMaybe<Scalars['String']>;
  linkedEntity_not?: InputMaybe<Scalars['String']>;
  linkedEntity_gt?: InputMaybe<Scalars['String']>;
  linkedEntity_lt?: InputMaybe<Scalars['String']>;
  linkedEntity_gte?: InputMaybe<Scalars['String']>;
  linkedEntity_lte?: InputMaybe<Scalars['String']>;
  linkedEntity_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  linkedEntity_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains?: InputMaybe<Scalars['String']>;
  linkedEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  linkedEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  linkedEntity_?: InputMaybe<NETWORK__Subgraph_filter>;
  signalledTokens?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  signalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  unsignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  unsignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  currentSignalledTokens?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_not?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_gt?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_lt?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_gte?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_lte?: InputMaybe<Scalars['BigInt']>;
  currentSignalledTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  currentSignalledTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignalAmount?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_not?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  nameSignalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount?: InputMaybe<Scalars['BigInt']>;
  signalAmount_not?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lt?: InputMaybe<Scalars['BigInt']>;
  signalAmount_gte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_lte?: InputMaybe<Scalars['BigInt']>;
  signalAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  signalAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reserveRatio?: InputMaybe<Scalars['Int']>;
  reserveRatio_not?: InputMaybe<Scalars['Int']>;
  reserveRatio_gt?: InputMaybe<Scalars['Int']>;
  reserveRatio_lt?: InputMaybe<Scalars['Int']>;
  reserveRatio_gte?: InputMaybe<Scalars['Int']>;
  reserveRatio_lte?: InputMaybe<Scalars['Int']>;
  reserveRatio_in?: InputMaybe<Array<Scalars['Int']>>;
  reserveRatio_not_in?: InputMaybe<Array<Scalars['Int']>>;
  withdrawableTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawableTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawableTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_not?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lt?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_gte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_lte?: InputMaybe<Scalars['BigInt']>;
  withdrawnTokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  withdrawnTokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nameSignals_?: InputMaybe<NETWORK__NameSignal_filter>;
  nameSignalCount?: InputMaybe<Scalars['Int']>;
  nameSignalCount_not?: InputMaybe<Scalars['Int']>;
  nameSignalCount_gt?: InputMaybe<Scalars['Int']>;
  nameSignalCount_lt?: InputMaybe<Scalars['Int']>;
  nameSignalCount_gte?: InputMaybe<Scalars['Int']>;
  nameSignalCount_lte?: InputMaybe<Scalars['Int']>;
  nameSignalCount_in?: InputMaybe<Array<Scalars['Int']>>;
  nameSignalCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  metadataHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  metadataHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  metadataHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  ipfsMetadataHash?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_gt?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_lt?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_gte?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_lte?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_in?: InputMaybe<Array<Scalars['String']>>;
  ipfsMetadataHash_not_in?: InputMaybe<Array<Scalars['String']>>;
  ipfsMetadataHash_contains?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_contains_nocase?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_contains?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_contains_nocase?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_starts_with?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_starts_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_starts_with?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_ends_with?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_ends_with_nocase?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_ends_with?: InputMaybe<Scalars['String']>;
  ipfsMetadataHash_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  image_not?: InputMaybe<Scalars['String']>;
  image_gt?: InputMaybe<Scalars['String']>;
  image_lt?: InputMaybe<Scalars['String']>;
  image_gte?: InputMaybe<Scalars['String']>;
  image_lte?: InputMaybe<Scalars['String']>;
  image_in?: InputMaybe<Array<Scalars['String']>>;
  image_not_in?: InputMaybe<Array<Scalars['String']>>;
  image_contains?: InputMaybe<Scalars['String']>;
  image_contains_nocase?: InputMaybe<Scalars['String']>;
  image_not_contains?: InputMaybe<Scalars['String']>;
  image_not_contains_nocase?: InputMaybe<Scalars['String']>;
  image_starts_with?: InputMaybe<Scalars['String']>;
  image_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_starts_with?: InputMaybe<Scalars['String']>;
  image_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  image_ends_with?: InputMaybe<Scalars['String']>;
  image_ends_with_nocase?: InputMaybe<Scalars['String']>;
  image_not_ends_with?: InputMaybe<Scalars['String']>;
  image_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nftImage?: InputMaybe<Scalars['String']>;
  nftImage_not?: InputMaybe<Scalars['String']>;
  nftImage_gt?: InputMaybe<Scalars['String']>;
  nftImage_lt?: InputMaybe<Scalars['String']>;
  nftImage_gte?: InputMaybe<Scalars['String']>;
  nftImage_lte?: InputMaybe<Scalars['String']>;
  nftImage_in?: InputMaybe<Array<Scalars['String']>>;
  nftImage_not_in?: InputMaybe<Array<Scalars['String']>>;
  nftImage_contains?: InputMaybe<Scalars['String']>;
  nftImage_contains_nocase?: InputMaybe<Scalars['String']>;
  nftImage_not_contains?: InputMaybe<Scalars['String']>;
  nftImage_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nftImage_starts_with?: InputMaybe<Scalars['String']>;
  nftImage_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftImage_not_starts_with?: InputMaybe<Scalars['String']>;
  nftImage_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nftImage_ends_with?: InputMaybe<Scalars['String']>;
  nftImage_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nftImage_not_ends_with?: InputMaybe<Scalars['String']>;
  nftImage_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository?: InputMaybe<Scalars['String']>;
  codeRepository_not?: InputMaybe<Scalars['String']>;
  codeRepository_gt?: InputMaybe<Scalars['String']>;
  codeRepository_lt?: InputMaybe<Scalars['String']>;
  codeRepository_gte?: InputMaybe<Scalars['String']>;
  codeRepository_lte?: InputMaybe<Scalars['String']>;
  codeRepository_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_not_in?: InputMaybe<Array<Scalars['String']>>;
  codeRepository_contains?: InputMaybe<Scalars['String']>;
  codeRepository_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains?: InputMaybe<Scalars['String']>;
  codeRepository_not_contains_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_ends_with_nocase?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with?: InputMaybe<Scalars['String']>;
  codeRepository_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
  website_not?: InputMaybe<Scalars['String']>;
  website_gt?: InputMaybe<Scalars['String']>;
  website_lt?: InputMaybe<Scalars['String']>;
  website_gte?: InputMaybe<Scalars['String']>;
  website_lte?: InputMaybe<Scalars['String']>;
  website_in?: InputMaybe<Array<Scalars['String']>>;
  website_not_in?: InputMaybe<Array<Scalars['String']>>;
  website_contains?: InputMaybe<Scalars['String']>;
  website_contains_nocase?: InputMaybe<Scalars['String']>;
  website_not_contains?: InputMaybe<Scalars['String']>;
  website_not_contains_nocase?: InputMaybe<Scalars['String']>;
  website_starts_with?: InputMaybe<Scalars['String']>;
  website_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_starts_with?: InputMaybe<Scalars['String']>;
  website_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  website_ends_with?: InputMaybe<Scalars['String']>;
  website_ends_with_nocase?: InputMaybe<Scalars['String']>;
  website_not_ends_with?: InputMaybe<Scalars['String']>;
  website_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  displayName_not?: InputMaybe<Scalars['String']>;
  displayName_gt?: InputMaybe<Scalars['String']>;
  displayName_lt?: InputMaybe<Scalars['String']>;
  displayName_gte?: InputMaybe<Scalars['String']>;
  displayName_lte?: InputMaybe<Scalars['String']>;
  displayName_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_not_in?: InputMaybe<Array<Scalars['String']>>;
  displayName_contains?: InputMaybe<Scalars['String']>;
  displayName_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_contains?: InputMaybe<Scalars['String']>;
  displayName_not_contains_nocase?: InputMaybe<Scalars['String']>;
  displayName_starts_with?: InputMaybe<Scalars['String']>;
  displayName_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with?: InputMaybe<Scalars['String']>;
  displayName_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_ends_with?: InputMaybe<Scalars['String']>;
  displayName_ends_with_nocase?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with?: InputMaybe<Scalars['String']>;
  displayName_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  categories_?: InputMaybe<NETWORK__SubgraphCategoryRelation_filter>;
  currentVersionRelationEntity?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_gt?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_lt?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_gte?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_lte?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersionRelationEntity_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentVersionRelationEntity_contains?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_contains?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_starts_with?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_starts_with?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_ends_with?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_ends_with?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentVersionRelationEntity_?: InputMaybe<NETWORK__CurrentSubgraphDeploymentRelation_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Subgraph_orderBy =
  | 'id'
  | 'owner'
  | 'currentVersion'
  | 'pastVersions'
  | 'versions'
  | 'versionCount'
  | 'createdAt'
  | 'updatedAt'
  | 'active'
  | 'migrated'
  | 'nftID'
  | 'oldID'
  | 'creatorAddress'
  | 'subgraphNumber'
  | 'initializing'
  | 'entityVersion'
  | 'linkedEntity'
  | 'signalledTokens'
  | 'unsignalledTokens'
  | 'currentSignalledTokens'
  | 'nameSignalAmount'
  | 'signalAmount'
  | 'reserveRatio'
  | 'withdrawableTokens'
  | 'withdrawnTokens'
  | 'nameSignals'
  | 'nameSignalCount'
  | 'metadataHash'
  | 'ipfsMetadataHash'
  | 'description'
  | 'image'
  | 'nftImage'
  | 'codeRepository'
  | 'website'
  | 'displayName'
  | 'categories'
  | 'currentVersionRelationEntity';

/**
 * Token Lock Wallets which hold locked GRT
 *
 */
export type NETWORK__TokenLockWallet = {
  /** The address of the token lock wallet */
  id: Scalars['ID'];
  /** The Manager address */
  manager: Scalars['NETWORK__Bytes'];
  /** The hash of the initializer */
  initHash: Scalars['NETWORK__Bytes'];
  /** Address of the beneficiary of locked tokens */
  beneficiary: Scalars['NETWORK__Bytes'];
  /** The token being used (GRT) */
  token: Scalars['NETWORK__Bytes'];
  /** Amount of tokens to be managed by the lock contract */
  managedAmount: Scalars['BigInt'];
  /** Start time of the release schedule */
  startTime: Scalars['BigInt'];
  /** End time of the release schedule */
  endTime: Scalars['BigInt'];
  /** Number of periods between start time and end time */
  periods: Scalars['BigInt'];
  /** Time when the releases start */
  releaseStartTime: Scalars['BigInt'];
  /** Time the cliff vests, 0 if no cliff */
  vestingCliffTime: Scalars['BigInt'];
  /** Whether or not the contract is revocable */
  revocable?: Maybe<NETWORK__Revocability>;
  /** True if the beneficiary has approved addresses that the manager has approved */
  tokenDestinationsApproved: Scalars['Boolean'];
  /** The amount of tokens that have been resleased */
  tokensReleased: Scalars['BigInt'];
  /** The amount of tokens that have been withdrawn */
  tokensWithdrawn: Scalars['BigInt'];
  /** The amount of tokens that have been revoked */
  tokensRevoked: Scalars['BigInt'];
  /** The block this wlalet was created */
  blockNumberCreated: Scalars['BigInt'];
  /** The creation tx hash of the wallet */
  txHash: Scalars['NETWORK__Bytes'];
};

export type NETWORK__TokenLockWallet_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  manager?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  manager_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  manager_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  manager_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  initHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  initHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  initHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  beneficiary_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  beneficiary_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  beneficiary_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  token_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  token_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  token_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  managedAmount?: InputMaybe<Scalars['BigInt']>;
  managedAmount_not?: InputMaybe<Scalars['BigInt']>;
  managedAmount_gt?: InputMaybe<Scalars['BigInt']>;
  managedAmount_lt?: InputMaybe<Scalars['BigInt']>;
  managedAmount_gte?: InputMaybe<Scalars['BigInt']>;
  managedAmount_lte?: InputMaybe<Scalars['BigInt']>;
  managedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  managedAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  startTime?: InputMaybe<Scalars['BigInt']>;
  startTime_not?: InputMaybe<Scalars['BigInt']>;
  startTime_gt?: InputMaybe<Scalars['BigInt']>;
  startTime_lt?: InputMaybe<Scalars['BigInt']>;
  startTime_gte?: InputMaybe<Scalars['BigInt']>;
  startTime_lte?: InputMaybe<Scalars['BigInt']>;
  startTime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  startTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  endTime?: InputMaybe<Scalars['BigInt']>;
  endTime_not?: InputMaybe<Scalars['BigInt']>;
  endTime_gt?: InputMaybe<Scalars['BigInt']>;
  endTime_lt?: InputMaybe<Scalars['BigInt']>;
  endTime_gte?: InputMaybe<Scalars['BigInt']>;
  endTime_lte?: InputMaybe<Scalars['BigInt']>;
  endTime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  endTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  periods?: InputMaybe<Scalars['BigInt']>;
  periods_not?: InputMaybe<Scalars['BigInt']>;
  periods_gt?: InputMaybe<Scalars['BigInt']>;
  periods_lt?: InputMaybe<Scalars['BigInt']>;
  periods_gte?: InputMaybe<Scalars['BigInt']>;
  periods_lte?: InputMaybe<Scalars['BigInt']>;
  periods_in?: InputMaybe<Array<Scalars['BigInt']>>;
  periods_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  releaseStartTime?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_not?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_gt?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_lt?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_gte?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_lte?: InputMaybe<Scalars['BigInt']>;
  releaseStartTime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  releaseStartTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  vestingCliffTime?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_not?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_gt?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_lt?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_gte?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_lte?: InputMaybe<Scalars['BigInt']>;
  vestingCliffTime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  vestingCliffTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  revocable?: InputMaybe<NETWORK__Revocability>;
  revocable_not?: InputMaybe<NETWORK__Revocability>;
  revocable_in?: InputMaybe<Array<NETWORK__Revocability>>;
  revocable_not_in?: InputMaybe<Array<NETWORK__Revocability>>;
  tokenDestinationsApproved?: InputMaybe<Scalars['Boolean']>;
  tokenDestinationsApproved_not?: InputMaybe<Scalars['Boolean']>;
  tokenDestinationsApproved_in?: InputMaybe<Array<Scalars['Boolean']>>;
  tokenDestinationsApproved_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  tokensReleased?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_not?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_gt?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_lt?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_gte?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_lte?: InputMaybe<Scalars['BigInt']>;
  tokensReleased_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensReleased_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensWithdrawn?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_not?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_gt?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_lt?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_gte?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_lte?: InputMaybe<Scalars['BigInt']>;
  tokensWithdrawn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensWithdrawn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensRevoked?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_not?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_gt?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_lt?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_gte?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_lte?: InputMaybe<Scalars['BigInt']>;
  tokensRevoked_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensRevoked_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumberCreated?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_not?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumberCreated_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumberCreated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txHash?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  txHash_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  txHash_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  txHash_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__TokenLockWallet_orderBy =
  | 'id'
  | 'manager'
  | 'initHash'
  | 'beneficiary'
  | 'token'
  | 'managedAmount'
  | 'startTime'
  | 'endTime'
  | 'periods'
  | 'releaseStartTime'
  | 'vestingCliffTime'
  | 'revocable'
  | 'tokenDestinationsApproved'
  | 'tokensReleased'
  | 'tokensWithdrawn'
  | 'tokensRevoked'
  | 'blockNumberCreated'
  | 'txHash';

/**
 * The Token manager data
 *
 */
export type NETWORK__TokenManager = {
  /** Token manager address */
  id: Scalars['ID'];
  /** Master copy address */
  masterCopy: Scalars['NETWORK__Bytes'];
  /** Tokens stored in manger through deposit or withdraw */
  tokens: Scalars['BigInt'];
  /** List of addresses that are allowed to pull funds */
  tokenDestinations?: Maybe<Array<Scalars['NETWORK__Bytes']>>;
  /** List of function call authorizations */
  authorizedFunctions?: Maybe<Array<NETWORK__AuthorizedFunction>>;
  /** Token lock count of contracts created */
  tokenLockCount: Scalars['BigInt'];
};


/**
 * The Token manager data
 *
 */
export type NETWORK__TokenManagerauthorizedFunctionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NETWORK__AuthorizedFunction_orderBy>;
  orderDirection?: InputMaybe<NETWORK__OrderDirection>;
  where?: InputMaybe<NETWORK__AuthorizedFunction_filter>;
};

export type NETWORK__TokenManager_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  masterCopy?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_not?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_gt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_lt?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_gte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_lte?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  masterCopy_not_in?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  masterCopy_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  masterCopy_not_contains?: InputMaybe<Scalars['NETWORK__Bytes']>;
  tokens?: InputMaybe<Scalars['BigInt']>;
  tokens_not?: InputMaybe<Scalars['BigInt']>;
  tokens_gt?: InputMaybe<Scalars['BigInt']>;
  tokens_lt?: InputMaybe<Scalars['BigInt']>;
  tokens_gte?: InputMaybe<Scalars['BigInt']>;
  tokens_lte?: InputMaybe<Scalars['BigInt']>;
  tokens_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokens_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenDestinations?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  tokenDestinations_not?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  tokenDestinations_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  tokenDestinations_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  tokenDestinations_not_contains?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  tokenDestinations_not_contains_nocase?: InputMaybe<Array<Scalars['NETWORK__Bytes']>>;
  authorizedFunctions_?: InputMaybe<NETWORK__AuthorizedFunction_filter>;
  tokenLockCount?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenLockCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenLockCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__TokenManager_orderBy =
  | 'id'
  | 'masterCopy'
  | 'tokens'
  | 'tokenDestinations'
  | 'authorizedFunctions'
  | 'tokenLockCount';

/**
 * A generic transaction in The Graph Network
 *
 */
export type NETWORK__Transaction = {
  /** Transaction hash concatenated with event log index */
  id: Scalars['ID'];
  /** Block number for the transaction */
  blockNumber: Scalars['Int'];
  /** Timestamp for the transaction */
  timestamp: Scalars['Int'];
  /** Signer of the transaction */
  signer: NETWORK__GraphAccount;
  /** Type of Graph Network transaction */
  type: NETWORK__TransactionType;
};

export type NETWORK__TransactionType =
  | 'Stake'
  | 'Unstake'
  | 'MintSignal'
  | 'BurnSignal'
  | 'MintNSignal'
  | 'BurnNSignal';

export type NETWORK__Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['Int']>;
  blockNumber_not?: InputMaybe<Scalars['Int']>;
  blockNumber_gt?: InputMaybe<Scalars['Int']>;
  blockNumber_lt?: InputMaybe<Scalars['Int']>;
  blockNumber_gte?: InputMaybe<Scalars['Int']>;
  blockNumber_lte?: InputMaybe<Scalars['Int']>;
  blockNumber_in?: InputMaybe<Array<Scalars['Int']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  signer?: InputMaybe<Scalars['String']>;
  signer_not?: InputMaybe<Scalars['String']>;
  signer_gt?: InputMaybe<Scalars['String']>;
  signer_lt?: InputMaybe<Scalars['String']>;
  signer_gte?: InputMaybe<Scalars['String']>;
  signer_lte?: InputMaybe<Scalars['String']>;
  signer_in?: InputMaybe<Array<Scalars['String']>>;
  signer_not_in?: InputMaybe<Array<Scalars['String']>>;
  signer_contains?: InputMaybe<Scalars['String']>;
  signer_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_not_contains?: InputMaybe<Scalars['String']>;
  signer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  signer_starts_with?: InputMaybe<Scalars['String']>;
  signer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_starts_with?: InputMaybe<Scalars['String']>;
  signer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  signer_ends_with?: InputMaybe<Scalars['String']>;
  signer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_not_ends_with?: InputMaybe<Scalars['String']>;
  signer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  signer_?: InputMaybe<NETWORK__GraphAccount_filter>;
  type?: InputMaybe<NETWORK__TransactionType>;
  type_not?: InputMaybe<NETWORK__TransactionType>;
  type_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  type_not_in?: InputMaybe<Array<NETWORK__TransactionType>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<NETWORK__BlockChangedFilter>;
};

export type NETWORK__Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'signer'
  | 'type';

export type NETWORK___Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['NETWORK__Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type NETWORK___Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: NETWORK___Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type NETWORK___SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Subscription: ResolverTypeWrapper<{}>;
  BILLING__BigDecimal: ResolverTypeWrapper<Scalars['BILLING__BigDecimal']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
  BILLING__Billing: ResolverTypeWrapper<BILLING__Billing>;
  BILLING__BillingDailyData: ResolverTypeWrapper<BILLING__BillingDailyData>;
  BILLING__BillingDailyData_filter: BILLING__BillingDailyData_filter;
  BILLING__BillingDailyData_orderBy: BILLING__BillingDailyData_orderBy;
  BILLING__Billing_filter: BILLING__Billing_filter;
  BILLING__Billing_orderBy: BILLING__Billing_orderBy;
  BILLING__BlockChangedFilter: BILLING__BlockChangedFilter;
  BILLING__Block_height: BILLING__Block_height;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  BILLING__Bytes: ResolverTypeWrapper<Scalars['BILLING__Bytes']>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  BILLING__OrderDirection: BILLING__OrderDirection;
  String: ResolverTypeWrapper<Scalars['String']>;
  BILLING__TokensAdded: ResolverTypeWrapper<BILLING__TokensAdded>;
  BILLING__TokensAdded_filter: BILLING__TokensAdded_filter;
  BILLING__TokensAdded_orderBy: BILLING__TokensAdded_orderBy;
  BILLING__TokensPulled: ResolverTypeWrapper<BILLING__TokensPulled>;
  BILLING__TokensPulled_filter: BILLING__TokensPulled_filter;
  BILLING__TokensPulled_orderBy: BILLING__TokensPulled_orderBy;
  BILLING__TokensRemoved: ResolverTypeWrapper<BILLING__TokensRemoved>;
  BILLING__TokensRemoved_filter: BILLING__TokensRemoved_filter;
  BILLING__TokensRemoved_orderBy: BILLING__TokensRemoved_orderBy;
  BILLING__Transaction: ResolversTypes['BILLING__TokensAdded'] | ResolversTypes['BILLING__TokensPulled'] | ResolversTypes['BILLING__TokensRemoved'];
  BILLING__TransactionType: BILLING__TransactionType;
  BILLING__Transaction_filter: BILLING__Transaction_filter;
  BILLING__Transaction_orderBy: BILLING__Transaction_orderBy;
  BILLING__User: ResolverTypeWrapper<BILLING__User>;
  BILLING__UserDailyData: ResolverTypeWrapper<BILLING__UserDailyData>;
  BILLING__UserDailyData_filter: BILLING__UserDailyData_filter;
  BILLING__UserDailyData_orderBy: BILLING__UserDailyData_orderBy;
  BILLING__User_filter: BILLING__User_filter;
  BILLING__User_orderBy: BILLING__User_orderBy;
  BILLING___Block_: ResolverTypeWrapper<BILLING___Block_>;
  BILLING___Meta_: ResolverTypeWrapper<BILLING___Meta_>;
  BILLING___SubgraphErrorPolicy_: BILLING___SubgraphErrorPolicy_;
  ENS__AbiChanged: ResolverTypeWrapper<ENS__AbiChanged>;
  ENS__AbiChanged_filter: ENS__AbiChanged_filter;
  ENS__AbiChanged_orderBy: ENS__AbiChanged_orderBy;
  ENS__Account: ResolverTypeWrapper<ENS__Account>;
  ENS__Account_filter: ENS__Account_filter;
  ENS__Account_orderBy: ENS__Account_orderBy;
  ENS__AddrChanged: ResolverTypeWrapper<ENS__AddrChanged>;
  ENS__AddrChanged_filter: ENS__AddrChanged_filter;
  ENS__AddrChanged_orderBy: ENS__AddrChanged_orderBy;
  ENS__AuthorisationChanged: ResolverTypeWrapper<ENS__AuthorisationChanged>;
  ENS__AuthorisationChanged_filter: ENS__AuthorisationChanged_filter;
  ENS__AuthorisationChanged_orderBy: ENS__AuthorisationChanged_orderBy;
  ENS__BigDecimal: ResolverTypeWrapper<Scalars['ENS__BigDecimal']>;
  ENS__BlockChangedFilter: ENS__BlockChangedFilter;
  ENS__Block_height: ENS__Block_height;
  ENS__Bytes: ResolverTypeWrapper<Scalars['ENS__Bytes']>;
  ENS__ContenthashChanged: ResolverTypeWrapper<ENS__ContenthashChanged>;
  ENS__ContenthashChanged_filter: ENS__ContenthashChanged_filter;
  ENS__ContenthashChanged_orderBy: ENS__ContenthashChanged_orderBy;
  ENS__Domain: ResolverTypeWrapper<ENS__Domain>;
  ENS__DomainEvent: ResolversTypes['ENS__NewOwner'] | ResolversTypes['ENS__NewResolver'] | ResolversTypes['ENS__NewTTL'] | ResolversTypes['ENS__Transfer'];
  ENS__DomainEvent_filter: ENS__DomainEvent_filter;
  ENS__DomainEvent_orderBy: ENS__DomainEvent_orderBy;
  ENS__Domain_filter: ENS__Domain_filter;
  ENS__Domain_orderBy: ENS__Domain_orderBy;
  ENS__InterfaceChanged: ResolverTypeWrapper<ENS__InterfaceChanged>;
  ENS__InterfaceChanged_filter: ENS__InterfaceChanged_filter;
  ENS__InterfaceChanged_orderBy: ENS__InterfaceChanged_orderBy;
  ENS__MulticoinAddrChanged: ResolverTypeWrapper<ENS__MulticoinAddrChanged>;
  ENS__MulticoinAddrChanged_filter: ENS__MulticoinAddrChanged_filter;
  ENS__MulticoinAddrChanged_orderBy: ENS__MulticoinAddrChanged_orderBy;
  ENS__NameChanged: ResolverTypeWrapper<ENS__NameChanged>;
  ENS__NameChanged_filter: ENS__NameChanged_filter;
  ENS__NameChanged_orderBy: ENS__NameChanged_orderBy;
  ENS__NameRegistered: ResolverTypeWrapper<ENS__NameRegistered>;
  ENS__NameRegistered_filter: ENS__NameRegistered_filter;
  ENS__NameRegistered_orderBy: ENS__NameRegistered_orderBy;
  ENS__NameRenewed: ResolverTypeWrapper<ENS__NameRenewed>;
  ENS__NameRenewed_filter: ENS__NameRenewed_filter;
  ENS__NameRenewed_orderBy: ENS__NameRenewed_orderBy;
  ENS__NameTransferred: ResolverTypeWrapper<ENS__NameTransferred>;
  ENS__NameTransferred_filter: ENS__NameTransferred_filter;
  ENS__NameTransferred_orderBy: ENS__NameTransferred_orderBy;
  ENS__NewOwner: ResolverTypeWrapper<ENS__NewOwner>;
  ENS__NewOwner_filter: ENS__NewOwner_filter;
  ENS__NewOwner_orderBy: ENS__NewOwner_orderBy;
  ENS__NewResolver: ResolverTypeWrapper<ENS__NewResolver>;
  ENS__NewResolver_filter: ENS__NewResolver_filter;
  ENS__NewResolver_orderBy: ENS__NewResolver_orderBy;
  ENS__NewTTL: ResolverTypeWrapper<ENS__NewTTL>;
  ENS__NewTTL_filter: ENS__NewTTL_filter;
  ENS__NewTTL_orderBy: ENS__NewTTL_orderBy;
  ENS__OrderDirection: ENS__OrderDirection;
  ENS__PubkeyChanged: ResolverTypeWrapper<ENS__PubkeyChanged>;
  ENS__PubkeyChanged_filter: ENS__PubkeyChanged_filter;
  ENS__PubkeyChanged_orderBy: ENS__PubkeyChanged_orderBy;
  ENS__Registration: ResolverTypeWrapper<ENS__Registration>;
  ENS__RegistrationEvent: ResolversTypes['ENS__NameRegistered'] | ResolversTypes['ENS__NameRenewed'] | ResolversTypes['ENS__NameTransferred'];
  ENS__RegistrationEvent_filter: ENS__RegistrationEvent_filter;
  ENS__RegistrationEvent_orderBy: ENS__RegistrationEvent_orderBy;
  ENS__Registration_filter: ENS__Registration_filter;
  ENS__Registration_orderBy: ENS__Registration_orderBy;
  ENS__Resolver: ResolverTypeWrapper<ENS__Resolver>;
  ENS__ResolverEvent: ResolversTypes['ENS__AbiChanged'] | ResolversTypes['ENS__AddrChanged'] | ResolversTypes['ENS__AuthorisationChanged'] | ResolversTypes['ENS__ContenthashChanged'] | ResolversTypes['ENS__InterfaceChanged'] | ResolversTypes['ENS__MulticoinAddrChanged'] | ResolversTypes['ENS__NameChanged'] | ResolversTypes['ENS__PubkeyChanged'] | ResolversTypes['ENS__TextChanged'];
  ENS__ResolverEvent_filter: ENS__ResolverEvent_filter;
  ENS__ResolverEvent_orderBy: ENS__ResolverEvent_orderBy;
  ENS__Resolver_filter: ENS__Resolver_filter;
  ENS__Resolver_orderBy: ENS__Resolver_orderBy;
  ENS__TextChanged: ResolverTypeWrapper<ENS__TextChanged>;
  ENS__TextChanged_filter: ENS__TextChanged_filter;
  ENS__TextChanged_orderBy: ENS__TextChanged_orderBy;
  ENS__Transfer: ResolverTypeWrapper<ENS__Transfer>;
  ENS__Transfer_filter: ENS__Transfer_filter;
  ENS__Transfer_orderBy: ENS__Transfer_orderBy;
  ENS___Block_: ResolverTypeWrapper<ENS___Block_>;
  ENS___Meta_: ResolverTypeWrapper<ENS___Meta_>;
  ENS___SubgraphErrorPolicy_: ENS___SubgraphErrorPolicy_;
  ANALYTICS__Allocation: ResolverTypeWrapper<ANALYTICS__Allocation>;
  ANALYTICS__AllocationStatus: ANALYTICS__AllocationStatus;
  ANALYTICS__Allocation_filter: ANALYTICS__Allocation_filter;
  ANALYTICS__Allocation_orderBy: ANALYTICS__Allocation_orderBy;
  ANALYTICS__BigDecimal: ResolverTypeWrapper<Scalars['ANALYTICS__BigDecimal']>;
  ANALYTICS__BlockChangedFilter: ANALYTICS__BlockChangedFilter;
  ANALYTICS__Block_height: ANALYTICS__Block_height;
  ANALYTICS__Bytes: ResolverTypeWrapper<Scalars['ANALYTICS__Bytes']>;
  ANALYTICS__Curator: ResolverTypeWrapper<ANALYTICS__Curator>;
  ANALYTICS__Curator_filter: ANALYTICS__Curator_filter;
  ANALYTICS__Curator_orderBy: ANALYTICS__Curator_orderBy;
  ANALYTICS__DelegatedStake: ResolverTypeWrapper<ANALYTICS__DelegatedStake>;
  ANALYTICS__DelegatedStakeDailyData: ResolverTypeWrapper<ANALYTICS__DelegatedStakeDailyData>;
  ANALYTICS__DelegatedStakeDailyData_filter: ANALYTICS__DelegatedStakeDailyData_filter;
  ANALYTICS__DelegatedStakeDailyData_orderBy: ANALYTICS__DelegatedStakeDailyData_orderBy;
  ANALYTICS__DelegatedStake_filter: ANALYTICS__DelegatedStake_filter;
  ANALYTICS__DelegatedStake_orderBy: ANALYTICS__DelegatedStake_orderBy;
  ANALYTICS__Delegator: ResolverTypeWrapper<ANALYTICS__Delegator>;
  ANALYTICS__DelegatorDailyData: ResolverTypeWrapper<ANALYTICS__DelegatorDailyData>;
  ANALYTICS__DelegatorDailyData_filter: ANALYTICS__DelegatorDailyData_filter;
  ANALYTICS__DelegatorDailyData_orderBy: ANALYTICS__DelegatorDailyData_orderBy;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation: ResolverTypeWrapper<ANALYTICS__DelegatorDelegatedStakeDailyRelation>;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter: ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy: ANALYTICS__DelegatorDelegatedStakeDailyRelation_orderBy;
  ANALYTICS__Delegator_filter: ANALYTICS__Delegator_filter;
  ANALYTICS__Delegator_orderBy: ANALYTICS__Delegator_orderBy;
  ANALYTICS__GraphAccount: ResolverTypeWrapper<ANALYTICS__GraphAccount>;
  ANALYTICS__GraphAccountName: ResolverTypeWrapper<ANALYTICS__GraphAccountName>;
  ANALYTICS__GraphAccountName_filter: ANALYTICS__GraphAccountName_filter;
  ANALYTICS__GraphAccountName_orderBy: ANALYTICS__GraphAccountName_orderBy;
  ANALYTICS__GraphAccount_filter: ANALYTICS__GraphAccount_filter;
  ANALYTICS__GraphAccount_orderBy: ANALYTICS__GraphAccount_orderBy;
  ANALYTICS__GraphNetwork: ResolverTypeWrapper<ANALYTICS__GraphNetwork>;
  ANALYTICS__GraphNetworkDailyData: ResolverTypeWrapper<ANALYTICS__GraphNetworkDailyData>;
  ANALYTICS__GraphNetworkDailyData_filter: ANALYTICS__GraphNetworkDailyData_filter;
  ANALYTICS__GraphNetworkDailyData_orderBy: ANALYTICS__GraphNetworkDailyData_orderBy;
  ANALYTICS__GraphNetwork_filter: ANALYTICS__GraphNetwork_filter;
  ANALYTICS__GraphNetwork_orderBy: ANALYTICS__GraphNetwork_orderBy;
  ANALYTICS__Indexer: ResolverTypeWrapper<ANALYTICS__Indexer>;
  ANALYTICS__IndexerDailyData: ResolverTypeWrapper<ANALYTICS__IndexerDailyData>;
  ANALYTICS__IndexerDailyData_filter: ANALYTICS__IndexerDailyData_filter;
  ANALYTICS__IndexerDailyData_orderBy: ANALYTICS__IndexerDailyData_orderBy;
  ANALYTICS__IndexerDelegatedStakeRelation: ResolverTypeWrapper<ANALYTICS__IndexerDelegatedStakeRelation>;
  ANALYTICS__IndexerDelegatedStakeRelation_filter: ANALYTICS__IndexerDelegatedStakeRelation_filter;
  ANALYTICS__IndexerDelegatedStakeRelation_orderBy: ANALYTICS__IndexerDelegatedStakeRelation_orderBy;
  ANALYTICS__Indexer_filter: ANALYTICS__Indexer_filter;
  ANALYTICS__Indexer_orderBy: ANALYTICS__Indexer_orderBy;
  ANALYTICS__NameSignal: ResolverTypeWrapper<ANALYTICS__NameSignal>;
  ANALYTICS__NameSignalTransaction: ResolverTypeWrapper<ANALYTICS__NameSignalTransaction>;
  ANALYTICS__NameSignalTransaction_filter: ANALYTICS__NameSignalTransaction_filter;
  ANALYTICS__NameSignalTransaction_orderBy: ANALYTICS__NameSignalTransaction_orderBy;
  ANALYTICS__NameSignal_filter: ANALYTICS__NameSignal_filter;
  ANALYTICS__NameSignal_orderBy: ANALYTICS__NameSignal_orderBy;
  ANALYTICS__NameSystem: ANALYTICS__NameSystem;
  ANALYTICS__OrderDirection: ANALYTICS__OrderDirection;
  ANALYTICS__Pool: ResolverTypeWrapper<ANALYTICS__Pool>;
  ANALYTICS__Pool_filter: ANALYTICS__Pool_filter;
  ANALYTICS__Pool_orderBy: ANALYTICS__Pool_orderBy;
  ANALYTICS__Signal: ResolverTypeWrapper<ANALYTICS__Signal>;
  ANALYTICS__SignalTransaction: ResolverTypeWrapper<ANALYTICS__SignalTransaction>;
  ANALYTICS__SignalTransaction_filter: ANALYTICS__SignalTransaction_filter;
  ANALYTICS__SignalTransaction_orderBy: ANALYTICS__SignalTransaction_orderBy;
  ANALYTICS__Signal_filter: ANALYTICS__Signal_filter;
  ANALYTICS__Signal_orderBy: ANALYTICS__Signal_orderBy;
  ANALYTICS__Subgraph: ResolverTypeWrapper<ANALYTICS__Subgraph>;
  ANALYTICS__SubgraphDeployment: ResolverTypeWrapper<ANALYTICS__SubgraphDeployment>;
  ANALYTICS__SubgraphDeploymentDailyData: ResolverTypeWrapper<ANALYTICS__SubgraphDeploymentDailyData>;
  ANALYTICS__SubgraphDeploymentDailyData_filter: ANALYTICS__SubgraphDeploymentDailyData_filter;
  ANALYTICS__SubgraphDeploymentDailyData_orderBy: ANALYTICS__SubgraphDeploymentDailyData_orderBy;
  ANALYTICS__SubgraphDeployment_filter: ANALYTICS__SubgraphDeployment_filter;
  ANALYTICS__SubgraphDeployment_orderBy: ANALYTICS__SubgraphDeployment_orderBy;
  ANALYTICS__SubgraphVersion: ResolverTypeWrapper<ANALYTICS__SubgraphVersion>;
  ANALYTICS__SubgraphVersion_filter: ANALYTICS__SubgraphVersion_filter;
  ANALYTICS__SubgraphVersion_orderBy: ANALYTICS__SubgraphVersion_orderBy;
  ANALYTICS__Subgraph_filter: ANALYTICS__Subgraph_filter;
  ANALYTICS__Subgraph_orderBy: ANALYTICS__Subgraph_orderBy;
  ANALYTICS__Transaction: ResolversTypes['ANALYTICS__NameSignalTransaction'] | ResolversTypes['ANALYTICS__SignalTransaction'];
  ANALYTICS__TransactionType: ANALYTICS__TransactionType;
  ANALYTICS__Transaction_filter: ANALYTICS__Transaction_filter;
  ANALYTICS__Transaction_orderBy: ANALYTICS__Transaction_orderBy;
  ANALYTICS___Block_: ResolverTypeWrapper<ANALYTICS___Block_>;
  ANALYTICS___Meta_: ResolverTypeWrapper<ANALYTICS___Meta_>;
  ANALYTICS___SubgraphErrorPolicy_: ANALYTICS___SubgraphErrorPolicy_;
  NETWORK__Allocation: ResolverTypeWrapper<NETWORK__Allocation>;
  NETWORK__AllocationStatus: NETWORK__AllocationStatus;
  NETWORK__Allocation_filter: NETWORK__Allocation_filter;
  NETWORK__Allocation_orderBy: NETWORK__Allocation_orderBy;
  NETWORK__Attestation: ResolverTypeWrapper<NETWORK__Attestation>;
  NETWORK__Attestation_filter: NETWORK__Attestation_filter;
  NETWORK__Attestation_orderBy: NETWORK__Attestation_orderBy;
  NETWORK__AuthorizedFunction: ResolverTypeWrapper<NETWORK__AuthorizedFunction>;
  NETWORK__AuthorizedFunction_filter: NETWORK__AuthorizedFunction_filter;
  NETWORK__AuthorizedFunction_orderBy: NETWORK__AuthorizedFunction_orderBy;
  NETWORK__BigDecimal: ResolverTypeWrapper<Scalars['NETWORK__BigDecimal']>;
  NETWORK__BlockChangedFilter: NETWORK__BlockChangedFilter;
  NETWORK__Block_height: NETWORK__Block_height;
  NETWORK__Bytes: ResolverTypeWrapper<Scalars['NETWORK__Bytes']>;
  NETWORK__Curator: ResolverTypeWrapper<NETWORK__Curator>;
  NETWORK__Curator_filter: NETWORK__Curator_filter;
  NETWORK__Curator_orderBy: NETWORK__Curator_orderBy;
  NETWORK__CurrentSubgraphDeploymentRelation: ResolverTypeWrapper<NETWORK__CurrentSubgraphDeploymentRelation>;
  NETWORK__CurrentSubgraphDeploymentRelation_filter: NETWORK__CurrentSubgraphDeploymentRelation_filter;
  NETWORK__CurrentSubgraphDeploymentRelation_orderBy: NETWORK__CurrentSubgraphDeploymentRelation_orderBy;
  NETWORK__DelegatedStake: ResolverTypeWrapper<NETWORK__DelegatedStake>;
  NETWORK__DelegatedStake_filter: NETWORK__DelegatedStake_filter;
  NETWORK__DelegatedStake_orderBy: NETWORK__DelegatedStake_orderBy;
  NETWORK__Delegator: ResolverTypeWrapper<NETWORK__Delegator>;
  NETWORK__Delegator_filter: NETWORK__Delegator_filter;
  NETWORK__Delegator_orderBy: NETWORK__Delegator_orderBy;
  NETWORK__Dispute: ResolverTypeWrapper<NETWORK__Dispute>;
  NETWORK__DisputeStatus: NETWORK__DisputeStatus;
  NETWORK__DisputeType: NETWORK__DisputeType;
  NETWORK__Dispute_filter: NETWORK__Dispute_filter;
  NETWORK__Dispute_orderBy: NETWORK__Dispute_orderBy;
  NETWORK__Epoch: ResolverTypeWrapper<NETWORK__Epoch>;
  NETWORK__Epoch_filter: NETWORK__Epoch_filter;
  NETWORK__Epoch_orderBy: NETWORK__Epoch_orderBy;
  NETWORK__GraphAccount: ResolverTypeWrapper<NETWORK__GraphAccount>;
  NETWORK__GraphAccountName: ResolverTypeWrapper<NETWORK__GraphAccountName>;
  NETWORK__GraphAccountName_filter: NETWORK__GraphAccountName_filter;
  NETWORK__GraphAccountName_orderBy: NETWORK__GraphAccountName_orderBy;
  NETWORK__GraphAccount_filter: NETWORK__GraphAccount_filter;
  NETWORK__GraphAccount_orderBy: NETWORK__GraphAccount_orderBy;
  NETWORK__GraphNetwork: ResolverTypeWrapper<NETWORK__GraphNetwork>;
  NETWORK__GraphNetwork_filter: NETWORK__GraphNetwork_filter;
  NETWORK__GraphNetwork_orderBy: NETWORK__GraphNetwork_orderBy;
  NETWORK__Indexer: ResolverTypeWrapper<NETWORK__Indexer>;
  NETWORK__Indexer_filter: NETWORK__Indexer_filter;
  NETWORK__Indexer_orderBy: NETWORK__Indexer_orderBy;
  NETWORK__NameSignal: ResolverTypeWrapper<NETWORK__NameSignal>;
  NETWORK__NameSignalSubgraphRelation: ResolverTypeWrapper<NETWORK__NameSignalSubgraphRelation>;
  NETWORK__NameSignalSubgraphRelation_filter: NETWORK__NameSignalSubgraphRelation_filter;
  NETWORK__NameSignalSubgraphRelation_orderBy: NETWORK__NameSignalSubgraphRelation_orderBy;
  NETWORK__NameSignalTransaction: ResolverTypeWrapper<NETWORK__NameSignalTransaction>;
  NETWORK__NameSignalTransaction_filter: NETWORK__NameSignalTransaction_filter;
  NETWORK__NameSignalTransaction_orderBy: NETWORK__NameSignalTransaction_orderBy;
  NETWORK__NameSignal_filter: NETWORK__NameSignal_filter;
  NETWORK__NameSignal_orderBy: NETWORK__NameSignal_orderBy;
  NETWORK__NameSystem: NETWORK__NameSystem;
  NETWORK__Network: ResolverTypeWrapper<NETWORK__Network>;
  NETWORK__Network_filter: NETWORK__Network_filter;
  NETWORK__Network_orderBy: NETWORK__Network_orderBy;
  NETWORK__OrderDirection: NETWORK__OrderDirection;
  NETWORK__Pool: ResolverTypeWrapper<NETWORK__Pool>;
  NETWORK__Pool_filter: NETWORK__Pool_filter;
  NETWORK__Pool_orderBy: NETWORK__Pool_orderBy;
  NETWORK__Revocability: NETWORK__Revocability;
  NETWORK__Signal: ResolverTypeWrapper<NETWORK__Signal>;
  NETWORK__SignalTransaction: ResolverTypeWrapper<NETWORK__SignalTransaction>;
  NETWORK__SignalTransaction_filter: NETWORK__SignalTransaction_filter;
  NETWORK__SignalTransaction_orderBy: NETWORK__SignalTransaction_orderBy;
  NETWORK__Signal_filter: NETWORK__Signal_filter;
  NETWORK__Signal_orderBy: NETWORK__Signal_orderBy;
  NETWORK__Subgraph: ResolverTypeWrapper<NETWORK__Subgraph>;
  NETWORK__SubgraphCategory: ResolverTypeWrapper<NETWORK__SubgraphCategory>;
  NETWORK__SubgraphCategoryRelation: ResolverTypeWrapper<NETWORK__SubgraphCategoryRelation>;
  NETWORK__SubgraphCategoryRelation_filter: NETWORK__SubgraphCategoryRelation_filter;
  NETWORK__SubgraphCategoryRelation_orderBy: NETWORK__SubgraphCategoryRelation_orderBy;
  NETWORK__SubgraphCategory_filter: NETWORK__SubgraphCategory_filter;
  NETWORK__SubgraphCategory_orderBy: NETWORK__SubgraphCategory_orderBy;
  NETWORK__SubgraphDeployment: ResolverTypeWrapper<NETWORK__SubgraphDeployment>;
  NETWORK__SubgraphDeployment_filter: NETWORK__SubgraphDeployment_filter;
  NETWORK__SubgraphDeployment_orderBy: NETWORK__SubgraphDeployment_orderBy;
  NETWORK__SubgraphVersion: ResolverTypeWrapper<NETWORK__SubgraphVersion>;
  NETWORK__SubgraphVersion_filter: NETWORK__SubgraphVersion_filter;
  NETWORK__SubgraphVersion_orderBy: NETWORK__SubgraphVersion_orderBy;
  NETWORK__Subgraph_filter: NETWORK__Subgraph_filter;
  NETWORK__Subgraph_orderBy: NETWORK__Subgraph_orderBy;
  NETWORK__TokenLockWallet: ResolverTypeWrapper<NETWORK__TokenLockWallet>;
  NETWORK__TokenLockWallet_filter: NETWORK__TokenLockWallet_filter;
  NETWORK__TokenLockWallet_orderBy: NETWORK__TokenLockWallet_orderBy;
  NETWORK__TokenManager: ResolverTypeWrapper<NETWORK__TokenManager>;
  NETWORK__TokenManager_filter: NETWORK__TokenManager_filter;
  NETWORK__TokenManager_orderBy: NETWORK__TokenManager_orderBy;
  NETWORK__Transaction: ResolversTypes['NETWORK__NameSignalTransaction'] | ResolversTypes['NETWORK__SignalTransaction'];
  NETWORK__TransactionType: NETWORK__TransactionType;
  NETWORK__Transaction_filter: NETWORK__Transaction_filter;
  NETWORK__Transaction_orderBy: NETWORK__Transaction_orderBy;
  NETWORK___Block_: ResolverTypeWrapper<NETWORK___Block_>;
  NETWORK___Meta_: ResolverTypeWrapper<NETWORK___Meta_>;
  NETWORK___SubgraphErrorPolicy_: NETWORK___SubgraphErrorPolicy_;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Subscription: {};
  BILLING__BigDecimal: Scalars['BILLING__BigDecimal'];
  BigInt: Scalars['BigInt'];
  BILLING__Billing: BILLING__Billing;
  BILLING__BillingDailyData: BILLING__BillingDailyData;
  BILLING__BillingDailyData_filter: BILLING__BillingDailyData_filter;
  BILLING__Billing_filter: BILLING__Billing_filter;
  BILLING__BlockChangedFilter: BILLING__BlockChangedFilter;
  BILLING__Block_height: BILLING__Block_height;
  Boolean: Scalars['Boolean'];
  BILLING__Bytes: Scalars['BILLING__Bytes'];
  Float: Scalars['Float'];
  ID: Scalars['ID'];
  Int: Scalars['Int'];
  String: Scalars['String'];
  BILLING__TokensAdded: BILLING__TokensAdded;
  BILLING__TokensAdded_filter: BILLING__TokensAdded_filter;
  BILLING__TokensPulled: BILLING__TokensPulled;
  BILLING__TokensPulled_filter: BILLING__TokensPulled_filter;
  BILLING__TokensRemoved: BILLING__TokensRemoved;
  BILLING__TokensRemoved_filter: BILLING__TokensRemoved_filter;
  BILLING__Transaction: ResolversParentTypes['BILLING__TokensAdded'] | ResolversParentTypes['BILLING__TokensPulled'] | ResolversParentTypes['BILLING__TokensRemoved'];
  BILLING__Transaction_filter: BILLING__Transaction_filter;
  BILLING__User: BILLING__User;
  BILLING__UserDailyData: BILLING__UserDailyData;
  BILLING__UserDailyData_filter: BILLING__UserDailyData_filter;
  BILLING__User_filter: BILLING__User_filter;
  BILLING___Block_: BILLING___Block_;
  BILLING___Meta_: BILLING___Meta_;
  ENS__AbiChanged: ENS__AbiChanged;
  ENS__AbiChanged_filter: ENS__AbiChanged_filter;
  ENS__Account: ENS__Account;
  ENS__Account_filter: ENS__Account_filter;
  ENS__AddrChanged: ENS__AddrChanged;
  ENS__AddrChanged_filter: ENS__AddrChanged_filter;
  ENS__AuthorisationChanged: ENS__AuthorisationChanged;
  ENS__AuthorisationChanged_filter: ENS__AuthorisationChanged_filter;
  ENS__BigDecimal: Scalars['ENS__BigDecimal'];
  ENS__BlockChangedFilter: ENS__BlockChangedFilter;
  ENS__Block_height: ENS__Block_height;
  ENS__Bytes: Scalars['ENS__Bytes'];
  ENS__ContenthashChanged: ENS__ContenthashChanged;
  ENS__ContenthashChanged_filter: ENS__ContenthashChanged_filter;
  ENS__Domain: ENS__Domain;
  ENS__DomainEvent: ResolversParentTypes['ENS__NewOwner'] | ResolversParentTypes['ENS__NewResolver'] | ResolversParentTypes['ENS__NewTTL'] | ResolversParentTypes['ENS__Transfer'];
  ENS__DomainEvent_filter: ENS__DomainEvent_filter;
  ENS__Domain_filter: ENS__Domain_filter;
  ENS__InterfaceChanged: ENS__InterfaceChanged;
  ENS__InterfaceChanged_filter: ENS__InterfaceChanged_filter;
  ENS__MulticoinAddrChanged: ENS__MulticoinAddrChanged;
  ENS__MulticoinAddrChanged_filter: ENS__MulticoinAddrChanged_filter;
  ENS__NameChanged: ENS__NameChanged;
  ENS__NameChanged_filter: ENS__NameChanged_filter;
  ENS__NameRegistered: ENS__NameRegistered;
  ENS__NameRegistered_filter: ENS__NameRegistered_filter;
  ENS__NameRenewed: ENS__NameRenewed;
  ENS__NameRenewed_filter: ENS__NameRenewed_filter;
  ENS__NameTransferred: ENS__NameTransferred;
  ENS__NameTransferred_filter: ENS__NameTransferred_filter;
  ENS__NewOwner: ENS__NewOwner;
  ENS__NewOwner_filter: ENS__NewOwner_filter;
  ENS__NewResolver: ENS__NewResolver;
  ENS__NewResolver_filter: ENS__NewResolver_filter;
  ENS__NewTTL: ENS__NewTTL;
  ENS__NewTTL_filter: ENS__NewTTL_filter;
  ENS__PubkeyChanged: ENS__PubkeyChanged;
  ENS__PubkeyChanged_filter: ENS__PubkeyChanged_filter;
  ENS__Registration: ENS__Registration;
  ENS__RegistrationEvent: ResolversParentTypes['ENS__NameRegistered'] | ResolversParentTypes['ENS__NameRenewed'] | ResolversParentTypes['ENS__NameTransferred'];
  ENS__RegistrationEvent_filter: ENS__RegistrationEvent_filter;
  ENS__Registration_filter: ENS__Registration_filter;
  ENS__Resolver: ENS__Resolver;
  ENS__ResolverEvent: ResolversParentTypes['ENS__AbiChanged'] | ResolversParentTypes['ENS__AddrChanged'] | ResolversParentTypes['ENS__AuthorisationChanged'] | ResolversParentTypes['ENS__ContenthashChanged'] | ResolversParentTypes['ENS__InterfaceChanged'] | ResolversParentTypes['ENS__MulticoinAddrChanged'] | ResolversParentTypes['ENS__NameChanged'] | ResolversParentTypes['ENS__PubkeyChanged'] | ResolversParentTypes['ENS__TextChanged'];
  ENS__ResolverEvent_filter: ENS__ResolverEvent_filter;
  ENS__Resolver_filter: ENS__Resolver_filter;
  ENS__TextChanged: ENS__TextChanged;
  ENS__TextChanged_filter: ENS__TextChanged_filter;
  ENS__Transfer: ENS__Transfer;
  ENS__Transfer_filter: ENS__Transfer_filter;
  ENS___Block_: ENS___Block_;
  ENS___Meta_: ENS___Meta_;
  ANALYTICS__Allocation: ANALYTICS__Allocation;
  ANALYTICS__Allocation_filter: ANALYTICS__Allocation_filter;
  ANALYTICS__BigDecimal: Scalars['ANALYTICS__BigDecimal'];
  ANALYTICS__BlockChangedFilter: ANALYTICS__BlockChangedFilter;
  ANALYTICS__Block_height: ANALYTICS__Block_height;
  ANALYTICS__Bytes: Scalars['ANALYTICS__Bytes'];
  ANALYTICS__Curator: ANALYTICS__Curator;
  ANALYTICS__Curator_filter: ANALYTICS__Curator_filter;
  ANALYTICS__DelegatedStake: ANALYTICS__DelegatedStake;
  ANALYTICS__DelegatedStakeDailyData: ANALYTICS__DelegatedStakeDailyData;
  ANALYTICS__DelegatedStakeDailyData_filter: ANALYTICS__DelegatedStakeDailyData_filter;
  ANALYTICS__DelegatedStake_filter: ANALYTICS__DelegatedStake_filter;
  ANALYTICS__Delegator: ANALYTICS__Delegator;
  ANALYTICS__DelegatorDailyData: ANALYTICS__DelegatorDailyData;
  ANALYTICS__DelegatorDailyData_filter: ANALYTICS__DelegatorDailyData_filter;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation: ANALYTICS__DelegatorDelegatedStakeDailyRelation;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter: ANALYTICS__DelegatorDelegatedStakeDailyRelation_filter;
  ANALYTICS__Delegator_filter: ANALYTICS__Delegator_filter;
  ANALYTICS__GraphAccount: ANALYTICS__GraphAccount;
  ANALYTICS__GraphAccountName: ANALYTICS__GraphAccountName;
  ANALYTICS__GraphAccountName_filter: ANALYTICS__GraphAccountName_filter;
  ANALYTICS__GraphAccount_filter: ANALYTICS__GraphAccount_filter;
  ANALYTICS__GraphNetwork: ANALYTICS__GraphNetwork;
  ANALYTICS__GraphNetworkDailyData: ANALYTICS__GraphNetworkDailyData;
  ANALYTICS__GraphNetworkDailyData_filter: ANALYTICS__GraphNetworkDailyData_filter;
  ANALYTICS__GraphNetwork_filter: ANALYTICS__GraphNetwork_filter;
  ANALYTICS__Indexer: ANALYTICS__Indexer;
  ANALYTICS__IndexerDailyData: ANALYTICS__IndexerDailyData;
  ANALYTICS__IndexerDailyData_filter: ANALYTICS__IndexerDailyData_filter;
  ANALYTICS__IndexerDelegatedStakeRelation: ANALYTICS__IndexerDelegatedStakeRelation;
  ANALYTICS__IndexerDelegatedStakeRelation_filter: ANALYTICS__IndexerDelegatedStakeRelation_filter;
  ANALYTICS__Indexer_filter: ANALYTICS__Indexer_filter;
  ANALYTICS__NameSignal: ANALYTICS__NameSignal;
  ANALYTICS__NameSignalTransaction: ANALYTICS__NameSignalTransaction;
  ANALYTICS__NameSignalTransaction_filter: ANALYTICS__NameSignalTransaction_filter;
  ANALYTICS__NameSignal_filter: ANALYTICS__NameSignal_filter;
  ANALYTICS__Pool: ANALYTICS__Pool;
  ANALYTICS__Pool_filter: ANALYTICS__Pool_filter;
  ANALYTICS__Signal: ANALYTICS__Signal;
  ANALYTICS__SignalTransaction: ANALYTICS__SignalTransaction;
  ANALYTICS__SignalTransaction_filter: ANALYTICS__SignalTransaction_filter;
  ANALYTICS__Signal_filter: ANALYTICS__Signal_filter;
  ANALYTICS__Subgraph: ANALYTICS__Subgraph;
  ANALYTICS__SubgraphDeployment: ANALYTICS__SubgraphDeployment;
  ANALYTICS__SubgraphDeploymentDailyData: ANALYTICS__SubgraphDeploymentDailyData;
  ANALYTICS__SubgraphDeploymentDailyData_filter: ANALYTICS__SubgraphDeploymentDailyData_filter;
  ANALYTICS__SubgraphDeployment_filter: ANALYTICS__SubgraphDeployment_filter;
  ANALYTICS__SubgraphVersion: ANALYTICS__SubgraphVersion;
  ANALYTICS__SubgraphVersion_filter: ANALYTICS__SubgraphVersion_filter;
  ANALYTICS__Subgraph_filter: ANALYTICS__Subgraph_filter;
  ANALYTICS__Transaction: ResolversParentTypes['ANALYTICS__NameSignalTransaction'] | ResolversParentTypes['ANALYTICS__SignalTransaction'];
  ANALYTICS__Transaction_filter: ANALYTICS__Transaction_filter;
  ANALYTICS___Block_: ANALYTICS___Block_;
  ANALYTICS___Meta_: ANALYTICS___Meta_;
  NETWORK__Allocation: NETWORK__Allocation;
  NETWORK__Allocation_filter: NETWORK__Allocation_filter;
  NETWORK__Attestation: NETWORK__Attestation;
  NETWORK__Attestation_filter: NETWORK__Attestation_filter;
  NETWORK__AuthorizedFunction: NETWORK__AuthorizedFunction;
  NETWORK__AuthorizedFunction_filter: NETWORK__AuthorizedFunction_filter;
  NETWORK__BigDecimal: Scalars['NETWORK__BigDecimal'];
  NETWORK__BlockChangedFilter: NETWORK__BlockChangedFilter;
  NETWORK__Block_height: NETWORK__Block_height;
  NETWORK__Bytes: Scalars['NETWORK__Bytes'];
  NETWORK__Curator: NETWORK__Curator;
  NETWORK__Curator_filter: NETWORK__Curator_filter;
  NETWORK__CurrentSubgraphDeploymentRelation: NETWORK__CurrentSubgraphDeploymentRelation;
  NETWORK__CurrentSubgraphDeploymentRelation_filter: NETWORK__CurrentSubgraphDeploymentRelation_filter;
  NETWORK__DelegatedStake: NETWORK__DelegatedStake;
  NETWORK__DelegatedStake_filter: NETWORK__DelegatedStake_filter;
  NETWORK__Delegator: NETWORK__Delegator;
  NETWORK__Delegator_filter: NETWORK__Delegator_filter;
  NETWORK__Dispute: NETWORK__Dispute;
  NETWORK__Dispute_filter: NETWORK__Dispute_filter;
  NETWORK__Epoch: NETWORK__Epoch;
  NETWORK__Epoch_filter: NETWORK__Epoch_filter;
  NETWORK__GraphAccount: NETWORK__GraphAccount;
  NETWORK__GraphAccountName: NETWORK__GraphAccountName;
  NETWORK__GraphAccountName_filter: NETWORK__GraphAccountName_filter;
  NETWORK__GraphAccount_filter: NETWORK__GraphAccount_filter;
  NETWORK__GraphNetwork: NETWORK__GraphNetwork;
  NETWORK__GraphNetwork_filter: NETWORK__GraphNetwork_filter;
  NETWORK__Indexer: NETWORK__Indexer;
  NETWORK__Indexer_filter: NETWORK__Indexer_filter;
  NETWORK__NameSignal: NETWORK__NameSignal;
  NETWORK__NameSignalSubgraphRelation: NETWORK__NameSignalSubgraphRelation;
  NETWORK__NameSignalSubgraphRelation_filter: NETWORK__NameSignalSubgraphRelation_filter;
  NETWORK__NameSignalTransaction: NETWORK__NameSignalTransaction;
  NETWORK__NameSignalTransaction_filter: NETWORK__NameSignalTransaction_filter;
  NETWORK__NameSignal_filter: NETWORK__NameSignal_filter;
  NETWORK__Network: NETWORK__Network;
  NETWORK__Network_filter: NETWORK__Network_filter;
  NETWORK__Pool: NETWORK__Pool;
  NETWORK__Pool_filter: NETWORK__Pool_filter;
  NETWORK__Signal: NETWORK__Signal;
  NETWORK__SignalTransaction: NETWORK__SignalTransaction;
  NETWORK__SignalTransaction_filter: NETWORK__SignalTransaction_filter;
  NETWORK__Signal_filter: NETWORK__Signal_filter;
  NETWORK__Subgraph: NETWORK__Subgraph;
  NETWORK__SubgraphCategory: NETWORK__SubgraphCategory;
  NETWORK__SubgraphCategoryRelation: NETWORK__SubgraphCategoryRelation;
  NETWORK__SubgraphCategoryRelation_filter: NETWORK__SubgraphCategoryRelation_filter;
  NETWORK__SubgraphCategory_filter: NETWORK__SubgraphCategory_filter;
  NETWORK__SubgraphDeployment: NETWORK__SubgraphDeployment;
  NETWORK__SubgraphDeployment_filter: NETWORK__SubgraphDeployment_filter;
  NETWORK__SubgraphVersion: NETWORK__SubgraphVersion;
  NETWORK__SubgraphVersion_filter: NETWORK__SubgraphVersion_filter;
  NETWORK__Subgraph_filter: NETWORK__Subgraph_filter;
  NETWORK__TokenLockWallet: NETWORK__TokenLockWallet;
  NETWORK__TokenLockWallet_filter: NETWORK__TokenLockWallet_filter;
  NETWORK__TokenManager: NETWORK__TokenManager;
  NETWORK__TokenManager_filter: NETWORK__TokenManager_filter;
  NETWORK__Transaction: ResolversParentTypes['NETWORK__NameSignalTransaction'] | ResolversParentTypes['NETWORK__SignalTransaction'];
  NETWORK__Transaction_filter: NETWORK__Transaction_filter;
  NETWORK___Block_: NETWORK___Block_;
  NETWORK___Meta_: NETWORK___Meta_;
}>;

export type entityDirectiveArgs = { };

export type entityDirectiveResolver<Result, Parent, ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, Args = entityDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type subgraphIdDirectiveArgs = {
  id: Scalars['String'];
};

export type subgraphIdDirectiveResolver<Result, Parent, ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, Args = subgraphIdDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type derivedFromDirectiveArgs = {
  field: Scalars['String'];
};

export type derivedFromDirectiveResolver<Result, Parent, ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, Args = derivedFromDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type QueryResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  BILLING__billing?: Resolver<Maybe<ResolversTypes['BILLING__Billing']>, ParentType, ContextType, RequireFields<QueryBILLING__billingArgs, 'id' | 'subgraphError'>>;
  BILLING__billings?: Resolver<Array<ResolversTypes['BILLING__Billing']>, ParentType, ContextType, RequireFields<QueryBILLING__billingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__user?: Resolver<Maybe<ResolversTypes['BILLING__User']>, ParentType, ContextType, RequireFields<QueryBILLING__userArgs, 'id' | 'subgraphError'>>;
  BILLING__users?: Resolver<Array<ResolversTypes['BILLING__User']>, ParentType, ContextType, RequireFields<QueryBILLING__usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensAdded?: Resolver<Maybe<ResolversTypes['BILLING__TokensAdded']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensAddedArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensAddeds?: Resolver<Array<ResolversTypes['BILLING__TokensAdded']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensAddedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensRemoved?: Resolver<Maybe<ResolversTypes['BILLING__TokensRemoved']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensRemovedArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensRemoveds?: Resolver<Array<ResolversTypes['BILLING__TokensRemoved']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensRemovedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensPulled?: Resolver<Maybe<ResolversTypes['BILLING__TokensPulled']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensPulledArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensPulleds?: Resolver<Array<ResolversTypes['BILLING__TokensPulled']>, ParentType, ContextType, RequireFields<QueryBILLING__tokensPulledsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__billingDailyData?: Resolver<Maybe<ResolversTypes['BILLING__BillingDailyData']>, ParentType, ContextType, RequireFields<QueryBILLING__billingDailyDataArgs, 'id' | 'subgraphError'>>;
  BILLING__billingDailyDatas?: Resolver<Array<ResolversTypes['BILLING__BillingDailyData']>, ParentType, ContextType, RequireFields<QueryBILLING__billingDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__userDailyData?: Resolver<Maybe<ResolversTypes['BILLING__UserDailyData']>, ParentType, ContextType, RequireFields<QueryBILLING__userDailyDataArgs, 'id' | 'subgraphError'>>;
  BILLING__userDailyDatas?: Resolver<Array<ResolversTypes['BILLING__UserDailyData']>, ParentType, ContextType, RequireFields<QueryBILLING__userDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__transaction?: Resolver<Maybe<ResolversTypes['BILLING__Transaction']>, ParentType, ContextType, RequireFields<QueryBILLING__transactionArgs, 'id' | 'subgraphError'>>;
  BILLING__transactions?: Resolver<Array<ResolversTypes['BILLING__Transaction']>, ParentType, ContextType, RequireFields<QueryBILLING__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING___meta?: Resolver<Maybe<ResolversTypes['BILLING___Meta_']>, ParentType, ContextType, Partial<QueryBILLING___metaArgs>>;
  ENS__domain?: Resolver<Maybe<ResolversTypes['ENS__Domain']>, ParentType, ContextType, RequireFields<QueryENS__domainArgs, 'id' | 'subgraphError'>>;
  ENS__domains?: Resolver<Array<ResolversTypes['ENS__Domain']>, ParentType, ContextType, RequireFields<QueryENS__domainsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__transfer?: Resolver<Maybe<ResolversTypes['ENS__Transfer']>, ParentType, ContextType, RequireFields<QueryENS__transferArgs, 'id' | 'subgraphError'>>;
  ENS__transfers?: Resolver<Array<ResolversTypes['ENS__Transfer']>, ParentType, ContextType, RequireFields<QueryENS__transfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newOwner?: Resolver<Maybe<ResolversTypes['ENS__NewOwner']>, ParentType, ContextType, RequireFields<QueryENS__newOwnerArgs, 'id' | 'subgraphError'>>;
  ENS__newOwners?: Resolver<Array<ResolversTypes['ENS__NewOwner']>, ParentType, ContextType, RequireFields<QueryENS__newOwnersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newResolver?: Resolver<Maybe<ResolversTypes['ENS__NewResolver']>, ParentType, ContextType, RequireFields<QueryENS__newResolverArgs, 'id' | 'subgraphError'>>;
  ENS__newResolvers?: Resolver<Array<ResolversTypes['ENS__NewResolver']>, ParentType, ContextType, RequireFields<QueryENS__newResolversArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newTTL?: Resolver<Maybe<ResolversTypes['ENS__NewTTL']>, ParentType, ContextType, RequireFields<QueryENS__newTTLArgs, 'id' | 'subgraphError'>>;
  ENS__newTTLs?: Resolver<Array<ResolversTypes['ENS__NewTTL']>, ParentType, ContextType, RequireFields<QueryENS__newTTLsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__account?: Resolver<Maybe<ResolversTypes['ENS__Account']>, ParentType, ContextType, RequireFields<QueryENS__accountArgs, 'id' | 'subgraphError'>>;
  ENS__accounts?: Resolver<Array<ResolversTypes['ENS__Account']>, ParentType, ContextType, RequireFields<QueryENS__accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__registration?: Resolver<Maybe<ResolversTypes['ENS__Registration']>, ParentType, ContextType, RequireFields<QueryENS__registrationArgs, 'id' | 'subgraphError'>>;
  ENS__registrations?: Resolver<Array<ResolversTypes['ENS__Registration']>, ParentType, ContextType, RequireFields<QueryENS__registrationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameRegistered?: Resolver<Maybe<ResolversTypes['ENS__NameRegistered']>, ParentType, ContextType, RequireFields<QueryENS__nameRegisteredArgs, 'id' | 'subgraphError'>>;
  ENS__nameRegistereds?: Resolver<Array<ResolversTypes['ENS__NameRegistered']>, ParentType, ContextType, RequireFields<QueryENS__nameRegisteredsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameRenewed?: Resolver<Maybe<ResolversTypes['ENS__NameRenewed']>, ParentType, ContextType, RequireFields<QueryENS__nameRenewedArgs, 'id' | 'subgraphError'>>;
  ENS__nameReneweds?: Resolver<Array<ResolversTypes['ENS__NameRenewed']>, ParentType, ContextType, RequireFields<QueryENS__nameRenewedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameTransferred?: Resolver<Maybe<ResolversTypes['ENS__NameTransferred']>, ParentType, ContextType, RequireFields<QueryENS__nameTransferredArgs, 'id' | 'subgraphError'>>;
  ENS__nameTransferreds?: Resolver<Array<ResolversTypes['ENS__NameTransferred']>, ParentType, ContextType, RequireFields<QueryENS__nameTransferredsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__resolver?: Resolver<Maybe<ResolversTypes['ENS__Resolver']>, ParentType, ContextType, RequireFields<QueryENS__resolverArgs, 'id' | 'subgraphError'>>;
  ENS__resolvers?: Resolver<Array<ResolversTypes['ENS__Resolver']>, ParentType, ContextType, RequireFields<QueryENS__resolversArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__addrChanged?: Resolver<Maybe<ResolversTypes['ENS__AddrChanged']>, ParentType, ContextType, RequireFields<QueryENS__addrChangedArgs, 'id' | 'subgraphError'>>;
  ENS__addrChangeds?: Resolver<Array<ResolversTypes['ENS__AddrChanged']>, ParentType, ContextType, RequireFields<QueryENS__addrChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__multicoinAddrChanged?: Resolver<Maybe<ResolversTypes['ENS__MulticoinAddrChanged']>, ParentType, ContextType, RequireFields<QueryENS__multicoinAddrChangedArgs, 'id' | 'subgraphError'>>;
  ENS__multicoinAddrChangeds?: Resolver<Array<ResolversTypes['ENS__MulticoinAddrChanged']>, ParentType, ContextType, RequireFields<QueryENS__multicoinAddrChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameChanged?: Resolver<Maybe<ResolversTypes['ENS__NameChanged']>, ParentType, ContextType, RequireFields<QueryENS__nameChangedArgs, 'id' | 'subgraphError'>>;
  ENS__nameChangeds?: Resolver<Array<ResolversTypes['ENS__NameChanged']>, ParentType, ContextType, RequireFields<QueryENS__nameChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__abiChanged?: Resolver<Maybe<ResolversTypes['ENS__AbiChanged']>, ParentType, ContextType, RequireFields<QueryENS__abiChangedArgs, 'id' | 'subgraphError'>>;
  ENS__abiChangeds?: Resolver<Array<ResolversTypes['ENS__AbiChanged']>, ParentType, ContextType, RequireFields<QueryENS__abiChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__pubkeyChanged?: Resolver<Maybe<ResolversTypes['ENS__PubkeyChanged']>, ParentType, ContextType, RequireFields<QueryENS__pubkeyChangedArgs, 'id' | 'subgraphError'>>;
  ENS__pubkeyChangeds?: Resolver<Array<ResolversTypes['ENS__PubkeyChanged']>, ParentType, ContextType, RequireFields<QueryENS__pubkeyChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__textChanged?: Resolver<Maybe<ResolversTypes['ENS__TextChanged']>, ParentType, ContextType, RequireFields<QueryENS__textChangedArgs, 'id' | 'subgraphError'>>;
  ENS__textChangeds?: Resolver<Array<ResolversTypes['ENS__TextChanged']>, ParentType, ContextType, RequireFields<QueryENS__textChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__contenthashChanged?: Resolver<Maybe<ResolversTypes['ENS__ContenthashChanged']>, ParentType, ContextType, RequireFields<QueryENS__contenthashChangedArgs, 'id' | 'subgraphError'>>;
  ENS__contenthashChangeds?: Resolver<Array<ResolversTypes['ENS__ContenthashChanged']>, ParentType, ContextType, RequireFields<QueryENS__contenthashChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__interfaceChanged?: Resolver<Maybe<ResolversTypes['ENS__InterfaceChanged']>, ParentType, ContextType, RequireFields<QueryENS__interfaceChangedArgs, 'id' | 'subgraphError'>>;
  ENS__interfaceChangeds?: Resolver<Array<ResolversTypes['ENS__InterfaceChanged']>, ParentType, ContextType, RequireFields<QueryENS__interfaceChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__authorisationChanged?: Resolver<Maybe<ResolversTypes['ENS__AuthorisationChanged']>, ParentType, ContextType, RequireFields<QueryENS__authorisationChangedArgs, 'id' | 'subgraphError'>>;
  ENS__authorisationChangeds?: Resolver<Array<ResolversTypes['ENS__AuthorisationChanged']>, ParentType, ContextType, RequireFields<QueryENS__authorisationChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__domainEvent?: Resolver<Maybe<ResolversTypes['ENS__DomainEvent']>, ParentType, ContextType, RequireFields<QueryENS__domainEventArgs, 'id' | 'subgraphError'>>;
  ENS__domainEvents?: Resolver<Array<ResolversTypes['ENS__DomainEvent']>, ParentType, ContextType, RequireFields<QueryENS__domainEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__registrationEvent?: Resolver<Maybe<ResolversTypes['ENS__RegistrationEvent']>, ParentType, ContextType, RequireFields<QueryENS__registrationEventArgs, 'id' | 'subgraphError'>>;
  ENS__registrationEvents?: Resolver<Array<ResolversTypes['ENS__RegistrationEvent']>, ParentType, ContextType, RequireFields<QueryENS__registrationEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__resolverEvent?: Resolver<Maybe<ResolversTypes['ENS__ResolverEvent']>, ParentType, ContextType, RequireFields<QueryENS__resolverEventArgs, 'id' | 'subgraphError'>>;
  ENS__resolverEvents?: Resolver<Array<ResolversTypes['ENS__ResolverEvent']>, ParentType, ContextType, RequireFields<QueryENS__resolverEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS___meta?: Resolver<Maybe<ResolversTypes['ENS___Meta_']>, ParentType, ContextType, Partial<QueryENS___metaArgs>>;
  ANALYTICS__graphNetwork?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphNetwork']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphNetworkArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphNetworks?: Resolver<Array<ResolversTypes['ANALYTICS__GraphNetwork']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphNetworksArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphAccount?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphAccount']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphAccountArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphAccounts?: Resolver<Array<ResolversTypes['ANALYTICS__GraphAccount']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphAccountName?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphAccountName']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphAccountNameArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphAccountNames?: Resolver<Array<ResolversTypes['ANALYTICS__GraphAccountName']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphAccountNamesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraph?: Resolver<Maybe<ResolversTypes['ANALYTICS__Subgraph']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphs?: Resolver<Array<ResolversTypes['ANALYTICS__Subgraph']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphVersion?: Resolver<Maybe<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphVersionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphVersions?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphVersionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphDeployment?: Resolver<Maybe<ResolversTypes['ANALYTICS__SubgraphDeployment']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphDeploymentArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphDeployments?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphDeployment']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphDeploymentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexer?: Resolver<Maybe<ResolversTypes['ANALYTICS__Indexer']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexerArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexers?: Resolver<Array<ResolversTypes['ANALYTICS__Indexer']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__allocation?: Resolver<Maybe<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__allocationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__allocations?: Resolver<Array<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__allocationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__pool?: Resolver<Maybe<ResolversTypes['ANALYTICS__Pool']>, ParentType, ContextType, RequireFields<QueryANALYTICS__poolArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__pools?: Resolver<Array<ResolversTypes['ANALYTICS__Pool']>, ParentType, ContextType, RequireFields<QueryANALYTICS__poolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegator?: Resolver<Maybe<ResolversTypes['ANALYTICS__Delegator']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegators?: Resolver<Array<ResolversTypes['ANALYTICS__Delegator']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatedStake?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatedStakeArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatedStakes?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatedStakesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__curator?: Resolver<Maybe<ResolversTypes['ANALYTICS__Curator']>, ParentType, ContextType, RequireFields<QueryANALYTICS__curatorArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__curators?: Resolver<Array<ResolversTypes['ANALYTICS__Curator']>, ParentType, ContextType, RequireFields<QueryANALYTICS__curatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__signal?: Resolver<Maybe<ResolversTypes['ANALYTICS__Signal']>, ParentType, ContextType, RequireFields<QueryANALYTICS__signalArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__signals?: Resolver<Array<ResolversTypes['ANALYTICS__Signal']>, ParentType, ContextType, RequireFields<QueryANALYTICS__signalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__nameSignal?: Resolver<Maybe<ResolversTypes['ANALYTICS__NameSignal']>, ParentType, ContextType, RequireFields<QueryANALYTICS__nameSignalArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__nameSignals?: Resolver<Array<ResolversTypes['ANALYTICS__NameSignal']>, ParentType, ContextType, RequireFields<QueryANALYTICS__nameSignalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__nameSignalTransaction?: Resolver<Maybe<ResolversTypes['ANALYTICS__NameSignalTransaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__nameSignalTransactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__nameSignalTransactions?: Resolver<Array<ResolversTypes['ANALYTICS__NameSignalTransaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__nameSignalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__signalTransaction?: Resolver<Maybe<ResolversTypes['ANALYTICS__SignalTransaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__signalTransactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__signalTransactions?: Resolver<Array<ResolversTypes['ANALYTICS__SignalTransaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__signalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexerDelegatedStakeRelation?: Resolver<Maybe<ResolversTypes['ANALYTICS__IndexerDelegatedStakeRelation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexerDelegatedStakeRelationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexerDelegatedStakeRelations?: Resolver<Array<ResolversTypes['ANALYTICS__IndexerDelegatedStakeRelation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexerDelegatedStakeRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexerDailyData?: Resolver<Maybe<ResolversTypes['ANALYTICS__IndexerDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexerDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexerDailyDatas?: Resolver<Array<ResolversTypes['ANALYTICS__IndexerDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__indexerDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatorDailyData?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatorDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatorDailyDatas?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatorDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatedStakeDailyData?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStakeDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatedStakeDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatedStakeDailyDatas?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatedStakeDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatedStakeDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatorDelegatedStakeDailyRelation?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorDelegatedStakeDailyRelationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatorDelegatedStakeDailyRelations?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorDelegatedStakeDailyRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphDeploymentDailyData?: Resolver<Maybe<ResolversTypes['ANALYTICS__SubgraphDeploymentDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphDeploymentDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphDeploymentDailyDatas?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphDeploymentDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__subgraphDeploymentDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphNetworkDailyData?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphNetworkDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphNetworkDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphNetworkDailyDatas?: Resolver<Array<ResolversTypes['ANALYTICS__GraphNetworkDailyData']>, ParentType, ContextType, RequireFields<QueryANALYTICS__graphNetworkDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__transaction?: Resolver<Maybe<ResolversTypes['ANALYTICS__Transaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__transactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__transactions?: Resolver<Array<ResolversTypes['ANALYTICS__Transaction']>, ParentType, ContextType, RequireFields<QueryANALYTICS__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatorSearch?: Resolver<Array<ResolversTypes['ANALYTICS__Delegator']>, ParentType, ContextType, RequireFields<QueryANALYTICS__delegatorSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  ANALYTICS___meta?: Resolver<Maybe<ResolversTypes['ANALYTICS___Meta_']>, ParentType, ContextType, Partial<QueryANALYTICS___metaArgs>>;
  NETWORK__graphNetwork?: Resolver<Maybe<ResolversTypes['NETWORK__GraphNetwork']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphNetworkArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphNetworks?: Resolver<Array<ResolversTypes['NETWORK__GraphNetwork']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphNetworksArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__graphAccount?: Resolver<Maybe<ResolversTypes['NETWORK__GraphAccount']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphAccountArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphAccounts?: Resolver<Array<ResolversTypes['NETWORK__GraphAccount']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__graphAccountName?: Resolver<Maybe<ResolversTypes['NETWORK__GraphAccountName']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphAccountNameArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphAccountNames?: Resolver<Array<ResolversTypes['NETWORK__GraphAccountName']>, ParentType, ContextType, RequireFields<QueryNETWORK__graphAccountNamesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraph?: Resolver<Maybe<ResolversTypes['NETWORK__Subgraph']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphs?: Resolver<Array<ResolversTypes['NETWORK__Subgraph']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__currentSubgraphDeploymentRelation?: Resolver<Maybe<ResolversTypes['NETWORK__CurrentSubgraphDeploymentRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__currentSubgraphDeploymentRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__currentSubgraphDeploymentRelations?: Resolver<Array<ResolversTypes['NETWORK__CurrentSubgraphDeploymentRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__currentSubgraphDeploymentRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__network?: Resolver<Maybe<ResolversTypes['NETWORK__Network']>, ParentType, ContextType, RequireFields<QueryNETWORK__networkArgs, 'id' | 'subgraphError'>>;
  NETWORK__networks?: Resolver<Array<ResolversTypes['NETWORK__Network']>, ParentType, ContextType, RequireFields<QueryNETWORK__networksArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphCategoryRelation?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphCategoryRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphCategoryRelations?: Resolver<Array<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphCategoryRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphCategory?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphCategory']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphCategoryArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphCategories?: Resolver<Array<ResolversTypes['NETWORK__SubgraphCategory']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphCategoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphVersion?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphVersionArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphVersions?: Resolver<Array<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphVersionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphDeployment?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphDeployment']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphDeploymentArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphDeployments?: Resolver<Array<ResolversTypes['NETWORK__SubgraphDeployment']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphDeploymentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__indexer?: Resolver<Maybe<ResolversTypes['NETWORK__Indexer']>, ParentType, ContextType, RequireFields<QueryNETWORK__indexerArgs, 'id' | 'subgraphError'>>;
  NETWORK__indexers?: Resolver<Array<ResolversTypes['NETWORK__Indexer']>, ParentType, ContextType, RequireFields<QueryNETWORK__indexersArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__allocation?: Resolver<Maybe<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<QueryNETWORK__allocationArgs, 'id' | 'subgraphError'>>;
  NETWORK__allocations?: Resolver<Array<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<QueryNETWORK__allocationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__pool?: Resolver<Maybe<ResolversTypes['NETWORK__Pool']>, ParentType, ContextType, RequireFields<QueryNETWORK__poolArgs, 'id' | 'subgraphError'>>;
  NETWORK__pools?: Resolver<Array<ResolversTypes['NETWORK__Pool']>, ParentType, ContextType, RequireFields<QueryNETWORK__poolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__delegator?: Resolver<Maybe<ResolversTypes['NETWORK__Delegator']>, ParentType, ContextType, RequireFields<QueryNETWORK__delegatorArgs, 'id' | 'subgraphError'>>;
  NETWORK__delegators?: Resolver<Array<ResolversTypes['NETWORK__Delegator']>, ParentType, ContextType, RequireFields<QueryNETWORK__delegatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__delegatedStake?: Resolver<Maybe<ResolversTypes['NETWORK__DelegatedStake']>, ParentType, ContextType, RequireFields<QueryNETWORK__delegatedStakeArgs, 'id' | 'subgraphError'>>;
  NETWORK__delegatedStakes?: Resolver<Array<ResolversTypes['NETWORK__DelegatedStake']>, ParentType, ContextType, RequireFields<QueryNETWORK__delegatedStakesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__curator?: Resolver<Maybe<ResolversTypes['NETWORK__Curator']>, ParentType, ContextType, RequireFields<QueryNETWORK__curatorArgs, 'id' | 'subgraphError'>>;
  NETWORK__curators?: Resolver<Array<ResolversTypes['NETWORK__Curator']>, ParentType, ContextType, RequireFields<QueryNETWORK__curatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__signal?: Resolver<Maybe<ResolversTypes['NETWORK__Signal']>, ParentType, ContextType, RequireFields<QueryNETWORK__signalArgs, 'id' | 'subgraphError'>>;
  NETWORK__signals?: Resolver<Array<ResolversTypes['NETWORK__Signal']>, ParentType, ContextType, RequireFields<QueryNETWORK__signalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignal?: Resolver<Maybe<ResolversTypes['NETWORK__NameSignal']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignals?: Resolver<Array<ResolversTypes['NETWORK__NameSignal']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignalSubgraphRelation?: Resolver<Maybe<ResolversTypes['NETWORK__NameSignalSubgraphRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalSubgraphRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignalSubgraphRelations?: Resolver<Array<ResolversTypes['NETWORK__NameSignalSubgraphRelation']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalSubgraphRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__dispute?: Resolver<Maybe<ResolversTypes['NETWORK__Dispute']>, ParentType, ContextType, RequireFields<QueryNETWORK__disputeArgs, 'id' | 'subgraphError'>>;
  NETWORK__disputes?: Resolver<Array<ResolversTypes['NETWORK__Dispute']>, ParentType, ContextType, RequireFields<QueryNETWORK__disputesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__attestation?: Resolver<Maybe<ResolversTypes['NETWORK__Attestation']>, ParentType, ContextType, RequireFields<QueryNETWORK__attestationArgs, 'id' | 'subgraphError'>>;
  NETWORK__attestations?: Resolver<Array<ResolversTypes['NETWORK__Attestation']>, ParentType, ContextType, RequireFields<QueryNETWORK__attestationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__epoch?: Resolver<Maybe<ResolversTypes['NETWORK__Epoch']>, ParentType, ContextType, RequireFields<QueryNETWORK__epochArgs, 'id' | 'subgraphError'>>;
  NETWORK__epoches?: Resolver<Array<ResolversTypes['NETWORK__Epoch']>, ParentType, ContextType, RequireFields<QueryNETWORK__epochesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignalTransaction?: Resolver<Maybe<ResolversTypes['NETWORK__NameSignalTransaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalTransactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignalTransactions?: Resolver<Array<ResolversTypes['NETWORK__NameSignalTransaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__nameSignalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__signalTransaction?: Resolver<Maybe<ResolversTypes['NETWORK__SignalTransaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__signalTransactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__signalTransactions?: Resolver<Array<ResolversTypes['NETWORK__SignalTransaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__signalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__tokenManager?: Resolver<Maybe<ResolversTypes['NETWORK__TokenManager']>, ParentType, ContextType, RequireFields<QueryNETWORK__tokenManagerArgs, 'id' | 'subgraphError'>>;
  NETWORK__tokenManagers?: Resolver<Array<ResolversTypes['NETWORK__TokenManager']>, ParentType, ContextType, RequireFields<QueryNETWORK__tokenManagersArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__authorizedFunction?: Resolver<Maybe<ResolversTypes['NETWORK__AuthorizedFunction']>, ParentType, ContextType, RequireFields<QueryNETWORK__authorizedFunctionArgs, 'id' | 'subgraphError'>>;
  NETWORK__authorizedFunctions?: Resolver<Array<ResolversTypes['NETWORK__AuthorizedFunction']>, ParentType, ContextType, RequireFields<QueryNETWORK__authorizedFunctionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__tokenLockWallet?: Resolver<Maybe<ResolversTypes['NETWORK__TokenLockWallet']>, ParentType, ContextType, RequireFields<QueryNETWORK__tokenLockWalletArgs, 'id' | 'subgraphError'>>;
  NETWORK__tokenLockWallets?: Resolver<Array<ResolversTypes['NETWORK__TokenLockWallet']>, ParentType, ContextType, RequireFields<QueryNETWORK__tokenLockWalletsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__transaction?: Resolver<Maybe<ResolversTypes['NETWORK__Transaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__transactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__transactions?: Resolver<Array<ResolversTypes['NETWORK__Transaction']>, ParentType, ContextType, RequireFields<QueryNETWORK__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphSearch?: Resolver<Array<ResolversTypes['NETWORK__Subgraph']>, ParentType, ContextType, RequireFields<QueryNETWORK__subgraphSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  NETWORK__curatorSearch?: Resolver<Array<ResolversTypes['NETWORK__Curator']>, ParentType, ContextType, RequireFields<QueryNETWORK__curatorSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  NETWORK__delegatorSearch?: Resolver<Array<ResolversTypes['NETWORK__Delegator']>, ParentType, ContextType, RequireFields<QueryNETWORK__delegatorSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  NETWORK___meta?: Resolver<Maybe<ResolversTypes['NETWORK___Meta_']>, ParentType, ContextType, Partial<QueryNETWORK___metaArgs>>;
}>;

export type SubscriptionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  BILLING__billing?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__Billing']>, "BILLING__billing", ParentType, ContextType, RequireFields<SubscriptionBILLING__billingArgs, 'id' | 'subgraphError'>>;
  BILLING__billings?: SubscriptionResolver<Array<ResolversTypes['BILLING__Billing']>, "BILLING__billings", ParentType, ContextType, RequireFields<SubscriptionBILLING__billingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__user?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__User']>, "BILLING__user", ParentType, ContextType, RequireFields<SubscriptionBILLING__userArgs, 'id' | 'subgraphError'>>;
  BILLING__users?: SubscriptionResolver<Array<ResolversTypes['BILLING__User']>, "BILLING__users", ParentType, ContextType, RequireFields<SubscriptionBILLING__usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensAdded?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__TokensAdded']>, "BILLING__tokensAdded", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensAddedArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensAddeds?: SubscriptionResolver<Array<ResolversTypes['BILLING__TokensAdded']>, "BILLING__tokensAddeds", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensAddedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensRemoved?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__TokensRemoved']>, "BILLING__tokensRemoved", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensRemovedArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensRemoveds?: SubscriptionResolver<Array<ResolversTypes['BILLING__TokensRemoved']>, "BILLING__tokensRemoveds", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensRemovedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__tokensPulled?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__TokensPulled']>, "BILLING__tokensPulled", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensPulledArgs, 'id' | 'subgraphError'>>;
  BILLING__tokensPulleds?: SubscriptionResolver<Array<ResolversTypes['BILLING__TokensPulled']>, "BILLING__tokensPulleds", ParentType, ContextType, RequireFields<SubscriptionBILLING__tokensPulledsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__billingDailyData?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__BillingDailyData']>, "BILLING__billingDailyData", ParentType, ContextType, RequireFields<SubscriptionBILLING__billingDailyDataArgs, 'id' | 'subgraphError'>>;
  BILLING__billingDailyDatas?: SubscriptionResolver<Array<ResolversTypes['BILLING__BillingDailyData']>, "BILLING__billingDailyDatas", ParentType, ContextType, RequireFields<SubscriptionBILLING__billingDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__userDailyData?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__UserDailyData']>, "BILLING__userDailyData", ParentType, ContextType, RequireFields<SubscriptionBILLING__userDailyDataArgs, 'id' | 'subgraphError'>>;
  BILLING__userDailyDatas?: SubscriptionResolver<Array<ResolversTypes['BILLING__UserDailyData']>, "BILLING__userDailyDatas", ParentType, ContextType, RequireFields<SubscriptionBILLING__userDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING__transaction?: SubscriptionResolver<Maybe<ResolversTypes['BILLING__Transaction']>, "BILLING__transaction", ParentType, ContextType, RequireFields<SubscriptionBILLING__transactionArgs, 'id' | 'subgraphError'>>;
  BILLING__transactions?: SubscriptionResolver<Array<ResolversTypes['BILLING__Transaction']>, "BILLING__transactions", ParentType, ContextType, RequireFields<SubscriptionBILLING__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BILLING___meta?: SubscriptionResolver<Maybe<ResolversTypes['BILLING___Meta_']>, "BILLING___meta", ParentType, ContextType, Partial<SubscriptionBILLING___metaArgs>>;
  ENS__domain?: SubscriptionResolver<Maybe<ResolversTypes['ENS__Domain']>, "ENS__domain", ParentType, ContextType, RequireFields<SubscriptionENS__domainArgs, 'id' | 'subgraphError'>>;
  ENS__domains?: SubscriptionResolver<Array<ResolversTypes['ENS__Domain']>, "ENS__domains", ParentType, ContextType, RequireFields<SubscriptionENS__domainsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__transfer?: SubscriptionResolver<Maybe<ResolversTypes['ENS__Transfer']>, "ENS__transfer", ParentType, ContextType, RequireFields<SubscriptionENS__transferArgs, 'id' | 'subgraphError'>>;
  ENS__transfers?: SubscriptionResolver<Array<ResolversTypes['ENS__Transfer']>, "ENS__transfers", ParentType, ContextType, RequireFields<SubscriptionENS__transfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newOwner?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NewOwner']>, "ENS__newOwner", ParentType, ContextType, RequireFields<SubscriptionENS__newOwnerArgs, 'id' | 'subgraphError'>>;
  ENS__newOwners?: SubscriptionResolver<Array<ResolversTypes['ENS__NewOwner']>, "ENS__newOwners", ParentType, ContextType, RequireFields<SubscriptionENS__newOwnersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newResolver?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NewResolver']>, "ENS__newResolver", ParentType, ContextType, RequireFields<SubscriptionENS__newResolverArgs, 'id' | 'subgraphError'>>;
  ENS__newResolvers?: SubscriptionResolver<Array<ResolversTypes['ENS__NewResolver']>, "ENS__newResolvers", ParentType, ContextType, RequireFields<SubscriptionENS__newResolversArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__newTTL?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NewTTL']>, "ENS__newTTL", ParentType, ContextType, RequireFields<SubscriptionENS__newTTLArgs, 'id' | 'subgraphError'>>;
  ENS__newTTLs?: SubscriptionResolver<Array<ResolversTypes['ENS__NewTTL']>, "ENS__newTTLs", ParentType, ContextType, RequireFields<SubscriptionENS__newTTLsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__account?: SubscriptionResolver<Maybe<ResolversTypes['ENS__Account']>, "ENS__account", ParentType, ContextType, RequireFields<SubscriptionENS__accountArgs, 'id' | 'subgraphError'>>;
  ENS__accounts?: SubscriptionResolver<Array<ResolversTypes['ENS__Account']>, "ENS__accounts", ParentType, ContextType, RequireFields<SubscriptionENS__accountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__registration?: SubscriptionResolver<Maybe<ResolversTypes['ENS__Registration']>, "ENS__registration", ParentType, ContextType, RequireFields<SubscriptionENS__registrationArgs, 'id' | 'subgraphError'>>;
  ENS__registrations?: SubscriptionResolver<Array<ResolversTypes['ENS__Registration']>, "ENS__registrations", ParentType, ContextType, RequireFields<SubscriptionENS__registrationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameRegistered?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NameRegistered']>, "ENS__nameRegistered", ParentType, ContextType, RequireFields<SubscriptionENS__nameRegisteredArgs, 'id' | 'subgraphError'>>;
  ENS__nameRegistereds?: SubscriptionResolver<Array<ResolversTypes['ENS__NameRegistered']>, "ENS__nameRegistereds", ParentType, ContextType, RequireFields<SubscriptionENS__nameRegisteredsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameRenewed?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NameRenewed']>, "ENS__nameRenewed", ParentType, ContextType, RequireFields<SubscriptionENS__nameRenewedArgs, 'id' | 'subgraphError'>>;
  ENS__nameReneweds?: SubscriptionResolver<Array<ResolversTypes['ENS__NameRenewed']>, "ENS__nameReneweds", ParentType, ContextType, RequireFields<SubscriptionENS__nameRenewedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameTransferred?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NameTransferred']>, "ENS__nameTransferred", ParentType, ContextType, RequireFields<SubscriptionENS__nameTransferredArgs, 'id' | 'subgraphError'>>;
  ENS__nameTransferreds?: SubscriptionResolver<Array<ResolversTypes['ENS__NameTransferred']>, "ENS__nameTransferreds", ParentType, ContextType, RequireFields<SubscriptionENS__nameTransferredsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__resolver?: SubscriptionResolver<Maybe<ResolversTypes['ENS__Resolver']>, "ENS__resolver", ParentType, ContextType, RequireFields<SubscriptionENS__resolverArgs, 'id' | 'subgraphError'>>;
  ENS__resolvers?: SubscriptionResolver<Array<ResolversTypes['ENS__Resolver']>, "ENS__resolvers", ParentType, ContextType, RequireFields<SubscriptionENS__resolversArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__addrChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__AddrChanged']>, "ENS__addrChanged", ParentType, ContextType, RequireFields<SubscriptionENS__addrChangedArgs, 'id' | 'subgraphError'>>;
  ENS__addrChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__AddrChanged']>, "ENS__addrChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__addrChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__multicoinAddrChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__MulticoinAddrChanged']>, "ENS__multicoinAddrChanged", ParentType, ContextType, RequireFields<SubscriptionENS__multicoinAddrChangedArgs, 'id' | 'subgraphError'>>;
  ENS__multicoinAddrChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__MulticoinAddrChanged']>, "ENS__multicoinAddrChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__multicoinAddrChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__nameChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__NameChanged']>, "ENS__nameChanged", ParentType, ContextType, RequireFields<SubscriptionENS__nameChangedArgs, 'id' | 'subgraphError'>>;
  ENS__nameChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__NameChanged']>, "ENS__nameChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__nameChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__abiChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__AbiChanged']>, "ENS__abiChanged", ParentType, ContextType, RequireFields<SubscriptionENS__abiChangedArgs, 'id' | 'subgraphError'>>;
  ENS__abiChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__AbiChanged']>, "ENS__abiChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__abiChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__pubkeyChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__PubkeyChanged']>, "ENS__pubkeyChanged", ParentType, ContextType, RequireFields<SubscriptionENS__pubkeyChangedArgs, 'id' | 'subgraphError'>>;
  ENS__pubkeyChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__PubkeyChanged']>, "ENS__pubkeyChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__pubkeyChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__textChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__TextChanged']>, "ENS__textChanged", ParentType, ContextType, RequireFields<SubscriptionENS__textChangedArgs, 'id' | 'subgraphError'>>;
  ENS__textChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__TextChanged']>, "ENS__textChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__textChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__contenthashChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__ContenthashChanged']>, "ENS__contenthashChanged", ParentType, ContextType, RequireFields<SubscriptionENS__contenthashChangedArgs, 'id' | 'subgraphError'>>;
  ENS__contenthashChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__ContenthashChanged']>, "ENS__contenthashChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__contenthashChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__interfaceChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__InterfaceChanged']>, "ENS__interfaceChanged", ParentType, ContextType, RequireFields<SubscriptionENS__interfaceChangedArgs, 'id' | 'subgraphError'>>;
  ENS__interfaceChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__InterfaceChanged']>, "ENS__interfaceChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__interfaceChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__authorisationChanged?: SubscriptionResolver<Maybe<ResolversTypes['ENS__AuthorisationChanged']>, "ENS__authorisationChanged", ParentType, ContextType, RequireFields<SubscriptionENS__authorisationChangedArgs, 'id' | 'subgraphError'>>;
  ENS__authorisationChangeds?: SubscriptionResolver<Array<ResolversTypes['ENS__AuthorisationChanged']>, "ENS__authorisationChangeds", ParentType, ContextType, RequireFields<SubscriptionENS__authorisationChangedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__domainEvent?: SubscriptionResolver<Maybe<ResolversTypes['ENS__DomainEvent']>, "ENS__domainEvent", ParentType, ContextType, RequireFields<SubscriptionENS__domainEventArgs, 'id' | 'subgraphError'>>;
  ENS__domainEvents?: SubscriptionResolver<Array<ResolversTypes['ENS__DomainEvent']>, "ENS__domainEvents", ParentType, ContextType, RequireFields<SubscriptionENS__domainEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__registrationEvent?: SubscriptionResolver<Maybe<ResolversTypes['ENS__RegistrationEvent']>, "ENS__registrationEvent", ParentType, ContextType, RequireFields<SubscriptionENS__registrationEventArgs, 'id' | 'subgraphError'>>;
  ENS__registrationEvents?: SubscriptionResolver<Array<ResolversTypes['ENS__RegistrationEvent']>, "ENS__registrationEvents", ParentType, ContextType, RequireFields<SubscriptionENS__registrationEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS__resolverEvent?: SubscriptionResolver<Maybe<ResolversTypes['ENS__ResolverEvent']>, "ENS__resolverEvent", ParentType, ContextType, RequireFields<SubscriptionENS__resolverEventArgs, 'id' | 'subgraphError'>>;
  ENS__resolverEvents?: SubscriptionResolver<Array<ResolversTypes['ENS__ResolverEvent']>, "ENS__resolverEvents", ParentType, ContextType, RequireFields<SubscriptionENS__resolverEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ENS___meta?: SubscriptionResolver<Maybe<ResolversTypes['ENS___Meta_']>, "ENS___meta", ParentType, ContextType, Partial<SubscriptionENS___metaArgs>>;
  ANALYTICS__graphNetwork?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__GraphNetwork']>, "ANALYTICS__graphNetwork", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphNetworkArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphNetworks?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__GraphNetwork']>, "ANALYTICS__graphNetworks", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphNetworksArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphAccount?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__GraphAccount']>, "ANALYTICS__graphAccount", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphAccountArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphAccounts?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__GraphAccount']>, "ANALYTICS__graphAccounts", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphAccountName?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__GraphAccountName']>, "ANALYTICS__graphAccountName", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphAccountNameArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphAccountNames?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__GraphAccountName']>, "ANALYTICS__graphAccountNames", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphAccountNamesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraph?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Subgraph']>, "ANALYTICS__subgraph", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphs?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Subgraph']>, "ANALYTICS__subgraphs", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphVersion?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__SubgraphVersion']>, "ANALYTICS__subgraphVersion", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphVersionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphVersions?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__SubgraphVersion']>, "ANALYTICS__subgraphVersions", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphVersionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphDeployment?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__SubgraphDeployment']>, "ANALYTICS__subgraphDeployment", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphDeploymentArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphDeployments?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__SubgraphDeployment']>, "ANALYTICS__subgraphDeployments", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphDeploymentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexer?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Indexer']>, "ANALYTICS__indexer", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexerArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexers?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Indexer']>, "ANALYTICS__indexers", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__allocation?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Allocation']>, "ANALYTICS__allocation", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__allocationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__allocations?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Allocation']>, "ANALYTICS__allocations", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__allocationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__pool?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Pool']>, "ANALYTICS__pool", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__poolArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__pools?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Pool']>, "ANALYTICS__pools", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__poolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegator?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Delegator']>, "ANALYTICS__delegator", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegators?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Delegator']>, "ANALYTICS__delegators", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatedStake?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStake']>, "ANALYTICS__delegatedStake", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatedStakeArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatedStakes?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__DelegatedStake']>, "ANALYTICS__delegatedStakes", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatedStakesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__curator?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Curator']>, "ANALYTICS__curator", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__curatorArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__curators?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Curator']>, "ANALYTICS__curators", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__curatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__signal?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Signal']>, "ANALYTICS__signal", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__signalArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__signals?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Signal']>, "ANALYTICS__signals", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__signalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__nameSignal?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__NameSignal']>, "ANALYTICS__nameSignal", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__nameSignalArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__nameSignals?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__NameSignal']>, "ANALYTICS__nameSignals", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__nameSignalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__nameSignalTransaction?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__NameSignalTransaction']>, "ANALYTICS__nameSignalTransaction", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__nameSignalTransactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__nameSignalTransactions?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__NameSignalTransaction']>, "ANALYTICS__nameSignalTransactions", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__nameSignalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__signalTransaction?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__SignalTransaction']>, "ANALYTICS__signalTransaction", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__signalTransactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__signalTransactions?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__SignalTransaction']>, "ANALYTICS__signalTransactions", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__signalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexerDelegatedStakeRelation?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__IndexerDelegatedStakeRelation']>, "ANALYTICS__indexerDelegatedStakeRelation", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexerDelegatedStakeRelationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexerDelegatedStakeRelations?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__IndexerDelegatedStakeRelation']>, "ANALYTICS__indexerDelegatedStakeRelations", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexerDelegatedStakeRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__indexerDailyData?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__IndexerDailyData']>, "ANALYTICS__indexerDailyData", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexerDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__indexerDailyDatas?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__IndexerDailyData']>, "ANALYTICS__indexerDailyDatas", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__indexerDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatorDailyData?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__DelegatorDailyData']>, "ANALYTICS__delegatorDailyData", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatorDailyDatas?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__DelegatorDailyData']>, "ANALYTICS__delegatorDailyDatas", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatedStakeDailyData?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStakeDailyData']>, "ANALYTICS__delegatedStakeDailyData", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatedStakeDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatedStakeDailyDatas?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__DelegatedStakeDailyData']>, "ANALYTICS__delegatedStakeDailyDatas", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatedStakeDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__delegatorDelegatedStakeDailyRelation?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation']>, "ANALYTICS__delegatorDelegatedStakeDailyRelation", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorDelegatedStakeDailyRelationArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__delegatorDelegatedStakeDailyRelations?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation']>, "ANALYTICS__delegatorDelegatedStakeDailyRelations", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__delegatorDelegatedStakeDailyRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__subgraphDeploymentDailyData?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__SubgraphDeploymentDailyData']>, "ANALYTICS__subgraphDeploymentDailyData", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphDeploymentDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__subgraphDeploymentDailyDatas?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__SubgraphDeploymentDailyData']>, "ANALYTICS__subgraphDeploymentDailyDatas", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__subgraphDeploymentDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__graphNetworkDailyData?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__GraphNetworkDailyData']>, "ANALYTICS__graphNetworkDailyData", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphNetworkDailyDataArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__graphNetworkDailyDatas?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__GraphNetworkDailyData']>, "ANALYTICS__graphNetworkDailyDatas", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__graphNetworkDailyDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS__transaction?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS__Transaction']>, "ANALYTICS__transaction", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__transactionArgs, 'id' | 'subgraphError'>>;
  ANALYTICS__transactions?: SubscriptionResolver<Array<ResolversTypes['ANALYTICS__Transaction']>, "ANALYTICS__transactions", ParentType, ContextType, RequireFields<SubscriptionANALYTICS__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ANALYTICS___meta?: SubscriptionResolver<Maybe<ResolversTypes['ANALYTICS___Meta_']>, "ANALYTICS___meta", ParentType, ContextType, Partial<SubscriptionANALYTICS___metaArgs>>;
  NETWORK__graphNetwork?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__GraphNetwork']>, "NETWORK__graphNetwork", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphNetworkArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphNetworks?: SubscriptionResolver<Array<ResolversTypes['NETWORK__GraphNetwork']>, "NETWORK__graphNetworks", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphNetworksArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__graphAccount?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__GraphAccount']>, "NETWORK__graphAccount", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphAccountArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphAccounts?: SubscriptionResolver<Array<ResolversTypes['NETWORK__GraphAccount']>, "NETWORK__graphAccounts", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__graphAccountName?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__GraphAccountName']>, "NETWORK__graphAccountName", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphAccountNameArgs, 'id' | 'subgraphError'>>;
  NETWORK__graphAccountNames?: SubscriptionResolver<Array<ResolversTypes['NETWORK__GraphAccountName']>, "NETWORK__graphAccountNames", ParentType, ContextType, RequireFields<SubscriptionNETWORK__graphAccountNamesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraph?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Subgraph']>, "NETWORK__subgraph", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphs?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Subgraph']>, "NETWORK__subgraphs", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__currentSubgraphDeploymentRelation?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__CurrentSubgraphDeploymentRelation']>, "NETWORK__currentSubgraphDeploymentRelation", ParentType, ContextType, RequireFields<SubscriptionNETWORK__currentSubgraphDeploymentRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__currentSubgraphDeploymentRelations?: SubscriptionResolver<Array<ResolversTypes['NETWORK__CurrentSubgraphDeploymentRelation']>, "NETWORK__currentSubgraphDeploymentRelations", ParentType, ContextType, RequireFields<SubscriptionNETWORK__currentSubgraphDeploymentRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__network?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Network']>, "NETWORK__network", ParentType, ContextType, RequireFields<SubscriptionNETWORK__networkArgs, 'id' | 'subgraphError'>>;
  NETWORK__networks?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Network']>, "NETWORK__networks", ParentType, ContextType, RequireFields<SubscriptionNETWORK__networksArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphCategoryRelation?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, "NETWORK__subgraphCategoryRelation", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphCategoryRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphCategoryRelations?: SubscriptionResolver<Array<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, "NETWORK__subgraphCategoryRelations", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphCategoryRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphCategory?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__SubgraphCategory']>, "NETWORK__subgraphCategory", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphCategoryArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphCategories?: SubscriptionResolver<Array<ResolversTypes['NETWORK__SubgraphCategory']>, "NETWORK__subgraphCategories", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphCategoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphVersion?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__SubgraphVersion']>, "NETWORK__subgraphVersion", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphVersionArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphVersions?: SubscriptionResolver<Array<ResolversTypes['NETWORK__SubgraphVersion']>, "NETWORK__subgraphVersions", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphVersionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__subgraphDeployment?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__SubgraphDeployment']>, "NETWORK__subgraphDeployment", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphDeploymentArgs, 'id' | 'subgraphError'>>;
  NETWORK__subgraphDeployments?: SubscriptionResolver<Array<ResolversTypes['NETWORK__SubgraphDeployment']>, "NETWORK__subgraphDeployments", ParentType, ContextType, RequireFields<SubscriptionNETWORK__subgraphDeploymentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__indexer?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Indexer']>, "NETWORK__indexer", ParentType, ContextType, RequireFields<SubscriptionNETWORK__indexerArgs, 'id' | 'subgraphError'>>;
  NETWORK__indexers?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Indexer']>, "NETWORK__indexers", ParentType, ContextType, RequireFields<SubscriptionNETWORK__indexersArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__allocation?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Allocation']>, "NETWORK__allocation", ParentType, ContextType, RequireFields<SubscriptionNETWORK__allocationArgs, 'id' | 'subgraphError'>>;
  NETWORK__allocations?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Allocation']>, "NETWORK__allocations", ParentType, ContextType, RequireFields<SubscriptionNETWORK__allocationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__pool?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Pool']>, "NETWORK__pool", ParentType, ContextType, RequireFields<SubscriptionNETWORK__poolArgs, 'id' | 'subgraphError'>>;
  NETWORK__pools?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Pool']>, "NETWORK__pools", ParentType, ContextType, RequireFields<SubscriptionNETWORK__poolsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__delegator?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Delegator']>, "NETWORK__delegator", ParentType, ContextType, RequireFields<SubscriptionNETWORK__delegatorArgs, 'id' | 'subgraphError'>>;
  NETWORK__delegators?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Delegator']>, "NETWORK__delegators", ParentType, ContextType, RequireFields<SubscriptionNETWORK__delegatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__delegatedStake?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__DelegatedStake']>, "NETWORK__delegatedStake", ParentType, ContextType, RequireFields<SubscriptionNETWORK__delegatedStakeArgs, 'id' | 'subgraphError'>>;
  NETWORK__delegatedStakes?: SubscriptionResolver<Array<ResolversTypes['NETWORK__DelegatedStake']>, "NETWORK__delegatedStakes", ParentType, ContextType, RequireFields<SubscriptionNETWORK__delegatedStakesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__curator?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Curator']>, "NETWORK__curator", ParentType, ContextType, RequireFields<SubscriptionNETWORK__curatorArgs, 'id' | 'subgraphError'>>;
  NETWORK__curators?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Curator']>, "NETWORK__curators", ParentType, ContextType, RequireFields<SubscriptionNETWORK__curatorsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__signal?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Signal']>, "NETWORK__signal", ParentType, ContextType, RequireFields<SubscriptionNETWORK__signalArgs, 'id' | 'subgraphError'>>;
  NETWORK__signals?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Signal']>, "NETWORK__signals", ParentType, ContextType, RequireFields<SubscriptionNETWORK__signalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignal?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__NameSignal']>, "NETWORK__nameSignal", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignals?: SubscriptionResolver<Array<ResolversTypes['NETWORK__NameSignal']>, "NETWORK__nameSignals", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignalSubgraphRelation?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__NameSignalSubgraphRelation']>, "NETWORK__nameSignalSubgraphRelation", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalSubgraphRelationArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignalSubgraphRelations?: SubscriptionResolver<Array<ResolversTypes['NETWORK__NameSignalSubgraphRelation']>, "NETWORK__nameSignalSubgraphRelations", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalSubgraphRelationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__dispute?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Dispute']>, "NETWORK__dispute", ParentType, ContextType, RequireFields<SubscriptionNETWORK__disputeArgs, 'id' | 'subgraphError'>>;
  NETWORK__disputes?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Dispute']>, "NETWORK__disputes", ParentType, ContextType, RequireFields<SubscriptionNETWORK__disputesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__attestation?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Attestation']>, "NETWORK__attestation", ParentType, ContextType, RequireFields<SubscriptionNETWORK__attestationArgs, 'id' | 'subgraphError'>>;
  NETWORK__attestations?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Attestation']>, "NETWORK__attestations", ParentType, ContextType, RequireFields<SubscriptionNETWORK__attestationsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__epoch?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Epoch']>, "NETWORK__epoch", ParentType, ContextType, RequireFields<SubscriptionNETWORK__epochArgs, 'id' | 'subgraphError'>>;
  NETWORK__epoches?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Epoch']>, "NETWORK__epoches", ParentType, ContextType, RequireFields<SubscriptionNETWORK__epochesArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__nameSignalTransaction?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__NameSignalTransaction']>, "NETWORK__nameSignalTransaction", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalTransactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__nameSignalTransactions?: SubscriptionResolver<Array<ResolversTypes['NETWORK__NameSignalTransaction']>, "NETWORK__nameSignalTransactions", ParentType, ContextType, RequireFields<SubscriptionNETWORK__nameSignalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__signalTransaction?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__SignalTransaction']>, "NETWORK__signalTransaction", ParentType, ContextType, RequireFields<SubscriptionNETWORK__signalTransactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__signalTransactions?: SubscriptionResolver<Array<ResolversTypes['NETWORK__SignalTransaction']>, "NETWORK__signalTransactions", ParentType, ContextType, RequireFields<SubscriptionNETWORK__signalTransactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__tokenManager?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__TokenManager']>, "NETWORK__tokenManager", ParentType, ContextType, RequireFields<SubscriptionNETWORK__tokenManagerArgs, 'id' | 'subgraphError'>>;
  NETWORK__tokenManagers?: SubscriptionResolver<Array<ResolversTypes['NETWORK__TokenManager']>, "NETWORK__tokenManagers", ParentType, ContextType, RequireFields<SubscriptionNETWORK__tokenManagersArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__authorizedFunction?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__AuthorizedFunction']>, "NETWORK__authorizedFunction", ParentType, ContextType, RequireFields<SubscriptionNETWORK__authorizedFunctionArgs, 'id' | 'subgraphError'>>;
  NETWORK__authorizedFunctions?: SubscriptionResolver<Array<ResolversTypes['NETWORK__AuthorizedFunction']>, "NETWORK__authorizedFunctions", ParentType, ContextType, RequireFields<SubscriptionNETWORK__authorizedFunctionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__tokenLockWallet?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__TokenLockWallet']>, "NETWORK__tokenLockWallet", ParentType, ContextType, RequireFields<SubscriptionNETWORK__tokenLockWalletArgs, 'id' | 'subgraphError'>>;
  NETWORK__tokenLockWallets?: SubscriptionResolver<Array<ResolversTypes['NETWORK__TokenLockWallet']>, "NETWORK__tokenLockWallets", ParentType, ContextType, RequireFields<SubscriptionNETWORK__tokenLockWalletsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK__transaction?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK__Transaction']>, "NETWORK__transaction", ParentType, ContextType, RequireFields<SubscriptionNETWORK__transactionArgs, 'id' | 'subgraphError'>>;
  NETWORK__transactions?: SubscriptionResolver<Array<ResolversTypes['NETWORK__Transaction']>, "NETWORK__transactions", ParentType, ContextType, RequireFields<SubscriptionNETWORK__transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  NETWORK___meta?: SubscriptionResolver<Maybe<ResolversTypes['NETWORK___Meta_']>, "NETWORK___meta", ParentType, ContextType, Partial<SubscriptionNETWORK___metaArgs>>;
}>;

export interface BILLING__BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BILLING__BigDecimal'], any> {
  name: 'BILLING__BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export type BILLING__BillingResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__Billing'] = ResolversParentTypes['BILLING__Billing']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  gateway?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  governor?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  totalTokensAdded?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemoved?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCurrentBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  currentDailyDataEntity?: Resolver<Maybe<ResolversTypes['BILLING__BillingDailyData']>, ParentType, ContextType>;
  previousDailyDataEntity?: Resolver<Maybe<ResolversTypes['BILLING__BillingDailyData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING__BillingDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__BillingDailyData'] = ResolversParentTypes['BILLING__BillingDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  entity?: Resolver<ResolversTypes['BILLING__Billing'], ParentType, ContextType>;
  totalTokensAdded?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemoved?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCurrentBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  gateway?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  governor?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  totalTokensAddedDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulledDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemovedDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCurrentBalanceDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface BILLING__BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BILLING__Bytes'], any> {
  name: 'BILLING__Bytes';
}

export type BILLING__TokensAddedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__TokensAdded'] = ResolversParentTypes['BILLING__TokensAdded']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BILLING__User'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['BILLING__TransactionType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING__TokensPulledResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__TokensPulled'] = ResolversParentTypes['BILLING__TokensPulled']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BILLING__User'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['BILLING__TransactionType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING__TokensRemovedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__TokensRemoved'] = ResolversParentTypes['BILLING__TokensRemoved']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BILLING__User'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['BILLING__TransactionType'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING__TransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__Transaction'] = ResolversParentTypes['BILLING__Transaction']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BILLING__TokensAdded' | 'BILLING__TokensPulled' | 'BILLING__TokensRemoved', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['BILLING__Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BILLING__User'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['BILLING__TransactionType'], ParentType, ContextType>;
}>;

export type BILLING__UserResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__User'] = ResolversParentTypes['BILLING__User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  billingBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensAdded?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemoved?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transactions?: Resolver<Array<ResolversTypes['BILLING__Transaction']>, ParentType, ContextType, RequireFields<BILLING__UsertransactionsArgs, 'skip' | 'first'>>;
  currentDailyDataEntity?: Resolver<Maybe<ResolversTypes['BILLING__UserDailyData']>, ParentType, ContextType>;
  previousDailyDataEntity?: Resolver<Maybe<ResolversTypes['BILLING__UserDailyData']>, ParentType, ContextType>;
  polygonGRTBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING__UserDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING__UserDailyData'] = ResolversParentTypes['BILLING__UserDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  entity?: Resolver<ResolversTypes['BILLING__User'], ParentType, ContextType>;
  totalTokensAdded?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemoved?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  billingBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensAddedDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensPulledDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensRemovedDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  billingBalanceDelta?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING___Block_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING___Block_'] = ResolversParentTypes['BILLING___Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['BILLING__Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BILLING___Meta_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['BILLING___Meta_'] = ResolversParentTypes['BILLING___Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['BILLING___Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__AbiChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__AbiChanged'] = ResolversParentTypes['ENS__AbiChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  contentType?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__AccountResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__Account'] = ResolversParentTypes['ENS__Account']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domains?: Resolver<Array<ResolversTypes['ENS__Domain']>, ParentType, ContextType, RequireFields<ENS__AccountdomainsArgs, 'skip' | 'first'>>;
  registrations?: Resolver<Maybe<Array<ResolversTypes['ENS__Registration']>>, ParentType, ContextType, RequireFields<ENS__AccountregistrationsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__AddrChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__AddrChanged'] = ResolversParentTypes['ENS__AddrChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  addr?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__AuthorisationChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__AuthorisationChanged'] = ResolversParentTypes['ENS__AuthorisationChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  target?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  isAuthorized?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ENS__BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ENS__BigDecimal'], any> {
  name: 'ENS__BigDecimal';
}

export interface ENS__BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ENS__Bytes'], any> {
  name: 'ENS__Bytes';
}

export type ENS__ContenthashChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__ContenthashChanged'] = ResolversParentTypes['ENS__ContenthashChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  hash?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__DomainResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__Domain'] = ResolversParentTypes['ENS__Domain']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  labelName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  labelhash?: Resolver<Maybe<ResolversTypes['ENS__Bytes']>, ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['ENS__Domain']>, ParentType, ContextType>;
  subdomains?: Resolver<Array<ResolversTypes['ENS__Domain']>, ParentType, ContextType, RequireFields<ENS__DomainsubdomainsArgs, 'skip' | 'first'>>;
  subdomainCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  resolvedAddress?: Resolver<Maybe<ResolversTypes['ENS__Account']>, ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  resolver?: Resolver<Maybe<ResolversTypes['ENS__Resolver']>, ParentType, ContextType>;
  ttl?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  isMigrated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Array<ResolversTypes['ENS__DomainEvent']>, ParentType, ContextType, RequireFields<ENS__DomaineventsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__DomainEventResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__DomainEvent'] = ResolversParentTypes['ENS__DomainEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ENS__NewOwner' | 'ENS__NewResolver' | 'ENS__NewTTL' | 'ENS__Transfer', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
}>;

export type ENS__InterfaceChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__InterfaceChanged'] = ResolversParentTypes['ENS__InterfaceChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  interfaceID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  implementer?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__MulticoinAddrChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__MulticoinAddrChanged'] = ResolversParentTypes['ENS__MulticoinAddrChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  coinType?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  addr?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NameChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NameChanged'] = ResolversParentTypes['ENS__NameChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NameRegisteredResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NameRegistered'] = ResolversParentTypes['ENS__NameRegistered']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  registration?: Resolver<ResolversTypes['ENS__Registration'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  registrant?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  expiryDate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NameRenewedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NameRenewed'] = ResolversParentTypes['ENS__NameRenewed']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  registration?: Resolver<ResolversTypes['ENS__Registration'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  expiryDate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NameTransferredResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NameTransferred'] = ResolversParentTypes['ENS__NameTransferred']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  registration?: Resolver<ResolversTypes['ENS__Registration'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  newOwner?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NewOwnerResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NewOwner'] = ResolversParentTypes['ENS__NewOwner']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  parentDomain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NewResolverResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NewResolver'] = ResolversParentTypes['ENS__NewResolver']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__NewTTLResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__NewTTL'] = ResolversParentTypes['ENS__NewTTL']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  ttl?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__PubkeyChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__PubkeyChanged'] = ResolversParentTypes['ENS__PubkeyChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  x?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  y?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__RegistrationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__Registration'] = ResolversParentTypes['ENS__Registration']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['ENS__Domain']>, ParentType, ContextType>;
  registrationDate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  expiryDate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  cost?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  registrant?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  labelName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  events?: Resolver<Array<ResolversTypes['ENS__RegistrationEvent']>, ParentType, ContextType, RequireFields<ENS__RegistrationeventsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__RegistrationEventResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__RegistrationEvent'] = ResolversParentTypes['ENS__RegistrationEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ENS__NameRegistered' | 'ENS__NameRenewed' | 'ENS__NameTransferred', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  registration?: Resolver<ResolversTypes['ENS__Registration'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
}>;

export type ENS__ResolverResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__Resolver'] = ResolversParentTypes['ENS__Resolver']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['ENS__Domain']>, ParentType, ContextType>;
  address?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  addr?: Resolver<Maybe<ResolversTypes['ENS__Account']>, ParentType, ContextType>;
  contentHash?: Resolver<Maybe<ResolversTypes['ENS__Bytes']>, ParentType, ContextType>;
  texts?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  coinTypes?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  events?: Resolver<Array<ResolversTypes['ENS__ResolverEvent']>, ParentType, ContextType, RequireFields<ENS__ResolvereventsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__ResolverEventResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__ResolverEvent'] = ResolversParentTypes['ENS__ResolverEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ENS__AbiChanged' | 'ENS__AddrChanged' | 'ENS__AuthorisationChanged' | 'ENS__ContenthashChanged' | 'ENS__InterfaceChanged' | 'ENS__MulticoinAddrChanged' | 'ENS__NameChanged' | 'ENS__PubkeyChanged' | 'ENS__TextChanged', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
}>;

export type ENS__TextChangedResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__TextChanged'] = ResolversParentTypes['ENS__TextChanged']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  resolver?: Resolver<ResolversTypes['ENS__Resolver'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS__TransferResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS__Transfer'] = ResolversParentTypes['ENS__Transfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['ENS__Domain'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionID?: Resolver<ResolversTypes['ENS__Bytes'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['ENS__Account'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS___Block_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS___Block_'] = ResolversParentTypes['ENS___Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['ENS__Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ENS___Meta_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ENS___Meta_'] = ResolversParentTypes['ENS___Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['ENS___Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__AllocationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Allocation'] = ResolversParentTypes['ANALYTICS__Allocation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['ANALYTICS__Indexer'], ParentType, ContextType>;
  creator?: Resolver<ResolversTypes['ANALYTICS__Bytes'], ParentType, ContextType>;
  activeForIndexer?: Resolver<Maybe<ResolversTypes['ANALYTICS__Indexer']>, ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['ANALYTICS__SubgraphDeployment'], ParentType, ContextType>;
  allocatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  effectiveAllocation?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAtEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAtBlockHash?: Resolver<ResolversTypes['ANALYTICS__Bytes'], ParentType, ContextType>;
  closedAtEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedAtBlockHash?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  closedAtBlockNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  poolClosedIn?: Resolver<Maybe<ResolversTypes['ANALYTICS__Pool']>, ParentType, ContextType>;
  delegationFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ANALYTICS__AllocationStatus'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  poi?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  totalReturn?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  annualizedReturn?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ANALYTICS__BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ANALYTICS__BigDecimal'], any> {
  name: 'ANALYTICS__BigDecimal';
}

export interface ANALYTICS__BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ANALYTICS__Bytes'], any> {
  name: 'ANALYTICS__Bytes';
}

export type ANALYTICS__CuratorResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Curator'] = ResolversParentTypes['ANALYTICS__Curator']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalSignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signals?: Resolver<Array<ResolversTypes['ANALYTICS__Signal']>, ParentType, ContextType, RequireFields<ANALYTICS__CuratorsignalsArgs, 'skip' | 'first'>>;
  totalNameSignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalNameUnsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalWithdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignals?: Resolver<Array<ResolversTypes['ANALYTICS__NameSignal']>, ParentType, ContextType, RequireFields<ANALYTICS__CuratornameSignalsArgs, 'skip' | 'first'>>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  annualizedReturn?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalReturn?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  signalingEfficiency?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalNameSignal?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalNameSignalAverageCostBasis?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalAverageCostBasisPerNameSignal?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__DelegatedStakeResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__DelegatedStake'] = ResolversParentTypes['ANALYTICS__DelegatedStake']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['ANALYTICS__Indexer'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['ANALYTICS__Delegator'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedUntil?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  shareAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  personalExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  latestIndexerExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  unrealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  originalDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  currentDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalStakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastDelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastUndelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  relation?: Resolver<ResolversTypes['ANALYTICS__IndexerDelegatedStakeRelation'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__DelegatedStakeDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__DelegatedStakeDailyData'] = ResolversParentTypes['ANALYTICS__DelegatedStakeDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stake?: Resolver<ResolversTypes['ANALYTICS__DelegatedStake'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['ANALYTICS__Delegator'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['ANALYTICS__Indexer'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  shareAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  personalExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  latestIndexerExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  unrealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  originalDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  currentDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__DelegatorResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Delegator'] = ResolversParentTypes['ANALYTICS__Delegator']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stakes?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType, RequireFields<ANALYTICS__DelegatorstakesArgs, 'skip' | 'first'>>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalRealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalUnrealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  originalDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  currentDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  dailyData?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatorDailyData']>, ParentType, ContextType, RequireFields<ANALYTICS__DelegatordailyDataArgs, 'skip' | 'first'>>;
  totalStakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  stakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeStakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastDelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastUndelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastDelegation?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType>;
  lastUndelegation?: Resolver<Maybe<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__DelegatorDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__DelegatorDailyData'] = ResolversParentTypes['ANALYTICS__DelegatorDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['ANALYTICS__Delegator'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnrealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  totalRealizedRewards?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  currentDelegation?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  stakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeStakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__DelegatorDelegatedStakeDailyRelationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation'] = ResolversParentTypes['ANALYTICS__DelegatorDelegatedStakeDailyRelation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['ANALYTICS__Delegator'], ParentType, ContextType>;
  stake?: Resolver<ResolversTypes['ANALYTICS__DelegatedStake'], ParentType, ContextType>;
  delegatorDailyData?: Resolver<ResolversTypes['ANALYTICS__DelegatorDailyData'], ParentType, ContextType>;
  delegatedStakeDailyData?: Resolver<ResolversTypes['ANALYTICS__DelegatedStakeDailyData'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__GraphAccountResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__GraphAccount'] = ResolversParentTypes['ANALYTICS__GraphAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  names?: Resolver<Array<ResolversTypes['ANALYTICS__GraphAccountName']>, ParentType, ContextType, RequireFields<ANALYTICS__GraphAccountnamesArgs, 'skip' | 'first'>>;
  defaultName?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphAccountName']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isOrganization?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadataHash?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  codeRepository?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  operatorOf?: Resolver<Array<ResolversTypes['ANALYTICS__GraphAccount']>, ParentType, ContextType, RequireFields<ANALYTICS__GraphAccountoperatorOfArgs, 'skip' | 'first'>>;
  operators?: Resolver<Array<ResolversTypes['ANALYTICS__GraphAccount']>, ParentType, ContextType, RequireFields<ANALYTICS__GraphAccountoperatorsArgs, 'skip' | 'first'>>;
  balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curationApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  stakingApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  gnsApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraphs?: Resolver<Array<ResolversTypes['ANALYTICS__Subgraph']>, ParentType, ContextType, RequireFields<ANALYTICS__GraphAccountsubgraphsArgs, 'skip' | 'first'>>;
  developerCreatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  curator?: Resolver<Maybe<ResolversTypes['ANALYTICS__Curator']>, ParentType, ContextType>;
  indexer?: Resolver<Maybe<ResolversTypes['ANALYTICS__Indexer']>, ParentType, ContextType>;
  delegator?: Resolver<Maybe<ResolversTypes['ANALYTICS__Delegator']>, ParentType, ContextType>;
  nameSignalTransactions?: Resolver<Array<ResolversTypes['ANALYTICS__NameSignalTransaction']>, ParentType, ContextType, RequireFields<ANALYTICS__GraphAccountnameSignalTransactionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__GraphAccountNameResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__GraphAccountName'] = ResolversParentTypes['ANALYTICS__GraphAccountName']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  nameSystem?: Resolver<ResolversTypes['ANALYTICS__NameSystem'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  graphAccount?: Resolver<Maybe<ResolversTypes['ANALYTICS__GraphAccount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__GraphNetworkResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__GraphNetwork'] = ResolversParentTypes['ANALYTICS__GraphNetwork']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  delegationRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalTokensStaked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensClaimable?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokensLocked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensAllocated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatorQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCuratorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTaxedQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnclaimedQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensSignalled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  defaultReserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexerCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stakedIndexersCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  curatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphDeploymentCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__GraphNetworkDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__GraphNetworkDailyData'] = ResolversParentTypes['ANALYTICS__GraphNetworkDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['ANALYTICS__GraphNetwork'], ParentType, ContextType>;
  delegationRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalTokensStaked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokensLocked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensAllocated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatorQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCuratorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTaxedQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnclaimedQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensSignalled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  defaultReserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexerCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stakedIndexersCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  curatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphDeploymentCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__IndexerResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Indexer'] = ResolversParentTypes['ANALYTICS__Indexer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  geoHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  account?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  allocatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensLockedUntil?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  allocations?: Resolver<Array<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<ANALYTICS__IndexerallocationsArgs, 'skip' | 'first'>>;
  totalAllocations?: Resolver<Array<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<ANALYTICS__IndexertotalAllocationsArgs, 'skip' | 'first'>>;
  allocationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalAllocationCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  rewardsEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerRewardsOwnGenerationRatio?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatedCapacity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCapacity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  availableStake?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegators?: Resolver<Array<ResolversTypes['ANALYTICS__DelegatedStake']>, ParentType, ContextType, RequireFields<ANALYTICS__IndexerdelegatorsArgs, 'skip' | 'first'>>;
  delegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  ownStakeRatio?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatedStakeRatio?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatorShares?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegationExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  indexingRewardCut?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexingRewardEffectiveCut?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  overDelegationDilution?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeCut?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  queryFeeEffectiveCut?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatorParameterCooldown?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastDelegationParameterUpdate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  forcedClosures?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegatorsCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dailyData?: Resolver<Array<ResolversTypes['ANALYTICS__IndexerDailyData']>, ParentType, ContextType, RequireFields<ANALYTICS__IndexerdailyDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__IndexerDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__IndexerDailyData'] = ResolversParentTypes['ANALYTICS__IndexerDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['ANALYTICS__Indexer'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  allocatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  availableStake?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  netDailyDelegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegationExchangeRate?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  delegatorsCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__IndexerDelegatedStakeRelationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__IndexerDelegatedStakeRelation'] = ResolversParentTypes['ANALYTICS__IndexerDelegatedStakeRelation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['ANALYTICS__Indexer'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['ANALYTICS__Delegator'], ParentType, ContextType>;
  stake?: Resolver<ResolversTypes['ANALYTICS__DelegatedStake'], ParentType, ContextType>;
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__NameSignalResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__NameSignal'] = ResolversParentTypes['ANALYTICS__NameSignal']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  curator?: Resolver<ResolversTypes['ANALYTICS__Curator'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['ANALYTICS__Subgraph'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  withdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastNameSignalChange?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  averageCostBasis?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  averageCostBasisPerSignal?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['ANALYTICS__NameSignal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__NameSignalTransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__NameSignalTransaction'] = ResolversParentTypes['ANALYTICS__NameSignalTransaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ANALYTICS__TransactionType'], ParentType, ContextType>;
  nameSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  versionSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['ANALYTICS__Subgraph'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__PoolResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Pool'] = ResolversParentTypes['ANALYTICS__Pool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  allocation?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  claimedFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  closedAllocations?: Resolver<Array<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<ANALYTICS__PoolclosedAllocationsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SignalResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Signal'] = ResolversParentTypes['ANALYTICS__Signal']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  curator?: Resolver<ResolversTypes['ANALYTICS__Curator'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['ANALYTICS__SubgraphDeployment'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lastSignalChange?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SignalTransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__SignalTransaction'] = ResolversParentTypes['ANALYTICS__SignalTransaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ANALYTICS__TransactionType'], ParentType, ContextType>;
  signal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['ANALYTICS__SubgraphDeployment'], ParentType, ContextType>;
  withdrawalFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SubgraphResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Subgraph'] = ResolversParentTypes['ANALYTICS__Subgraph']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  currentVersion?: Resolver<Maybe<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType>;
  pastVersions?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphpastVersionsArgs, 'skip' | 'first'>>;
  versions?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphversionsArgs, 'skip' | 'first'>>;
  versionCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  migrated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  initializing?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  nftID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  oldID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  creatorAddress?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  subgraphNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['ANALYTICS__Subgraph']>, ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  reserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawableTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  withdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignals?: Resolver<Array<ResolversTypes['ANALYTICS__NameSignal']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphnameSignalsArgs, 'skip' | 'first'>>;
  metadataHash?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SubgraphDeploymentResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__SubgraphDeployment'] = ResolversParentTypes['ANALYTICS__SubgraphDeployment']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  versions?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphDeploymentversionsArgs, 'skip' | 'first'>>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deniedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerAllocations?: Resolver<Array<ResolversTypes['ANALYTICS__Allocation']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphDeploymentindexerAllocationsArgs, 'skip' | 'first'>>;
  indexingRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingIndexerRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingDelegatorRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorFeeRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pricePerShare?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  curatorSignals?: Resolver<Array<ResolversTypes['ANALYTICS__Signal']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphDeploymentcuratorSignalsArgs, 'skip' | 'first'>>;
  reserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dailyData?: Resolver<Array<ResolversTypes['ANALYTICS__SubgraphDeploymentDailyData']>, ParentType, ContextType, RequireFields<ANALYTICS__SubgraphDeploymentdailyDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SubgraphDeploymentDailyDataResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__SubgraphDeploymentDailyData'] = ResolversParentTypes['ANALYTICS__SubgraphDeploymentDailyData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  dayStart?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayEnd?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  dayNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['ANALYTICS__SubgraphDeployment'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pricePerShare?: Resolver<ResolversTypes['ANALYTICS__BigDecimal'], ParentType, ContextType>;
  indexingRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingIndexerRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingDelegatorRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorFeeRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__SubgraphVersionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__SubgraphVersion'] = ResolversParentTypes['ANALYTICS__SubgraphVersion']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['ANALYTICS__Subgraph'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['ANALYTICS__SubgraphDeployment'], ParentType, ContextType>;
  version?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadataHash?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['ANALYTICS__SubgraphVersion']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS__TransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS__Transaction'] = ResolversParentTypes['ANALYTICS__Transaction']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ANALYTICS__NameSignalTransaction' | 'ANALYTICS__SignalTransaction', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['ANALYTICS__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ANALYTICS__TransactionType'], ParentType, ContextType>;
}>;

export type ANALYTICS___Block_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS___Block_'] = ResolversParentTypes['ANALYTICS___Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['ANALYTICS__Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ANALYTICS___Meta_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['ANALYTICS___Meta_'] = ResolversParentTypes['ANALYTICS___Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['ANALYTICS___Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__AllocationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Allocation'] = ResolversParentTypes['NETWORK__Allocation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['NETWORK__Indexer'], ParentType, ContextType>;
  creator?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  activeForIndexer?: Resolver<Maybe<ResolversTypes['NETWORK__Indexer']>, ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  allocatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  effectiveAllocation?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAtEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAtBlockHash?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  createdAtBlockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedAtEpoch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  closedAtBlockHash?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  closedAtBlockNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  poolClosedIn?: Resolver<Maybe<ResolversTypes['NETWORK__Pool']>, ParentType, ContextType>;
  delegationFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['NETWORK__AllocationStatus'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  poi?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  indexingRewardCutAtStart?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexingRewardEffectiveCutAtStart?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  queryFeeCutAtStart?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  queryFeeEffectiveCutAtStart?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  indexingRewardCutAtClose?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  indexingRewardEffectiveCutAtClose?: Resolver<Maybe<ResolversTypes['NETWORK__BigDecimal']>, ParentType, ContextType>;
  queryFeeCutAtClose?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  queryFeeEffectiveCutAtClose?: Resolver<Maybe<ResolversTypes['NETWORK__BigDecimal']>, ParentType, ContextType>;
  totalReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  annualizedReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__AttestationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Attestation'] = ResolversParentTypes['NETWORK__Attestation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  requestCID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  responseCID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  responseNumBytes?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  v?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  r?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  s?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__AuthorizedFunctionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__AuthorizedFunction'] = ResolversParentTypes['NETWORK__AuthorizedFunction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  target?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  sigHash?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  manager?: Resolver<ResolversTypes['NETWORK__TokenManager'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface NETWORK__BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['NETWORK__BigDecimal'], any> {
  name: 'NETWORK__BigDecimal';
}

export interface NETWORK__BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['NETWORK__Bytes'], any> {
  name: 'NETWORK__Bytes';
}

export type NETWORK__CuratorResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Curator'] = ResolversParentTypes['NETWORK__Curator']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  totalSignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signals?: Resolver<Array<ResolversTypes['NETWORK__Signal']>, ParentType, ContextType, RequireFields<NETWORK__CuratorsignalsArgs, 'skip' | 'first'>>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  totalNameSignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalNameUnsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalWithdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignals?: Resolver<Array<ResolversTypes['NETWORK__NameSignal']>, ParentType, ContextType, RequireFields<NETWORK__CuratornameSignalsArgs, 'skip' | 'first'>>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  annualizedReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  signalingEfficiency?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalNameSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalNameSignalAverageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalAverageCostBasisPerNameSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalSignalAverageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalAverageCostBasisPerSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  signalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nameSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeNameSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  combinedSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeCombinedSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__CurrentSubgraphDeploymentRelationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__CurrentSubgraphDeploymentRelation'] = ResolversParentTypes['NETWORK__CurrentSubgraphDeploymentRelation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__DelegatedStakeResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__DelegatedStake'] = ResolversParentTypes['NETWORK__DelegatedStake']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['NETWORK__Indexer'], ParentType, ContextType>;
  delegator?: Resolver<ResolversTypes['NETWORK__Delegator'], ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedUntil?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  shareAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  personalExchangeRate?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastDelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastUndelegatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__DelegatorResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Delegator'] = ResolversParentTypes['NETWORK__Delegator']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  stakes?: Resolver<Array<ResolversTypes['NETWORK__DelegatedStake']>, ParentType, ContextType, RequireFields<NETWORK__DelegatorstakesArgs, 'skip' | 'first'>>;
  totalStakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalRealizedRewards?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  stakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeStakesCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__DisputeResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Dispute'] = ResolversParentTypes['NETWORK__Dispute']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  fisherman?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  deposit?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  closedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['NETWORK__DisputeStatus'], ParentType, ContextType>;
  tokensSlashed?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  tokensBurned?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  tokensRewarded?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['NETWORK__DisputeType'], ParentType, ContextType>;
  indexer?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  attestation?: Resolver<Maybe<ResolversTypes['NETWORK__Attestation']>, ParentType, ContextType>;
  linkedDispute?: Resolver<Maybe<ResolversTypes['NETWORK__Dispute']>, ParentType, ContextType>;
  allocation?: Resolver<Maybe<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__EpochResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Epoch'] = ResolversParentTypes['NETWORK__Epoch']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  startBlock?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  endBlock?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  stakeDeposited?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  taxedQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__GraphAccountResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__GraphAccount'] = ResolversParentTypes['NETWORK__GraphAccount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  names?: Resolver<Array<ResolversTypes['NETWORK__GraphAccountName']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountnamesArgs, 'skip' | 'first'>>;
  defaultName?: Resolver<Maybe<ResolversTypes['NETWORK__GraphAccountName']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isOrganization?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadataHash?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  codeRepository?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  operatorOf?: Resolver<Array<ResolversTypes['NETWORK__GraphAccount']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountoperatorOfArgs, 'skip' | 'first'>>;
  operators?: Resolver<Array<ResolversTypes['NETWORK__GraphAccount']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountoperatorsArgs, 'skip' | 'first'>>;
  balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curationApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  stakingApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  gnsApproval?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraphs?: Resolver<Array<ResolversTypes['NETWORK__Subgraph']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountsubgraphsArgs, 'skip' | 'first'>>;
  developerCreatedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subgraphQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdDisputes?: Resolver<Array<ResolversTypes['NETWORK__Dispute']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountcreatedDisputesArgs, 'skip' | 'first'>>;
  disputesAgainst?: Resolver<Array<ResolversTypes['NETWORK__Dispute']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountdisputesAgainstArgs, 'skip' | 'first'>>;
  curator?: Resolver<Maybe<ResolversTypes['NETWORK__Curator']>, ParentType, ContextType>;
  indexer?: Resolver<Maybe<ResolversTypes['NETWORK__Indexer']>, ParentType, ContextType>;
  delegator?: Resolver<Maybe<ResolversTypes['NETWORK__Delegator']>, ParentType, ContextType>;
  nameSignalTransactions?: Resolver<Array<ResolversTypes['NETWORK__NameSignalTransaction']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccountnameSignalTransactionsArgs, 'skip' | 'first'>>;
  tokenLockWallets?: Resolver<Array<ResolversTypes['NETWORK__TokenLockWallet']>, ParentType, ContextType, RequireFields<NETWORK__GraphAccounttokenLockWalletsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__GraphAccountNameResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__GraphAccountName'] = ResolversParentTypes['NETWORK__GraphAccountName']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  nameSystem?: Resolver<ResolversTypes['NETWORK__NameSystem'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  graphAccount?: Resolver<Maybe<ResolversTypes['NETWORK__GraphAccount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__GraphNetworkResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__GraphNetwork'] = ResolversParentTypes['NETWORK__GraphNetwork']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  controller?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  graphToken?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  epochManager?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  epochManagerImplementations?: Resolver<Array<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  curation?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  curationImplementations?: Resolver<Array<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  staking?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  stakingImplementations?: Resolver<Array<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  disputeManager?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  gns?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  serviceRegistry?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  rewardsManager?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  rewardsManagerImplementations?: Resolver<Array<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  isPaused?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPartialPaused?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  governor?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  pauseGuardian?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  curationPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  protocolFeePercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegationRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  channelDisputeEpochs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  maxAllocationEpochs?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  thawingPeriod?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegationParametersCooldown?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minimumIndexerStake?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  slashers?: Resolver<Maybe<Array<ResolversTypes['NETWORK__Bytes']>>, ParentType, ContextType>;
  delegationUnbondingPeriod?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rebateRatio?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegationTaxPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  assetHolders?: Resolver<Maybe<Array<ResolversTypes['NETWORK__Bytes']>>, ParentType, ContextType>;
  totalTokensStaked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensClaimable?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnstakedTokensLocked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensAllocated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensSignalled?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTokensSignalledAutoMigrate?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalTokensSignalledDirectly?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexerQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalDelegatorQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalCuratorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalTaxedQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalUnclaimedQueryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingDelegatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalIndexingIndexerRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  networkGRTIssuance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraphAvailabilityOracle?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  defaultReserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minimumCurationDeposit?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curationTaxPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  ownerTaxPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  GRTinUSD?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  GRTinETH?: Resolver<Maybe<ResolversTypes['NETWORK__BigDecimal']>, ParentType, ContextType>;
  totalGRTMinted?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalGRTBurned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  epochLength?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastRunEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastLengthUpdateEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastLengthUpdateBlock?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currentEpoch?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexerCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stakedIndexersCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeDelegatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  delegationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeDelegationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  curatorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeCuratorCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeSubgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subgraphDeploymentCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  epochCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  arbitrator?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  querySlashingPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexingSlashingPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  slashingPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minimumDisputeDeposit?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  fishermanRewardPercentage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalGRTDeposited?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalGRTWithdrawnConfirmed?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalGRTDepositedConfirmed?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalGRTWithdrawn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  currentL1BlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__IndexerResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Indexer'] = ResolversParentTypes['NETWORK__Indexer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  account?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  geoHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultDisplayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  allocatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unstakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lockedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensLockedUntil?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  allocations?: Resolver<Array<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<NETWORK__IndexerallocationsArgs, 'skip' | 'first'>>;
  totalAllocations?: Resolver<Array<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<NETWORK__IndexertotalAllocationsArgs, 'skip' | 'first'>>;
  allocationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalAllocationCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesCollected?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  rewardsEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegatorIndexingRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerRewardsOwnGenerationRatio?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegatedCapacity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCapacity?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  availableStake?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegators?: Resolver<Array<ResolversTypes['NETWORK__DelegatedStake']>, ParentType, ContextType, RequireFields<NETWORK__IndexerdelegatorsArgs, 'skip' | 'first'>>;
  delegatedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  ownStakeRatio?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegatedStakeRatio?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegatorShares?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  delegationExchangeRate?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  indexingRewardCut?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  indexingRewardEffectiveCut?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  overDelegationDilution?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegatorQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeCut?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  queryFeeEffectiveCut?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  delegatorParameterCooldown?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastDelegationParameterUpdate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  forcedClosures?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  annualizedReturn?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  stakingEfficiency?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__NameSignalResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__NameSignal'] = ResolversParentTypes['NETWORK__NameSignal']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  curator?: Resolver<ResolversTypes['NETWORK__Curator'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  withdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  lastNameSignalChange?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  averageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  averageCostBasisPerSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  nameSignalAverageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  nameSignalAverageCostBasisPerSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  signalAverageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  signalAverageCostBasisPerSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['NETWORK__NameSignal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__NameSignalSubgraphRelationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__NameSignalSubgraphRelation'] = ResolversParentTypes['NETWORK__NameSignalSubgraphRelation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  nameSignal?: Resolver<ResolversTypes['NETWORK__NameSignal'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__NameSignalTransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__NameSignalTransaction'] = ResolversParentTypes['NETWORK__NameSignalTransaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['NETWORK__TransactionType'], ParentType, ContextType>;
  nameSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  versionSignal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__NetworkResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Network'] = ResolversParentTypes['NETWORK__Network']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  deployments?: Resolver<Array<ResolversTypes['NETWORK__SubgraphDeployment']>, ParentType, ContextType, RequireFields<NETWORK__NetworkdeploymentsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__PoolResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Pool'] = ResolversParentTypes['NETWORK__Pool']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  allocation?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalQueryFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  claimedFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  closedAllocations?: Resolver<Array<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<NETWORK__PoolclosedAllocationsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SignalResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Signal'] = ResolversParentTypes['NETWORK__Signal']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  curator?: Resolver<ResolversTypes['NETWORK__Curator'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  averageCostBasis?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  averageCostBasisPerSignal?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  lastSignalChange?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  realizedRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAtBlock?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastUpdatedAtBlock?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SignalTransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__SignalTransaction'] = ResolversParentTypes['NETWORK__SignalTransaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['NETWORK__TransactionType'], ParentType, ContextType>;
  signal?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  withdrawalFees?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SubgraphResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Subgraph'] = ResolversParentTypes['NETWORK__Subgraph']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  currentVersion?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType>;
  pastVersions?: Resolver<Array<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphpastVersionsArgs, 'skip' | 'first'>>;
  versions?: Resolver<Array<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphversionsArgs, 'skip' | 'first'>>;
  versionCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  migrated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  nftID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  oldID?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  creatorAddress?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  subgraphNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initializing?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['NETWORK__Subgraph']>, ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  currentSignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  reserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  withdrawableTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  withdrawnTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  nameSignals?: Resolver<Array<ResolversTypes['NETWORK__NameSignal']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphnameSignalsArgs, 'skip' | 'first'>>;
  nameSignalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadataHash?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  ipfsMetadataHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nftImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeRepository?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Array<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphcategoriesArgs, 'skip' | 'first'>>;
  currentVersionRelationEntity?: Resolver<Maybe<ResolversTypes['NETWORK__CurrentSubgraphDeploymentRelation']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SubgraphCategoryResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__SubgraphCategory'] = ResolversParentTypes['NETWORK__SubgraphCategory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraphs?: Resolver<Array<ResolversTypes['NETWORK__SubgraphCategoryRelation']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphCategorysubgraphsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SubgraphCategoryRelationResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__SubgraphCategoryRelation'] = ResolversParentTypes['NETWORK__SubgraphCategoryRelation']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  category?: Resolver<ResolversTypes['NETWORK__SubgraphCategory'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SubgraphDeploymentResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__SubgraphDeployment'] = ResolversParentTypes['NETWORK__SubgraphDeployment']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ipfsHash?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  versions?: Resolver<Array<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphDeploymentversionsArgs, 'skip' | 'first'>>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deniedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  originalName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stakedTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexerAllocations?: Resolver<Array<ResolversTypes['NETWORK__Allocation']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphDeploymentindexerAllocationsArgs, 'skip' | 'first'>>;
  indexingRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingIndexerRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  indexingDelegatorRewardAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeesAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  queryFeeRebates?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  curatorFeeRewards?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  unsignalledTokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  signalAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pricePerShare?: Resolver<ResolversTypes['NETWORK__BigDecimal'], ParentType, ContextType>;
  curatorSignals?: Resolver<Array<ResolversTypes['NETWORK__Signal']>, ParentType, ContextType, RequireFields<NETWORK__SubgraphDeploymentcuratorSignalsArgs, 'skip' | 'first'>>;
  reserveRatio?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  manifest?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['NETWORK__Network']>, ParentType, ContextType>;
  schema?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  schemaIpfsHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  activeSubgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  deprecatedSubgraphCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__SubgraphVersionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__SubgraphVersion'] = ResolversParentTypes['NETWORK__SubgraphVersion']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  subgraph?: Resolver<ResolversTypes['NETWORK__Subgraph'], ParentType, ContextType>;
  subgraphDeployment?: Resolver<ResolversTypes['NETWORK__SubgraphDeployment'], ParentType, ContextType>;
  version?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadataHash?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entityVersion?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  linkedEntity?: Resolver<Maybe<ResolversTypes['NETWORK__SubgraphVersion']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__TokenLockWalletResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__TokenLockWallet'] = ResolversParentTypes['NETWORK__TokenLockWallet']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  manager?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  initHash?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  beneficiary?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  managedAmount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  startTime?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  endTime?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  periods?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  releaseStartTime?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  vestingCliffTime?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  revocable?: Resolver<Maybe<ResolversTypes['NETWORK__Revocability']>, ParentType, ContextType>;
  tokenDestinationsApproved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  tokensReleased?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensWithdrawn?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensRevoked?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumberCreated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  txHash?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__TokenManagerResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__TokenManager'] = ResolversParentTypes['NETWORK__TokenManager']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  masterCopy?: Resolver<ResolversTypes['NETWORK__Bytes'], ParentType, ContextType>;
  tokens?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenDestinations?: Resolver<Maybe<Array<ResolversTypes['NETWORK__Bytes']>>, ParentType, ContextType>;
  authorizedFunctions?: Resolver<Maybe<Array<ResolversTypes['NETWORK__AuthorizedFunction']>>, ParentType, ContextType, RequireFields<NETWORK__TokenManagerauthorizedFunctionsArgs, 'skip' | 'first'>>;
  tokenLockCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK__TransactionResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK__Transaction'] = ResolversParentTypes['NETWORK__Transaction']> = ResolversObject<{
  __resolveType: TypeResolveFn<'NETWORK__NameSignalTransaction' | 'NETWORK__SignalTransaction', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  signer?: Resolver<ResolversTypes['NETWORK__GraphAccount'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['NETWORK__TransactionType'], ParentType, ContextType>;
}>;

export type NETWORK___Block_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK___Block_'] = ResolversParentTypes['NETWORK___Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['NETWORK__Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NETWORK___Meta_Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }, ParentType extends ResolversParentTypes['NETWORK___Meta_'] = ResolversParentTypes['NETWORK___Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['NETWORK___Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  BILLING__BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  BILLING__Billing?: BILLING__BillingResolvers<ContextType>;
  BILLING__BillingDailyData?: BILLING__BillingDailyDataResolvers<ContextType>;
  BILLING__Bytes?: GraphQLScalarType;
  BILLING__TokensAdded?: BILLING__TokensAddedResolvers<ContextType>;
  BILLING__TokensPulled?: BILLING__TokensPulledResolvers<ContextType>;
  BILLING__TokensRemoved?: BILLING__TokensRemovedResolvers<ContextType>;
  BILLING__Transaction?: BILLING__TransactionResolvers<ContextType>;
  BILLING__User?: BILLING__UserResolvers<ContextType>;
  BILLING__UserDailyData?: BILLING__UserDailyDataResolvers<ContextType>;
  BILLING___Block_?: BILLING___Block_Resolvers<ContextType>;
  BILLING___Meta_?: BILLING___Meta_Resolvers<ContextType>;
  ENS__AbiChanged?: ENS__AbiChangedResolvers<ContextType>;
  ENS__Account?: ENS__AccountResolvers<ContextType>;
  ENS__AddrChanged?: ENS__AddrChangedResolvers<ContextType>;
  ENS__AuthorisationChanged?: ENS__AuthorisationChangedResolvers<ContextType>;
  ENS__BigDecimal?: GraphQLScalarType;
  ENS__Bytes?: GraphQLScalarType;
  ENS__ContenthashChanged?: ENS__ContenthashChangedResolvers<ContextType>;
  ENS__Domain?: ENS__DomainResolvers<ContextType>;
  ENS__DomainEvent?: ENS__DomainEventResolvers<ContextType>;
  ENS__InterfaceChanged?: ENS__InterfaceChangedResolvers<ContextType>;
  ENS__MulticoinAddrChanged?: ENS__MulticoinAddrChangedResolvers<ContextType>;
  ENS__NameChanged?: ENS__NameChangedResolvers<ContextType>;
  ENS__NameRegistered?: ENS__NameRegisteredResolvers<ContextType>;
  ENS__NameRenewed?: ENS__NameRenewedResolvers<ContextType>;
  ENS__NameTransferred?: ENS__NameTransferredResolvers<ContextType>;
  ENS__NewOwner?: ENS__NewOwnerResolvers<ContextType>;
  ENS__NewResolver?: ENS__NewResolverResolvers<ContextType>;
  ENS__NewTTL?: ENS__NewTTLResolvers<ContextType>;
  ENS__PubkeyChanged?: ENS__PubkeyChangedResolvers<ContextType>;
  ENS__Registration?: ENS__RegistrationResolvers<ContextType>;
  ENS__RegistrationEvent?: ENS__RegistrationEventResolvers<ContextType>;
  ENS__Resolver?: ENS__ResolverResolvers<ContextType>;
  ENS__ResolverEvent?: ENS__ResolverEventResolvers<ContextType>;
  ENS__TextChanged?: ENS__TextChangedResolvers<ContextType>;
  ENS__Transfer?: ENS__TransferResolvers<ContextType>;
  ENS___Block_?: ENS___Block_Resolvers<ContextType>;
  ENS___Meta_?: ENS___Meta_Resolvers<ContextType>;
  ANALYTICS__Allocation?: ANALYTICS__AllocationResolvers<ContextType>;
  ANALYTICS__BigDecimal?: GraphQLScalarType;
  ANALYTICS__Bytes?: GraphQLScalarType;
  ANALYTICS__Curator?: ANALYTICS__CuratorResolvers<ContextType>;
  ANALYTICS__DelegatedStake?: ANALYTICS__DelegatedStakeResolvers<ContextType>;
  ANALYTICS__DelegatedStakeDailyData?: ANALYTICS__DelegatedStakeDailyDataResolvers<ContextType>;
  ANALYTICS__Delegator?: ANALYTICS__DelegatorResolvers<ContextType>;
  ANALYTICS__DelegatorDailyData?: ANALYTICS__DelegatorDailyDataResolvers<ContextType>;
  ANALYTICS__DelegatorDelegatedStakeDailyRelation?: ANALYTICS__DelegatorDelegatedStakeDailyRelationResolvers<ContextType>;
  ANALYTICS__GraphAccount?: ANALYTICS__GraphAccountResolvers<ContextType>;
  ANALYTICS__GraphAccountName?: ANALYTICS__GraphAccountNameResolvers<ContextType>;
  ANALYTICS__GraphNetwork?: ANALYTICS__GraphNetworkResolvers<ContextType>;
  ANALYTICS__GraphNetworkDailyData?: ANALYTICS__GraphNetworkDailyDataResolvers<ContextType>;
  ANALYTICS__Indexer?: ANALYTICS__IndexerResolvers<ContextType>;
  ANALYTICS__IndexerDailyData?: ANALYTICS__IndexerDailyDataResolvers<ContextType>;
  ANALYTICS__IndexerDelegatedStakeRelation?: ANALYTICS__IndexerDelegatedStakeRelationResolvers<ContextType>;
  ANALYTICS__NameSignal?: ANALYTICS__NameSignalResolvers<ContextType>;
  ANALYTICS__NameSignalTransaction?: ANALYTICS__NameSignalTransactionResolvers<ContextType>;
  ANALYTICS__Pool?: ANALYTICS__PoolResolvers<ContextType>;
  ANALYTICS__Signal?: ANALYTICS__SignalResolvers<ContextType>;
  ANALYTICS__SignalTransaction?: ANALYTICS__SignalTransactionResolvers<ContextType>;
  ANALYTICS__Subgraph?: ANALYTICS__SubgraphResolvers<ContextType>;
  ANALYTICS__SubgraphDeployment?: ANALYTICS__SubgraphDeploymentResolvers<ContextType>;
  ANALYTICS__SubgraphDeploymentDailyData?: ANALYTICS__SubgraphDeploymentDailyDataResolvers<ContextType>;
  ANALYTICS__SubgraphVersion?: ANALYTICS__SubgraphVersionResolvers<ContextType>;
  ANALYTICS__Transaction?: ANALYTICS__TransactionResolvers<ContextType>;
  ANALYTICS___Block_?: ANALYTICS___Block_Resolvers<ContextType>;
  ANALYTICS___Meta_?: ANALYTICS___Meta_Resolvers<ContextType>;
  NETWORK__Allocation?: NETWORK__AllocationResolvers<ContextType>;
  NETWORK__Attestation?: NETWORK__AttestationResolvers<ContextType>;
  NETWORK__AuthorizedFunction?: NETWORK__AuthorizedFunctionResolvers<ContextType>;
  NETWORK__BigDecimal?: GraphQLScalarType;
  NETWORK__Bytes?: GraphQLScalarType;
  NETWORK__Curator?: NETWORK__CuratorResolvers<ContextType>;
  NETWORK__CurrentSubgraphDeploymentRelation?: NETWORK__CurrentSubgraphDeploymentRelationResolvers<ContextType>;
  NETWORK__DelegatedStake?: NETWORK__DelegatedStakeResolvers<ContextType>;
  NETWORK__Delegator?: NETWORK__DelegatorResolvers<ContextType>;
  NETWORK__Dispute?: NETWORK__DisputeResolvers<ContextType>;
  NETWORK__Epoch?: NETWORK__EpochResolvers<ContextType>;
  NETWORK__GraphAccount?: NETWORK__GraphAccountResolvers<ContextType>;
  NETWORK__GraphAccountName?: NETWORK__GraphAccountNameResolvers<ContextType>;
  NETWORK__GraphNetwork?: NETWORK__GraphNetworkResolvers<ContextType>;
  NETWORK__Indexer?: NETWORK__IndexerResolvers<ContextType>;
  NETWORK__NameSignal?: NETWORK__NameSignalResolvers<ContextType>;
  NETWORK__NameSignalSubgraphRelation?: NETWORK__NameSignalSubgraphRelationResolvers<ContextType>;
  NETWORK__NameSignalTransaction?: NETWORK__NameSignalTransactionResolvers<ContextType>;
  NETWORK__Network?: NETWORK__NetworkResolvers<ContextType>;
  NETWORK__Pool?: NETWORK__PoolResolvers<ContextType>;
  NETWORK__Signal?: NETWORK__SignalResolvers<ContextType>;
  NETWORK__SignalTransaction?: NETWORK__SignalTransactionResolvers<ContextType>;
  NETWORK__Subgraph?: NETWORK__SubgraphResolvers<ContextType>;
  NETWORK__SubgraphCategory?: NETWORK__SubgraphCategoryResolvers<ContextType>;
  NETWORK__SubgraphCategoryRelation?: NETWORK__SubgraphCategoryRelationResolvers<ContextType>;
  NETWORK__SubgraphDeployment?: NETWORK__SubgraphDeploymentResolvers<ContextType>;
  NETWORK__SubgraphVersion?: NETWORK__SubgraphVersionResolvers<ContextType>;
  NETWORK__TokenLockWallet?: NETWORK__TokenLockWalletResolvers<ContextType>;
  NETWORK__TokenManager?: NETWORK__TokenManagerResolvers<ContextType>;
  NETWORK__Transaction?: NETWORK__TransactionResolvers<ContextType>;
  NETWORK___Block_?: NETWORK___Block_Resolvers<ContextType>;
  NETWORK___Meta_?: NETWORK___Meta_Resolvers<ContextType>;
}>;

export type DirectiveResolvers<ContextType = MeshContext & { network: string; analytics: string; ens: string; billing: string; }> = ResolversObject<{
  entity?: entityDirectiveResolver<any, any, ContextType>;
  subgraphId?: subgraphIdDirectiveResolver<any, any, ContextType>;
  derivedFrom?: derivedFromDirectiveResolver<any, any, ContextType>;
}>;

export type MeshContext = BillingTypes.Context & EnsTypes.Context & AnalyticsTypes.Context & NetworkTypes.Context & BaseMeshContext;


import { fileURLToPath } from '@graphql-mesh/utils';
const baseDir = pathModule.join(pathModule.dirname(fileURLToPath(import.meta.url)), '..');

const importFn: ImportFn = <T>(moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  switch(relativeModuleId) {
    case ".graphclient/sources/Billing/introspectionSchema":
      return import("./sources/Billing/introspectionSchema") as T;
    
    case ".graphclient/sources/ENS/introspectionSchema":
      return import("./sources/ENS/introspectionSchema") as T;
    
    case ".graphclient/sources/Analytics/introspectionSchema":
      return import("./sources/Analytics/introspectionSchema") as T;
    
    case ".graphclient/sources/Network/introspectionSchema":
      return import("./sources/Network/introspectionSchema") as T;
    
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};

const rootStore = new MeshStore('.graphclient', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts",
}), {
  readonly: true,
  validate: false
});

export const rawServeConfig: YamlConfig.Config['serve'] = undefined as any
export async function getMeshOptions(): Promise<GetMeshOptions> {
const pubsub = new PubSub();
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger("GraphClient");
const cache = new (MeshCache as any)({
      ...({} as any),
      importFn,
      store: rootStore.child('cache'),
      pubsub,
      logger,
    } as any)

const sources: MeshResolvedSource[] = [];
const transforms: MeshTransform[] = [];
const additionalEnvelopPlugins: MeshPlugin<any>[] = [];
const networkTransforms = [];
const analyticsTransforms = [];
const ensTransforms = [];
const billingTransforms = [];
const additionalTypeDefs = [] as any[];
const networkHandler = new GraphqlHandler({
              name: "Network",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/graphprotocol/{context.network:graph-network-mainnet}"},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Network"),
              logger: logger.child("Network"),
              importFn,
            });
const analyticsHandler = new GraphqlHandler({
              name: "Analytics",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/graphprotocol/{context.analytics:graph-network-analytics}"},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Analytics"),
              logger: logger.child("Analytics"),
              importFn,
            });
const ensHandler = new GraphqlHandler({
              name: "ENS",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/{context.ens:ensdomains/ens}"},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("ENS"),
              logger: logger.child("ENS"),
              importFn,
            });
const billingHandler = new GraphqlHandler({
              name: "Billing",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/graphprotocol/{context.billing:billing}"},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Billing"),
              logger: logger.child("Billing"),
              importFn,
            });
networkTransforms[0] = new PrefixTransform({
                  apiName: "Network",
                  config: {"value":"NETWORK__","includeRootOperations":true},
                  baseDir,
                  cache,
                  pubsub,
                  importFn,
                  logger,
                });
analyticsTransforms[0] = new PrefixTransform({
                  apiName: "Analytics",
                  config: {"value":"ANALYTICS__","includeRootOperations":true},
                  baseDir,
                  cache,
                  pubsub,
                  importFn,
                  logger,
                });
ensTransforms[0] = new PrefixTransform({
                  apiName: "ENS",
                  config: {"value":"ENS__","includeRootOperations":true},
                  baseDir,
                  cache,
                  pubsub,
                  importFn,
                  logger,
                });
billingTransforms[0] = new PrefixTransform({
                  apiName: "Billing",
                  config: {"value":"BILLING__","includeRootOperations":true},
                  baseDir,
                  cache,
                  pubsub,
                  importFn,
                  logger,
                });
sources[0] = {
          name: 'Network',
          handler: networkHandler,
          transforms: networkTransforms
        }
sources[1] = {
          name: 'Analytics',
          handler: analyticsHandler,
          transforms: analyticsTransforms
        }
sources[2] = {
          name: 'ENS',
          handler: ensHandler,
          transforms: ensTransforms
        }
sources[3] = {
          name: 'Billing',
          handler: billingHandler,
          transforms: billingTransforms
        }
const additionalResolvers = [] as any[]
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('stitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    additionalEnvelopPlugins,
    get documents() {
      return [
      
    ];
    },
    fetchFn,
  };
}

export function createBuiltMeshHTTPHandler(): MeshHTTPHandler<MeshContext> {
  return createMeshHTTPHandler<MeshContext>({
    baseDir,
    getBuiltMesh: getBuiltGraphClient,
    rawServeConfig: undefined,
  })
}


let meshInstance$: Promise<MeshInstance> | undefined;

export function getBuiltGraphClient(): Promise<MeshInstance> {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then(meshOptions => getMesh(meshOptions)).then(mesh => {
      const id = mesh.pubsub.subscribe('destroy', () => {
        meshInstance$ = undefined;
        mesh.pubsub.unsubscribe(id);
      });
      return mesh;
    });
  }
  return meshInstance$;
}

export const execute: ExecuteMeshFn = (...args) => getBuiltGraphClient().then(({ execute }) => execute(...args));

export const subscribe: SubscribeMeshFn = (...args) => getBuiltGraphClient().then(({ subscribe }) => subscribe(...args));